
AVR_Projects.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007ce8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001d2  00800060  00007ce8  00007d7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000060  00800232  00800232  00007f4e  2**0
                  ALLOC
  3 .stab         0000429c  00000000  00000000  00007f50  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001797  00000000  00000000  0000c1ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000260  00000000  00000000  0000d983  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002ae  00000000  00000000  0000dbe3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000308d  00000000  00000000  0000de91  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001ab8  00000000  00000000  00010f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001732  00000000  00000000  000129d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000280  00000000  00000000  00014108  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000364  00000000  00000000  00014388  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000cbe  00000000  00000000  000146ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000153aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ee       	ldi	r30, 0xE8	; 232
      68:	fc e7       	ldi	r31, 0x7C	; 124
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 33       	cpi	r26, 0x32	; 50
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 e3       	ldi	r26, 0x32	; 50
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 39       	cpi	r26, 0x92	; 146
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <main>
      8a:	0c 94 72 3e 	jmp	0x7ce4	; 0x7ce4 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__lshrdi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__lshrdi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__lshrdi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__lshrdi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	4d 81       	ldd	r20, Y+5	; 0x05
      e4:	5e 81       	ldd	r21, Y+6	; 0x06
      e6:	6f 81       	ldd	r22, Y+7	; 0x07
      e8:	78 85       	ldd	r23, Y+8	; 0x08
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__lshrdi3+0x7c>
      ee:	1d 86       	std	Y+13, r1	; 0x0d
      f0:	1e 86       	std	Y+14, r1	; 0x0e
      f2:	1f 86       	std	Y+15, r1	; 0x0f
      f4:	18 8a       	std	Y+16, r1	; 0x10
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__lshrdi3+0x76>
     100:	76 95       	lsr	r23
     102:	67 95       	ror	r22
     104:	57 95       	ror	r21
     106:	47 95       	ror	r20
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__lshrdi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__lshrdi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__lshrdi3+0x94>
     11e:	b6 95       	lsr	r27
     120:	a7 95       	ror	r26
     122:	97 95       	ror	r25
     124:	87 95       	ror	r24
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__lshrdi3+0x8c>
     12a:	8d 87       	std	Y+13, r24	; 0x0d
     12c:	9e 87       	std	Y+14, r25	; 0x0e
     12e:	af 87       	std	Y+15, r26	; 0x0f
     130:	b8 8b       	std	Y+16, r27	; 0x10
     132:	04 c0       	rjmp	.+8      	; 0x13c <__lshrdi3+0xaa>
     134:	44 0f       	add	r20, r20
     136:	55 1f       	adc	r21, r21
     138:	66 1f       	adc	r22, r22
     13a:	77 1f       	adc	r23, r23
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__lshrdi3+0xa2>
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	9a 81       	ldd	r25, Y+2	; 0x02
     144:	ab 81       	ldd	r26, Y+3	; 0x03
     146:	bc 81       	ldd	r27, Y+4	; 0x04
     148:	04 c0       	rjmp	.+8      	; 0x152 <__lshrdi3+0xc0>
     14a:	b6 95       	lsr	r27
     14c:	a7 95       	ror	r26
     14e:	97 95       	ror	r25
     150:	87 95       	ror	r24
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__lshrdi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	49 87       	std	Y+9, r20	; 0x09
     160:	5a 87       	std	Y+10, r21	; 0x0a
     162:	6b 87       	std	Y+11, r22	; 0x0b
     164:	7c 87       	std	Y+12, r23	; 0x0c
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__ashldi3>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	df 93       	push	r29
     198:	cf 93       	push	r28
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
     19e:	60 97       	sbiw	r28, 0x10	; 16
     1a0:	0f b6       	in	r0, 0x3f	; 63
     1a2:	f8 94       	cli
     1a4:	de bf       	out	0x3e, r29	; 62
     1a6:	0f be       	out	0x3f, r0	; 63
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	a8 2f       	mov	r26, r24
     1ac:	00 23       	and	r16, r16
     1ae:	09 f4       	brne	.+2      	; 0x1b2 <__ashldi3+0x22>
     1b0:	61 c0       	rjmp	.+194    	; 0x274 <__ashldi3+0xe4>
     1b2:	7e 01       	movw	r14, r28
     1b4:	08 94       	sec
     1b6:	e1 1c       	adc	r14, r1
     1b8:	f1 1c       	adc	r15, r1
     1ba:	88 e0       	ldi	r24, 0x08	; 8
     1bc:	f7 01       	movw	r30, r14
     1be:	11 92       	st	Z+, r1
     1c0:	8a 95       	dec	r24
     1c2:	e9 f7       	brne	.-6      	; 0x1be <__ashldi3+0x2e>
     1c4:	29 83       	std	Y+1, r18	; 0x01
     1c6:	3a 83       	std	Y+2, r19	; 0x02
     1c8:	4b 83       	std	Y+3, r20	; 0x03
     1ca:	5c 83       	std	Y+4, r21	; 0x04
     1cc:	6d 83       	std	Y+5, r22	; 0x05
     1ce:	7e 83       	std	Y+6, r23	; 0x06
     1d0:	af 83       	std	Y+7, r26	; 0x07
     1d2:	98 87       	std	Y+8, r25	; 0x08
     1d4:	80 e2       	ldi	r24, 0x20	; 32
     1d6:	80 1b       	sub	r24, r16
     1d8:	e8 2f       	mov	r30, r24
     1da:	ff 27       	eor	r31, r31
     1dc:	e7 fd       	sbrc	r30, 7
     1de:	f0 95       	com	r31
     1e0:	49 81       	ldd	r20, Y+1	; 0x01
     1e2:	5a 81       	ldd	r21, Y+2	; 0x02
     1e4:	6b 81       	ldd	r22, Y+3	; 0x03
     1e6:	7c 81       	ldd	r23, Y+4	; 0x04
     1e8:	18 16       	cp	r1, r24
     1ea:	84 f0       	brlt	.+32     	; 0x20c <__ashldi3+0x7c>
     1ec:	19 86       	std	Y+9, r1	; 0x09
     1ee:	1a 86       	std	Y+10, r1	; 0x0a
     1f0:	1b 86       	std	Y+11, r1	; 0x0b
     1f2:	1c 86       	std	Y+12, r1	; 0x0c
     1f4:	88 27       	eor	r24, r24
     1f6:	99 27       	eor	r25, r25
     1f8:	8e 1b       	sub	r24, r30
     1fa:	9f 0b       	sbc	r25, r31
     1fc:	04 c0       	rjmp	.+8      	; 0x206 <__ashldi3+0x76>
     1fe:	44 0f       	add	r20, r20
     200:	55 1f       	adc	r21, r21
     202:	66 1f       	adc	r22, r22
     204:	77 1f       	adc	r23, r23
     206:	8a 95       	dec	r24
     208:	d2 f7       	brpl	.-12     	; 0x1fe <__ashldi3+0x6e>
     20a:	28 c0       	rjmp	.+80     	; 0x25c <__ashldi3+0xcc>
     20c:	20 2f       	mov	r18, r16
     20e:	33 27       	eor	r19, r19
     210:	27 fd       	sbrc	r18, 7
     212:	30 95       	com	r19
     214:	db 01       	movw	r26, r22
     216:	ca 01       	movw	r24, r20
     218:	02 2e       	mov	r0, r18
     21a:	04 c0       	rjmp	.+8      	; 0x224 <__ashldi3+0x94>
     21c:	88 0f       	add	r24, r24
     21e:	99 1f       	adc	r25, r25
     220:	aa 1f       	adc	r26, r26
     222:	bb 1f       	adc	r27, r27
     224:	0a 94       	dec	r0
     226:	d2 f7       	brpl	.-12     	; 0x21c <__ashldi3+0x8c>
     228:	89 87       	std	Y+9, r24	; 0x09
     22a:	9a 87       	std	Y+10, r25	; 0x0a
     22c:	ab 87       	std	Y+11, r26	; 0x0b
     22e:	bc 87       	std	Y+12, r27	; 0x0c
     230:	04 c0       	rjmp	.+8      	; 0x23a <__ashldi3+0xaa>
     232:	76 95       	lsr	r23
     234:	67 95       	ror	r22
     236:	57 95       	ror	r21
     238:	47 95       	ror	r20
     23a:	ea 95       	dec	r30
     23c:	d2 f7       	brpl	.-12     	; 0x232 <__ashldi3+0xa2>
     23e:	8d 81       	ldd	r24, Y+5	; 0x05
     240:	9e 81       	ldd	r25, Y+6	; 0x06
     242:	af 81       	ldd	r26, Y+7	; 0x07
     244:	b8 85       	ldd	r27, Y+8	; 0x08
     246:	04 c0       	rjmp	.+8      	; 0x250 <__ashldi3+0xc0>
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	aa 1f       	adc	r26, r26
     24e:	bb 1f       	adc	r27, r27
     250:	2a 95       	dec	r18
     252:	d2 f7       	brpl	.-12     	; 0x248 <__ashldi3+0xb8>
     254:	48 2b       	or	r20, r24
     256:	59 2b       	or	r21, r25
     258:	6a 2b       	or	r22, r26
     25a:	7b 2b       	or	r23, r27
     25c:	4d 87       	std	Y+13, r20	; 0x0d
     25e:	5e 87       	std	Y+14, r21	; 0x0e
     260:	6f 87       	std	Y+15, r22	; 0x0f
     262:	78 8b       	std	Y+16, r23	; 0x10
     264:	29 85       	ldd	r18, Y+9	; 0x09
     266:	3a 85       	ldd	r19, Y+10	; 0x0a
     268:	4b 85       	ldd	r20, Y+11	; 0x0b
     26a:	5c 85       	ldd	r21, Y+12	; 0x0c
     26c:	6d 85       	ldd	r22, Y+13	; 0x0d
     26e:	7e 85       	ldd	r23, Y+14	; 0x0e
     270:	af 85       	ldd	r26, Y+15	; 0x0f
     272:	98 89       	ldd	r25, Y+16	; 0x10
     274:	8a 2f       	mov	r24, r26
     276:	60 96       	adiw	r28, 0x10	; 16
     278:	0f b6       	in	r0, 0x3f	; 63
     27a:	f8 94       	cli
     27c:	de bf       	out	0x3e, r29	; 62
     27e:	0f be       	out	0x3f, r0	; 63
     280:	cd bf       	out	0x3d, r28	; 61
     282:	cf 91       	pop	r28
     284:	df 91       	pop	r29
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	08 95       	ret

0000028e <__fixunssfsi>:
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	7b 01       	movw	r14, r22
     298:	8c 01       	movw	r16, r24
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	30 e0       	ldi	r19, 0x00	; 0
     29e:	40 e0       	ldi	r20, 0x00	; 0
     2a0:	5f e4       	ldi	r21, 0x4F	; 79
     2a2:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__gesf2>
     2a6:	88 23       	and	r24, r24
     2a8:	8c f0       	brlt	.+34     	; 0x2cc <__fixunssfsi+0x3e>
     2aa:	c8 01       	movw	r24, r16
     2ac:	b7 01       	movw	r22, r14
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	40 e0       	ldi	r20, 0x00	; 0
     2b4:	5f e4       	ldi	r21, 0x4F	; 79
     2b6:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
     2ba:	0e 94 41 06 	call	0xc82	; 0xc82 <__fixsfsi>
     2be:	9b 01       	movw	r18, r22
     2c0:	ac 01       	movw	r20, r24
     2c2:	20 50       	subi	r18, 0x00	; 0
     2c4:	30 40       	sbci	r19, 0x00	; 0
     2c6:	40 40       	sbci	r20, 0x00	; 0
     2c8:	50 48       	sbci	r21, 0x80	; 128
     2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <__fixunssfsi+0x4a>
     2cc:	c8 01       	movw	r24, r16
     2ce:	b7 01       	movw	r22, r14
     2d0:	0e 94 41 06 	call	0xc82	; 0xc82 <__fixsfsi>
     2d4:	9b 01       	movw	r18, r22
     2d6:	ac 01       	movw	r20, r24
     2d8:	b9 01       	movw	r22, r18
     2da:	ca 01       	movw	r24, r20
     2dc:	1f 91       	pop	r17
     2de:	0f 91       	pop	r16
     2e0:	ff 90       	pop	r15
     2e2:	ef 90       	pop	r14
     2e4:	08 95       	ret

000002e6 <_fpadd_parts>:
     2e6:	a0 e0       	ldi	r26, 0x00	; 0
     2e8:	b0 e0       	ldi	r27, 0x00	; 0
     2ea:	e9 e7       	ldi	r30, 0x79	; 121
     2ec:	f1 e0       	ldi	r31, 0x01	; 1
     2ee:	0c 94 c3 3c 	jmp	0x7986	; 0x7986 <__prologue_saves__>
     2f2:	dc 01       	movw	r26, r24
     2f4:	2b 01       	movw	r4, r22
     2f6:	fa 01       	movw	r30, r20
     2f8:	9c 91       	ld	r25, X
     2fa:	92 30       	cpi	r25, 0x02	; 2
     2fc:	08 f4       	brcc	.+2      	; 0x300 <_fpadd_parts+0x1a>
     2fe:	39 c1       	rjmp	.+626    	; 0x572 <_fpadd_parts+0x28c>
     300:	eb 01       	movw	r28, r22
     302:	88 81       	ld	r24, Y
     304:	82 30       	cpi	r24, 0x02	; 2
     306:	08 f4       	brcc	.+2      	; 0x30a <_fpadd_parts+0x24>
     308:	33 c1       	rjmp	.+614    	; 0x570 <_fpadd_parts+0x28a>
     30a:	94 30       	cpi	r25, 0x04	; 4
     30c:	69 f4       	brne	.+26     	; 0x328 <_fpadd_parts+0x42>
     30e:	84 30       	cpi	r24, 0x04	; 4
     310:	09 f0       	breq	.+2      	; 0x314 <_fpadd_parts+0x2e>
     312:	2f c1       	rjmp	.+606    	; 0x572 <_fpadd_parts+0x28c>
     314:	11 96       	adiw	r26, 0x01	; 1
     316:	9c 91       	ld	r25, X
     318:	11 97       	sbiw	r26, 0x01	; 1
     31a:	89 81       	ldd	r24, Y+1	; 0x01
     31c:	98 17       	cp	r25, r24
     31e:	09 f4       	brne	.+2      	; 0x322 <_fpadd_parts+0x3c>
     320:	28 c1       	rjmp	.+592    	; 0x572 <_fpadd_parts+0x28c>
     322:	ab ec       	ldi	r26, 0xCB	; 203
     324:	b0 e0       	ldi	r27, 0x00	; 0
     326:	25 c1       	rjmp	.+586    	; 0x572 <_fpadd_parts+0x28c>
     328:	84 30       	cpi	r24, 0x04	; 4
     32a:	09 f4       	brne	.+2      	; 0x32e <_fpadd_parts+0x48>
     32c:	21 c1       	rjmp	.+578    	; 0x570 <_fpadd_parts+0x28a>
     32e:	82 30       	cpi	r24, 0x02	; 2
     330:	a9 f4       	brne	.+42     	; 0x35c <_fpadd_parts+0x76>
     332:	92 30       	cpi	r25, 0x02	; 2
     334:	09 f0       	breq	.+2      	; 0x338 <_fpadd_parts+0x52>
     336:	1d c1       	rjmp	.+570    	; 0x572 <_fpadd_parts+0x28c>
     338:	9a 01       	movw	r18, r20
     33a:	ad 01       	movw	r20, r26
     33c:	88 e0       	ldi	r24, 0x08	; 8
     33e:	ea 01       	movw	r28, r20
     340:	09 90       	ld	r0, Y+
     342:	ae 01       	movw	r20, r28
     344:	e9 01       	movw	r28, r18
     346:	09 92       	st	Y+, r0
     348:	9e 01       	movw	r18, r28
     34a:	81 50       	subi	r24, 0x01	; 1
     34c:	c1 f7       	brne	.-16     	; 0x33e <_fpadd_parts+0x58>
     34e:	e2 01       	movw	r28, r4
     350:	89 81       	ldd	r24, Y+1	; 0x01
     352:	11 96       	adiw	r26, 0x01	; 1
     354:	9c 91       	ld	r25, X
     356:	89 23       	and	r24, r25
     358:	81 83       	std	Z+1, r24	; 0x01
     35a:	08 c1       	rjmp	.+528    	; 0x56c <_fpadd_parts+0x286>
     35c:	92 30       	cpi	r25, 0x02	; 2
     35e:	09 f4       	brne	.+2      	; 0x362 <_fpadd_parts+0x7c>
     360:	07 c1       	rjmp	.+526    	; 0x570 <_fpadd_parts+0x28a>
     362:	12 96       	adiw	r26, 0x02	; 2
     364:	2d 90       	ld	r2, X+
     366:	3c 90       	ld	r3, X
     368:	13 97       	sbiw	r26, 0x03	; 3
     36a:	eb 01       	movw	r28, r22
     36c:	8a 81       	ldd	r24, Y+2	; 0x02
     36e:	9b 81       	ldd	r25, Y+3	; 0x03
     370:	14 96       	adiw	r26, 0x04	; 4
     372:	ad 90       	ld	r10, X+
     374:	bd 90       	ld	r11, X+
     376:	cd 90       	ld	r12, X+
     378:	dc 90       	ld	r13, X
     37a:	17 97       	sbiw	r26, 0x07	; 7
     37c:	ec 80       	ldd	r14, Y+4	; 0x04
     37e:	fd 80       	ldd	r15, Y+5	; 0x05
     380:	0e 81       	ldd	r16, Y+6	; 0x06
     382:	1f 81       	ldd	r17, Y+7	; 0x07
     384:	91 01       	movw	r18, r2
     386:	28 1b       	sub	r18, r24
     388:	39 0b       	sbc	r19, r25
     38a:	b9 01       	movw	r22, r18
     38c:	37 ff       	sbrs	r19, 7
     38e:	04 c0       	rjmp	.+8      	; 0x398 <_fpadd_parts+0xb2>
     390:	66 27       	eor	r22, r22
     392:	77 27       	eor	r23, r23
     394:	62 1b       	sub	r22, r18
     396:	73 0b       	sbc	r23, r19
     398:	60 32       	cpi	r22, 0x20	; 32
     39a:	71 05       	cpc	r23, r1
     39c:	0c f0       	brlt	.+2      	; 0x3a0 <_fpadd_parts+0xba>
     39e:	61 c0       	rjmp	.+194    	; 0x462 <_fpadd_parts+0x17c>
     3a0:	12 16       	cp	r1, r18
     3a2:	13 06       	cpc	r1, r19
     3a4:	6c f5       	brge	.+90     	; 0x400 <_fpadd_parts+0x11a>
     3a6:	37 01       	movw	r6, r14
     3a8:	48 01       	movw	r8, r16
     3aa:	06 2e       	mov	r0, r22
     3ac:	04 c0       	rjmp	.+8      	; 0x3b6 <_fpadd_parts+0xd0>
     3ae:	96 94       	lsr	r9
     3b0:	87 94       	ror	r8
     3b2:	77 94       	ror	r7
     3b4:	67 94       	ror	r6
     3b6:	0a 94       	dec	r0
     3b8:	d2 f7       	brpl	.-12     	; 0x3ae <_fpadd_parts+0xc8>
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	40 e0       	ldi	r20, 0x00	; 0
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	04 c0       	rjmp	.+8      	; 0x3cc <_fpadd_parts+0xe6>
     3c4:	22 0f       	add	r18, r18
     3c6:	33 1f       	adc	r19, r19
     3c8:	44 1f       	adc	r20, r20
     3ca:	55 1f       	adc	r21, r21
     3cc:	6a 95       	dec	r22
     3ce:	d2 f7       	brpl	.-12     	; 0x3c4 <_fpadd_parts+0xde>
     3d0:	21 50       	subi	r18, 0x01	; 1
     3d2:	30 40       	sbci	r19, 0x00	; 0
     3d4:	40 40       	sbci	r20, 0x00	; 0
     3d6:	50 40       	sbci	r21, 0x00	; 0
     3d8:	2e 21       	and	r18, r14
     3da:	3f 21       	and	r19, r15
     3dc:	40 23       	and	r20, r16
     3de:	51 23       	and	r21, r17
     3e0:	21 15       	cp	r18, r1
     3e2:	31 05       	cpc	r19, r1
     3e4:	41 05       	cpc	r20, r1
     3e6:	51 05       	cpc	r21, r1
     3e8:	21 f0       	breq	.+8      	; 0x3f2 <_fpadd_parts+0x10c>
     3ea:	21 e0       	ldi	r18, 0x01	; 1
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	40 e0       	ldi	r20, 0x00	; 0
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	79 01       	movw	r14, r18
     3f4:	8a 01       	movw	r16, r20
     3f6:	e6 28       	or	r14, r6
     3f8:	f7 28       	or	r15, r7
     3fa:	08 29       	or	r16, r8
     3fc:	19 29       	or	r17, r9
     3fe:	3c c0       	rjmp	.+120    	; 0x478 <_fpadd_parts+0x192>
     400:	23 2b       	or	r18, r19
     402:	d1 f1       	breq	.+116    	; 0x478 <_fpadd_parts+0x192>
     404:	26 0e       	add	r2, r22
     406:	37 1e       	adc	r3, r23
     408:	35 01       	movw	r6, r10
     40a:	46 01       	movw	r8, r12
     40c:	06 2e       	mov	r0, r22
     40e:	04 c0       	rjmp	.+8      	; 0x418 <_fpadd_parts+0x132>
     410:	96 94       	lsr	r9
     412:	87 94       	ror	r8
     414:	77 94       	ror	r7
     416:	67 94       	ror	r6
     418:	0a 94       	dec	r0
     41a:	d2 f7       	brpl	.-12     	; 0x410 <_fpadd_parts+0x12a>
     41c:	21 e0       	ldi	r18, 0x01	; 1
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	40 e0       	ldi	r20, 0x00	; 0
     422:	50 e0       	ldi	r21, 0x00	; 0
     424:	04 c0       	rjmp	.+8      	; 0x42e <_fpadd_parts+0x148>
     426:	22 0f       	add	r18, r18
     428:	33 1f       	adc	r19, r19
     42a:	44 1f       	adc	r20, r20
     42c:	55 1f       	adc	r21, r21
     42e:	6a 95       	dec	r22
     430:	d2 f7       	brpl	.-12     	; 0x426 <_fpadd_parts+0x140>
     432:	21 50       	subi	r18, 0x01	; 1
     434:	30 40       	sbci	r19, 0x00	; 0
     436:	40 40       	sbci	r20, 0x00	; 0
     438:	50 40       	sbci	r21, 0x00	; 0
     43a:	2a 21       	and	r18, r10
     43c:	3b 21       	and	r19, r11
     43e:	4c 21       	and	r20, r12
     440:	5d 21       	and	r21, r13
     442:	21 15       	cp	r18, r1
     444:	31 05       	cpc	r19, r1
     446:	41 05       	cpc	r20, r1
     448:	51 05       	cpc	r21, r1
     44a:	21 f0       	breq	.+8      	; 0x454 <_fpadd_parts+0x16e>
     44c:	21 e0       	ldi	r18, 0x01	; 1
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	40 e0       	ldi	r20, 0x00	; 0
     452:	50 e0       	ldi	r21, 0x00	; 0
     454:	59 01       	movw	r10, r18
     456:	6a 01       	movw	r12, r20
     458:	a6 28       	or	r10, r6
     45a:	b7 28       	or	r11, r7
     45c:	c8 28       	or	r12, r8
     45e:	d9 28       	or	r13, r9
     460:	0b c0       	rjmp	.+22     	; 0x478 <_fpadd_parts+0x192>
     462:	82 15       	cp	r24, r2
     464:	93 05       	cpc	r25, r3
     466:	2c f0       	brlt	.+10     	; 0x472 <_fpadd_parts+0x18c>
     468:	1c 01       	movw	r2, r24
     46a:	aa 24       	eor	r10, r10
     46c:	bb 24       	eor	r11, r11
     46e:	65 01       	movw	r12, r10
     470:	03 c0       	rjmp	.+6      	; 0x478 <_fpadd_parts+0x192>
     472:	ee 24       	eor	r14, r14
     474:	ff 24       	eor	r15, r15
     476:	87 01       	movw	r16, r14
     478:	11 96       	adiw	r26, 0x01	; 1
     47a:	9c 91       	ld	r25, X
     47c:	d2 01       	movw	r26, r4
     47e:	11 96       	adiw	r26, 0x01	; 1
     480:	8c 91       	ld	r24, X
     482:	98 17       	cp	r25, r24
     484:	09 f4       	brne	.+2      	; 0x488 <_fpadd_parts+0x1a2>
     486:	45 c0       	rjmp	.+138    	; 0x512 <_fpadd_parts+0x22c>
     488:	99 23       	and	r25, r25
     48a:	39 f0       	breq	.+14     	; 0x49a <_fpadd_parts+0x1b4>
     48c:	a8 01       	movw	r20, r16
     48e:	97 01       	movw	r18, r14
     490:	2a 19       	sub	r18, r10
     492:	3b 09       	sbc	r19, r11
     494:	4c 09       	sbc	r20, r12
     496:	5d 09       	sbc	r21, r13
     498:	06 c0       	rjmp	.+12     	; 0x4a6 <_fpadd_parts+0x1c0>
     49a:	a6 01       	movw	r20, r12
     49c:	95 01       	movw	r18, r10
     49e:	2e 19       	sub	r18, r14
     4a0:	3f 09       	sbc	r19, r15
     4a2:	40 0b       	sbc	r20, r16
     4a4:	51 0b       	sbc	r21, r17
     4a6:	57 fd       	sbrc	r21, 7
     4a8:	08 c0       	rjmp	.+16     	; 0x4ba <_fpadd_parts+0x1d4>
     4aa:	11 82       	std	Z+1, r1	; 0x01
     4ac:	33 82       	std	Z+3, r3	; 0x03
     4ae:	22 82       	std	Z+2, r2	; 0x02
     4b0:	24 83       	std	Z+4, r18	; 0x04
     4b2:	35 83       	std	Z+5, r19	; 0x05
     4b4:	46 83       	std	Z+6, r20	; 0x06
     4b6:	57 83       	std	Z+7, r21	; 0x07
     4b8:	1d c0       	rjmp	.+58     	; 0x4f4 <_fpadd_parts+0x20e>
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	81 83       	std	Z+1, r24	; 0x01
     4be:	33 82       	std	Z+3, r3	; 0x03
     4c0:	22 82       	std	Z+2, r2	; 0x02
     4c2:	88 27       	eor	r24, r24
     4c4:	99 27       	eor	r25, r25
     4c6:	dc 01       	movw	r26, r24
     4c8:	82 1b       	sub	r24, r18
     4ca:	93 0b       	sbc	r25, r19
     4cc:	a4 0b       	sbc	r26, r20
     4ce:	b5 0b       	sbc	r27, r21
     4d0:	84 83       	std	Z+4, r24	; 0x04
     4d2:	95 83       	std	Z+5, r25	; 0x05
     4d4:	a6 83       	std	Z+6, r26	; 0x06
     4d6:	b7 83       	std	Z+7, r27	; 0x07
     4d8:	0d c0       	rjmp	.+26     	; 0x4f4 <_fpadd_parts+0x20e>
     4da:	22 0f       	add	r18, r18
     4dc:	33 1f       	adc	r19, r19
     4de:	44 1f       	adc	r20, r20
     4e0:	55 1f       	adc	r21, r21
     4e2:	24 83       	std	Z+4, r18	; 0x04
     4e4:	35 83       	std	Z+5, r19	; 0x05
     4e6:	46 83       	std	Z+6, r20	; 0x06
     4e8:	57 83       	std	Z+7, r21	; 0x07
     4ea:	82 81       	ldd	r24, Z+2	; 0x02
     4ec:	93 81       	ldd	r25, Z+3	; 0x03
     4ee:	01 97       	sbiw	r24, 0x01	; 1
     4f0:	93 83       	std	Z+3, r25	; 0x03
     4f2:	82 83       	std	Z+2, r24	; 0x02
     4f4:	24 81       	ldd	r18, Z+4	; 0x04
     4f6:	35 81       	ldd	r19, Z+5	; 0x05
     4f8:	46 81       	ldd	r20, Z+6	; 0x06
     4fa:	57 81       	ldd	r21, Z+7	; 0x07
     4fc:	da 01       	movw	r26, r20
     4fe:	c9 01       	movw	r24, r18
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	a1 09       	sbc	r26, r1
     504:	b1 09       	sbc	r27, r1
     506:	8f 5f       	subi	r24, 0xFF	; 255
     508:	9f 4f       	sbci	r25, 0xFF	; 255
     50a:	af 4f       	sbci	r26, 0xFF	; 255
     50c:	bf 43       	sbci	r27, 0x3F	; 63
     50e:	28 f3       	brcs	.-54     	; 0x4da <_fpadd_parts+0x1f4>
     510:	0b c0       	rjmp	.+22     	; 0x528 <_fpadd_parts+0x242>
     512:	91 83       	std	Z+1, r25	; 0x01
     514:	33 82       	std	Z+3, r3	; 0x03
     516:	22 82       	std	Z+2, r2	; 0x02
     518:	ea 0c       	add	r14, r10
     51a:	fb 1c       	adc	r15, r11
     51c:	0c 1d       	adc	r16, r12
     51e:	1d 1d       	adc	r17, r13
     520:	e4 82       	std	Z+4, r14	; 0x04
     522:	f5 82       	std	Z+5, r15	; 0x05
     524:	06 83       	std	Z+6, r16	; 0x06
     526:	17 83       	std	Z+7, r17	; 0x07
     528:	83 e0       	ldi	r24, 0x03	; 3
     52a:	80 83       	st	Z, r24
     52c:	24 81       	ldd	r18, Z+4	; 0x04
     52e:	35 81       	ldd	r19, Z+5	; 0x05
     530:	46 81       	ldd	r20, Z+6	; 0x06
     532:	57 81       	ldd	r21, Z+7	; 0x07
     534:	57 ff       	sbrs	r21, 7
     536:	1a c0       	rjmp	.+52     	; 0x56c <_fpadd_parts+0x286>
     538:	c9 01       	movw	r24, r18
     53a:	aa 27       	eor	r26, r26
     53c:	97 fd       	sbrc	r25, 7
     53e:	a0 95       	com	r26
     540:	ba 2f       	mov	r27, r26
     542:	81 70       	andi	r24, 0x01	; 1
     544:	90 70       	andi	r25, 0x00	; 0
     546:	a0 70       	andi	r26, 0x00	; 0
     548:	b0 70       	andi	r27, 0x00	; 0
     54a:	56 95       	lsr	r21
     54c:	47 95       	ror	r20
     54e:	37 95       	ror	r19
     550:	27 95       	ror	r18
     552:	82 2b       	or	r24, r18
     554:	93 2b       	or	r25, r19
     556:	a4 2b       	or	r26, r20
     558:	b5 2b       	or	r27, r21
     55a:	84 83       	std	Z+4, r24	; 0x04
     55c:	95 83       	std	Z+5, r25	; 0x05
     55e:	a6 83       	std	Z+6, r26	; 0x06
     560:	b7 83       	std	Z+7, r27	; 0x07
     562:	82 81       	ldd	r24, Z+2	; 0x02
     564:	93 81       	ldd	r25, Z+3	; 0x03
     566:	01 96       	adiw	r24, 0x01	; 1
     568:	93 83       	std	Z+3, r25	; 0x03
     56a:	82 83       	std	Z+2, r24	; 0x02
     56c:	df 01       	movw	r26, r30
     56e:	01 c0       	rjmp	.+2      	; 0x572 <_fpadd_parts+0x28c>
     570:	d2 01       	movw	r26, r4
     572:	cd 01       	movw	r24, r26
     574:	cd b7       	in	r28, 0x3d	; 61
     576:	de b7       	in	r29, 0x3e	; 62
     578:	e2 e1       	ldi	r30, 0x12	; 18
     57a:	0c 94 df 3c 	jmp	0x79be	; 0x79be <__epilogue_restores__>

0000057e <__subsf3>:
     57e:	a0 e2       	ldi	r26, 0x20	; 32
     580:	b0 e0       	ldi	r27, 0x00	; 0
     582:	e5 ec       	ldi	r30, 0xC5	; 197
     584:	f2 e0       	ldi	r31, 0x02	; 2
     586:	0c 94 cf 3c 	jmp	0x799e	; 0x799e <__prologue_saves__+0x18>
     58a:	69 83       	std	Y+1, r22	; 0x01
     58c:	7a 83       	std	Y+2, r23	; 0x02
     58e:	8b 83       	std	Y+3, r24	; 0x03
     590:	9c 83       	std	Y+4, r25	; 0x04
     592:	2d 83       	std	Y+5, r18	; 0x05
     594:	3e 83       	std	Y+6, r19	; 0x06
     596:	4f 83       	std	Y+7, r20	; 0x07
     598:	58 87       	std	Y+8, r21	; 0x08
     59a:	e9 e0       	ldi	r30, 0x09	; 9
     59c:	ee 2e       	mov	r14, r30
     59e:	f1 2c       	mov	r15, r1
     5a0:	ec 0e       	add	r14, r28
     5a2:	fd 1e       	adc	r15, r29
     5a4:	ce 01       	movw	r24, r28
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	b7 01       	movw	r22, r14
     5aa:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     5ae:	8e 01       	movw	r16, r28
     5b0:	0f 5e       	subi	r16, 0xEF	; 239
     5b2:	1f 4f       	sbci	r17, 0xFF	; 255
     5b4:	ce 01       	movw	r24, r28
     5b6:	05 96       	adiw	r24, 0x05	; 5
     5b8:	b8 01       	movw	r22, r16
     5ba:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     5be:	8a 89       	ldd	r24, Y+18	; 0x12
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	89 27       	eor	r24, r25
     5c4:	8a 8b       	std	Y+18, r24	; 0x12
     5c6:	c7 01       	movw	r24, r14
     5c8:	b8 01       	movw	r22, r16
     5ca:	ae 01       	movw	r20, r28
     5cc:	47 5e       	subi	r20, 0xE7	; 231
     5ce:	5f 4f       	sbci	r21, 0xFF	; 255
     5d0:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_fpadd_parts>
     5d4:	0e 94 5d 07 	call	0xeba	; 0xeba <__pack_f>
     5d8:	a0 96       	adiw	r28, 0x20	; 32
     5da:	e6 e0       	ldi	r30, 0x06	; 6
     5dc:	0c 94 eb 3c 	jmp	0x79d6	; 0x79d6 <__epilogue_restores__+0x18>

000005e0 <__addsf3>:
     5e0:	a0 e2       	ldi	r26, 0x20	; 32
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	e6 ef       	ldi	r30, 0xF6	; 246
     5e6:	f2 e0       	ldi	r31, 0x02	; 2
     5e8:	0c 94 cf 3c 	jmp	0x799e	; 0x799e <__prologue_saves__+0x18>
     5ec:	69 83       	std	Y+1, r22	; 0x01
     5ee:	7a 83       	std	Y+2, r23	; 0x02
     5f0:	8b 83       	std	Y+3, r24	; 0x03
     5f2:	9c 83       	std	Y+4, r25	; 0x04
     5f4:	2d 83       	std	Y+5, r18	; 0x05
     5f6:	3e 83       	std	Y+6, r19	; 0x06
     5f8:	4f 83       	std	Y+7, r20	; 0x07
     5fa:	58 87       	std	Y+8, r21	; 0x08
     5fc:	f9 e0       	ldi	r31, 0x09	; 9
     5fe:	ef 2e       	mov	r14, r31
     600:	f1 2c       	mov	r15, r1
     602:	ec 0e       	add	r14, r28
     604:	fd 1e       	adc	r15, r29
     606:	ce 01       	movw	r24, r28
     608:	01 96       	adiw	r24, 0x01	; 1
     60a:	b7 01       	movw	r22, r14
     60c:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     610:	8e 01       	movw	r16, r28
     612:	0f 5e       	subi	r16, 0xEF	; 239
     614:	1f 4f       	sbci	r17, 0xFF	; 255
     616:	ce 01       	movw	r24, r28
     618:	05 96       	adiw	r24, 0x05	; 5
     61a:	b8 01       	movw	r22, r16
     61c:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     620:	c7 01       	movw	r24, r14
     622:	b8 01       	movw	r22, r16
     624:	ae 01       	movw	r20, r28
     626:	47 5e       	subi	r20, 0xE7	; 231
     628:	5f 4f       	sbci	r21, 0xFF	; 255
     62a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <_fpadd_parts>
     62e:	0e 94 5d 07 	call	0xeba	; 0xeba <__pack_f>
     632:	a0 96       	adiw	r28, 0x20	; 32
     634:	e6 e0       	ldi	r30, 0x06	; 6
     636:	0c 94 eb 3c 	jmp	0x79d6	; 0x79d6 <__epilogue_restores__+0x18>

0000063a <__mulsf3>:
     63a:	a0 e2       	ldi	r26, 0x20	; 32
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	e3 e2       	ldi	r30, 0x23	; 35
     640:	f3 e0       	ldi	r31, 0x03	; 3
     642:	0c 94 c3 3c 	jmp	0x7986	; 0x7986 <__prologue_saves__>
     646:	69 83       	std	Y+1, r22	; 0x01
     648:	7a 83       	std	Y+2, r23	; 0x02
     64a:	8b 83       	std	Y+3, r24	; 0x03
     64c:	9c 83       	std	Y+4, r25	; 0x04
     64e:	2d 83       	std	Y+5, r18	; 0x05
     650:	3e 83       	std	Y+6, r19	; 0x06
     652:	4f 83       	std	Y+7, r20	; 0x07
     654:	58 87       	std	Y+8, r21	; 0x08
     656:	ce 01       	movw	r24, r28
     658:	01 96       	adiw	r24, 0x01	; 1
     65a:	be 01       	movw	r22, r28
     65c:	67 5f       	subi	r22, 0xF7	; 247
     65e:	7f 4f       	sbci	r23, 0xFF	; 255
     660:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     664:	ce 01       	movw	r24, r28
     666:	05 96       	adiw	r24, 0x05	; 5
     668:	be 01       	movw	r22, r28
     66a:	6f 5e       	subi	r22, 0xEF	; 239
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     672:	99 85       	ldd	r25, Y+9	; 0x09
     674:	92 30       	cpi	r25, 0x02	; 2
     676:	88 f0       	brcs	.+34     	; 0x69a <__mulsf3+0x60>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	c8 f0       	brcs	.+50     	; 0x6b0 <__mulsf3+0x76>
     67e:	94 30       	cpi	r25, 0x04	; 4
     680:	19 f4       	brne	.+6      	; 0x688 <__mulsf3+0x4e>
     682:	82 30       	cpi	r24, 0x02	; 2
     684:	51 f4       	brne	.+20     	; 0x69a <__mulsf3+0x60>
     686:	04 c0       	rjmp	.+8      	; 0x690 <__mulsf3+0x56>
     688:	84 30       	cpi	r24, 0x04	; 4
     68a:	29 f4       	brne	.+10     	; 0x696 <__mulsf3+0x5c>
     68c:	92 30       	cpi	r25, 0x02	; 2
     68e:	81 f4       	brne	.+32     	; 0x6b0 <__mulsf3+0x76>
     690:	8b ec       	ldi	r24, 0xCB	; 203
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	c6 c0       	rjmp	.+396    	; 0x822 <__mulsf3+0x1e8>
     696:	92 30       	cpi	r25, 0x02	; 2
     698:	49 f4       	brne	.+18     	; 0x6ac <__mulsf3+0x72>
     69a:	20 e0       	ldi	r18, 0x00	; 0
     69c:	9a 85       	ldd	r25, Y+10	; 0x0a
     69e:	8a 89       	ldd	r24, Y+18	; 0x12
     6a0:	98 13       	cpse	r25, r24
     6a2:	21 e0       	ldi	r18, 0x01	; 1
     6a4:	2a 87       	std	Y+10, r18	; 0x0a
     6a6:	ce 01       	movw	r24, r28
     6a8:	09 96       	adiw	r24, 0x09	; 9
     6aa:	bb c0       	rjmp	.+374    	; 0x822 <__mulsf3+0x1e8>
     6ac:	82 30       	cpi	r24, 0x02	; 2
     6ae:	49 f4       	brne	.+18     	; 0x6c2 <__mulsf3+0x88>
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     6b4:	8a 89       	ldd	r24, Y+18	; 0x12
     6b6:	98 13       	cpse	r25, r24
     6b8:	21 e0       	ldi	r18, 0x01	; 1
     6ba:	2a 8b       	std	Y+18, r18	; 0x12
     6bc:	ce 01       	movw	r24, r28
     6be:	41 96       	adiw	r24, 0x11	; 17
     6c0:	b0 c0       	rjmp	.+352    	; 0x822 <__mulsf3+0x1e8>
     6c2:	2d 84       	ldd	r2, Y+13	; 0x0d
     6c4:	3e 84       	ldd	r3, Y+14	; 0x0e
     6c6:	4f 84       	ldd	r4, Y+15	; 0x0f
     6c8:	58 88       	ldd	r5, Y+16	; 0x10
     6ca:	6d 88       	ldd	r6, Y+21	; 0x15
     6cc:	7e 88       	ldd	r7, Y+22	; 0x16
     6ce:	8f 88       	ldd	r8, Y+23	; 0x17
     6d0:	98 8c       	ldd	r9, Y+24	; 0x18
     6d2:	ee 24       	eor	r14, r14
     6d4:	ff 24       	eor	r15, r15
     6d6:	87 01       	movw	r16, r14
     6d8:	aa 24       	eor	r10, r10
     6da:	bb 24       	eor	r11, r11
     6dc:	65 01       	movw	r12, r10
     6de:	40 e0       	ldi	r20, 0x00	; 0
     6e0:	50 e0       	ldi	r21, 0x00	; 0
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	e0 e0       	ldi	r30, 0x00	; 0
     6e8:	f0 e0       	ldi	r31, 0x00	; 0
     6ea:	c1 01       	movw	r24, r2
     6ec:	81 70       	andi	r24, 0x01	; 1
     6ee:	90 70       	andi	r25, 0x00	; 0
     6f0:	89 2b       	or	r24, r25
     6f2:	e9 f0       	breq	.+58     	; 0x72e <__mulsf3+0xf4>
     6f4:	e6 0c       	add	r14, r6
     6f6:	f7 1c       	adc	r15, r7
     6f8:	08 1d       	adc	r16, r8
     6fa:	19 1d       	adc	r17, r9
     6fc:	9a 01       	movw	r18, r20
     6fe:	ab 01       	movw	r20, r22
     700:	2a 0d       	add	r18, r10
     702:	3b 1d       	adc	r19, r11
     704:	4c 1d       	adc	r20, r12
     706:	5d 1d       	adc	r21, r13
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	90 e0       	ldi	r25, 0x00	; 0
     70c:	a0 e0       	ldi	r26, 0x00	; 0
     70e:	b0 e0       	ldi	r27, 0x00	; 0
     710:	e6 14       	cp	r14, r6
     712:	f7 04       	cpc	r15, r7
     714:	08 05       	cpc	r16, r8
     716:	19 05       	cpc	r17, r9
     718:	20 f4       	brcc	.+8      	; 0x722 <__mulsf3+0xe8>
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	a0 e0       	ldi	r26, 0x00	; 0
     720:	b0 e0       	ldi	r27, 0x00	; 0
     722:	ba 01       	movw	r22, r20
     724:	a9 01       	movw	r20, r18
     726:	48 0f       	add	r20, r24
     728:	59 1f       	adc	r21, r25
     72a:	6a 1f       	adc	r22, r26
     72c:	7b 1f       	adc	r23, r27
     72e:	aa 0c       	add	r10, r10
     730:	bb 1c       	adc	r11, r11
     732:	cc 1c       	adc	r12, r12
     734:	dd 1c       	adc	r13, r13
     736:	97 fe       	sbrs	r9, 7
     738:	08 c0       	rjmp	.+16     	; 0x74a <__mulsf3+0x110>
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	a0 e0       	ldi	r26, 0x00	; 0
     740:	b0 e0       	ldi	r27, 0x00	; 0
     742:	a8 2a       	or	r10, r24
     744:	b9 2a       	or	r11, r25
     746:	ca 2a       	or	r12, r26
     748:	db 2a       	or	r13, r27
     74a:	31 96       	adiw	r30, 0x01	; 1
     74c:	e0 32       	cpi	r30, 0x20	; 32
     74e:	f1 05       	cpc	r31, r1
     750:	49 f0       	breq	.+18     	; 0x764 <__mulsf3+0x12a>
     752:	66 0c       	add	r6, r6
     754:	77 1c       	adc	r7, r7
     756:	88 1c       	adc	r8, r8
     758:	99 1c       	adc	r9, r9
     75a:	56 94       	lsr	r5
     75c:	47 94       	ror	r4
     75e:	37 94       	ror	r3
     760:	27 94       	ror	r2
     762:	c3 cf       	rjmp	.-122    	; 0x6ea <__mulsf3+0xb0>
     764:	fa 85       	ldd	r31, Y+10	; 0x0a
     766:	ea 89       	ldd	r30, Y+18	; 0x12
     768:	2b 89       	ldd	r18, Y+19	; 0x13
     76a:	3c 89       	ldd	r19, Y+20	; 0x14
     76c:	8b 85       	ldd	r24, Y+11	; 0x0b
     76e:	9c 85       	ldd	r25, Y+12	; 0x0c
     770:	28 0f       	add	r18, r24
     772:	39 1f       	adc	r19, r25
     774:	2e 5f       	subi	r18, 0xFE	; 254
     776:	3f 4f       	sbci	r19, 0xFF	; 255
     778:	17 c0       	rjmp	.+46     	; 0x7a8 <__mulsf3+0x16e>
     77a:	ca 01       	movw	r24, r20
     77c:	81 70       	andi	r24, 0x01	; 1
     77e:	90 70       	andi	r25, 0x00	; 0
     780:	89 2b       	or	r24, r25
     782:	61 f0       	breq	.+24     	; 0x79c <__mulsf3+0x162>
     784:	16 95       	lsr	r17
     786:	07 95       	ror	r16
     788:	f7 94       	ror	r15
     78a:	e7 94       	ror	r14
     78c:	80 e0       	ldi	r24, 0x00	; 0
     78e:	90 e0       	ldi	r25, 0x00	; 0
     790:	a0 e0       	ldi	r26, 0x00	; 0
     792:	b0 e8       	ldi	r27, 0x80	; 128
     794:	e8 2a       	or	r14, r24
     796:	f9 2a       	or	r15, r25
     798:	0a 2b       	or	r16, r26
     79a:	1b 2b       	or	r17, r27
     79c:	76 95       	lsr	r23
     79e:	67 95       	ror	r22
     7a0:	57 95       	ror	r21
     7a2:	47 95       	ror	r20
     7a4:	2f 5f       	subi	r18, 0xFF	; 255
     7a6:	3f 4f       	sbci	r19, 0xFF	; 255
     7a8:	77 fd       	sbrc	r23, 7
     7aa:	e7 cf       	rjmp	.-50     	; 0x77a <__mulsf3+0x140>
     7ac:	0c c0       	rjmp	.+24     	; 0x7c6 <__mulsf3+0x18c>
     7ae:	44 0f       	add	r20, r20
     7b0:	55 1f       	adc	r21, r21
     7b2:	66 1f       	adc	r22, r22
     7b4:	77 1f       	adc	r23, r23
     7b6:	17 fd       	sbrc	r17, 7
     7b8:	41 60       	ori	r20, 0x01	; 1
     7ba:	ee 0c       	add	r14, r14
     7bc:	ff 1c       	adc	r15, r15
     7be:	00 1f       	adc	r16, r16
     7c0:	11 1f       	adc	r17, r17
     7c2:	21 50       	subi	r18, 0x01	; 1
     7c4:	30 40       	sbci	r19, 0x00	; 0
     7c6:	40 30       	cpi	r20, 0x00	; 0
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	59 07       	cpc	r21, r25
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	69 07       	cpc	r22, r25
     7d0:	90 e4       	ldi	r25, 0x40	; 64
     7d2:	79 07       	cpc	r23, r25
     7d4:	60 f3       	brcs	.-40     	; 0x7ae <__mulsf3+0x174>
     7d6:	2b 8f       	std	Y+27, r18	; 0x1b
     7d8:	3c 8f       	std	Y+28, r19	; 0x1c
     7da:	db 01       	movw	r26, r22
     7dc:	ca 01       	movw	r24, r20
     7de:	8f 77       	andi	r24, 0x7F	; 127
     7e0:	90 70       	andi	r25, 0x00	; 0
     7e2:	a0 70       	andi	r26, 0x00	; 0
     7e4:	b0 70       	andi	r27, 0x00	; 0
     7e6:	80 34       	cpi	r24, 0x40	; 64
     7e8:	91 05       	cpc	r25, r1
     7ea:	a1 05       	cpc	r26, r1
     7ec:	b1 05       	cpc	r27, r1
     7ee:	61 f4       	brne	.+24     	; 0x808 <__mulsf3+0x1ce>
     7f0:	47 fd       	sbrc	r20, 7
     7f2:	0a c0       	rjmp	.+20     	; 0x808 <__mulsf3+0x1ce>
     7f4:	e1 14       	cp	r14, r1
     7f6:	f1 04       	cpc	r15, r1
     7f8:	01 05       	cpc	r16, r1
     7fa:	11 05       	cpc	r17, r1
     7fc:	29 f0       	breq	.+10     	; 0x808 <__mulsf3+0x1ce>
     7fe:	40 5c       	subi	r20, 0xC0	; 192
     800:	5f 4f       	sbci	r21, 0xFF	; 255
     802:	6f 4f       	sbci	r22, 0xFF	; 255
     804:	7f 4f       	sbci	r23, 0xFF	; 255
     806:	40 78       	andi	r20, 0x80	; 128
     808:	1a 8e       	std	Y+26, r1	; 0x1a
     80a:	fe 17       	cp	r31, r30
     80c:	11 f0       	breq	.+4      	; 0x812 <__mulsf3+0x1d8>
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	8a 8f       	std	Y+26, r24	; 0x1a
     812:	4d 8f       	std	Y+29, r20	; 0x1d
     814:	5e 8f       	std	Y+30, r21	; 0x1e
     816:	6f 8f       	std	Y+31, r22	; 0x1f
     818:	78 a3       	std	Y+32, r23	; 0x20
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 8f       	std	Y+25, r24	; 0x19
     81e:	ce 01       	movw	r24, r28
     820:	49 96       	adiw	r24, 0x19	; 25
     822:	0e 94 5d 07 	call	0xeba	; 0xeba <__pack_f>
     826:	a0 96       	adiw	r28, 0x20	; 32
     828:	e2 e1       	ldi	r30, 0x12	; 18
     82a:	0c 94 df 3c 	jmp	0x79be	; 0x79be <__epilogue_restores__>

0000082e <__divsf3>:
     82e:	a8 e1       	ldi	r26, 0x18	; 24
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	ed e1       	ldi	r30, 0x1D	; 29
     834:	f4 e0       	ldi	r31, 0x04	; 4
     836:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__prologue_saves__+0x10>
     83a:	69 83       	std	Y+1, r22	; 0x01
     83c:	7a 83       	std	Y+2, r23	; 0x02
     83e:	8b 83       	std	Y+3, r24	; 0x03
     840:	9c 83       	std	Y+4, r25	; 0x04
     842:	2d 83       	std	Y+5, r18	; 0x05
     844:	3e 83       	std	Y+6, r19	; 0x06
     846:	4f 83       	std	Y+7, r20	; 0x07
     848:	58 87       	std	Y+8, r21	; 0x08
     84a:	b9 e0       	ldi	r27, 0x09	; 9
     84c:	eb 2e       	mov	r14, r27
     84e:	f1 2c       	mov	r15, r1
     850:	ec 0e       	add	r14, r28
     852:	fd 1e       	adc	r15, r29
     854:	ce 01       	movw	r24, r28
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	b7 01       	movw	r22, r14
     85a:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     85e:	8e 01       	movw	r16, r28
     860:	0f 5e       	subi	r16, 0xEF	; 239
     862:	1f 4f       	sbci	r17, 0xFF	; 255
     864:	ce 01       	movw	r24, r28
     866:	05 96       	adiw	r24, 0x05	; 5
     868:	b8 01       	movw	r22, r16
     86a:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     86e:	29 85       	ldd	r18, Y+9	; 0x09
     870:	22 30       	cpi	r18, 0x02	; 2
     872:	08 f4       	brcc	.+2      	; 0x876 <__stack+0x17>
     874:	7e c0       	rjmp	.+252    	; 0x972 <__stack+0x113>
     876:	39 89       	ldd	r19, Y+17	; 0x11
     878:	32 30       	cpi	r19, 0x02	; 2
     87a:	10 f4       	brcc	.+4      	; 0x880 <__stack+0x21>
     87c:	b8 01       	movw	r22, r16
     87e:	7c c0       	rjmp	.+248    	; 0x978 <__stack+0x119>
     880:	8a 85       	ldd	r24, Y+10	; 0x0a
     882:	9a 89       	ldd	r25, Y+18	; 0x12
     884:	89 27       	eor	r24, r25
     886:	8a 87       	std	Y+10, r24	; 0x0a
     888:	24 30       	cpi	r18, 0x04	; 4
     88a:	11 f0       	breq	.+4      	; 0x890 <__stack+0x31>
     88c:	22 30       	cpi	r18, 0x02	; 2
     88e:	31 f4       	brne	.+12     	; 0x89c <__stack+0x3d>
     890:	23 17       	cp	r18, r19
     892:	09 f0       	breq	.+2      	; 0x896 <__stack+0x37>
     894:	6e c0       	rjmp	.+220    	; 0x972 <__stack+0x113>
     896:	6b ec       	ldi	r22, 0xCB	; 203
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	6e c0       	rjmp	.+220    	; 0x978 <__stack+0x119>
     89c:	34 30       	cpi	r19, 0x04	; 4
     89e:	39 f4       	brne	.+14     	; 0x8ae <__stack+0x4f>
     8a0:	1d 86       	std	Y+13, r1	; 0x0d
     8a2:	1e 86       	std	Y+14, r1	; 0x0e
     8a4:	1f 86       	std	Y+15, r1	; 0x0f
     8a6:	18 8a       	std	Y+16, r1	; 0x10
     8a8:	1c 86       	std	Y+12, r1	; 0x0c
     8aa:	1b 86       	std	Y+11, r1	; 0x0b
     8ac:	04 c0       	rjmp	.+8      	; 0x8b6 <__stack+0x57>
     8ae:	32 30       	cpi	r19, 0x02	; 2
     8b0:	21 f4       	brne	.+8      	; 0x8ba <__stack+0x5b>
     8b2:	84 e0       	ldi	r24, 0x04	; 4
     8b4:	89 87       	std	Y+9, r24	; 0x09
     8b6:	b7 01       	movw	r22, r14
     8b8:	5f c0       	rjmp	.+190    	; 0x978 <__stack+0x119>
     8ba:	2b 85       	ldd	r18, Y+11	; 0x0b
     8bc:	3c 85       	ldd	r19, Y+12	; 0x0c
     8be:	8b 89       	ldd	r24, Y+19	; 0x13
     8c0:	9c 89       	ldd	r25, Y+20	; 0x14
     8c2:	28 1b       	sub	r18, r24
     8c4:	39 0b       	sbc	r19, r25
     8c6:	3c 87       	std	Y+12, r19	; 0x0c
     8c8:	2b 87       	std	Y+11, r18	; 0x0b
     8ca:	ed 84       	ldd	r14, Y+13	; 0x0d
     8cc:	fe 84       	ldd	r15, Y+14	; 0x0e
     8ce:	0f 85       	ldd	r16, Y+15	; 0x0f
     8d0:	18 89       	ldd	r17, Y+16	; 0x10
     8d2:	ad 88       	ldd	r10, Y+21	; 0x15
     8d4:	be 88       	ldd	r11, Y+22	; 0x16
     8d6:	cf 88       	ldd	r12, Y+23	; 0x17
     8d8:	d8 8c       	ldd	r13, Y+24	; 0x18
     8da:	ea 14       	cp	r14, r10
     8dc:	fb 04       	cpc	r15, r11
     8de:	0c 05       	cpc	r16, r12
     8e0:	1d 05       	cpc	r17, r13
     8e2:	40 f4       	brcc	.+16     	; 0x8f4 <__stack+0x95>
     8e4:	ee 0c       	add	r14, r14
     8e6:	ff 1c       	adc	r15, r15
     8e8:	00 1f       	adc	r16, r16
     8ea:	11 1f       	adc	r17, r17
     8ec:	21 50       	subi	r18, 0x01	; 1
     8ee:	30 40       	sbci	r19, 0x00	; 0
     8f0:	3c 87       	std	Y+12, r19	; 0x0c
     8f2:	2b 87       	std	Y+11, r18	; 0x0b
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 e0       	ldi	r20, 0x00	; 0
     8fa:	50 e0       	ldi	r21, 0x00	; 0
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	a0 e0       	ldi	r26, 0x00	; 0
     902:	b0 e4       	ldi	r27, 0x40	; 64
     904:	60 e0       	ldi	r22, 0x00	; 0
     906:	70 e0       	ldi	r23, 0x00	; 0
     908:	ea 14       	cp	r14, r10
     90a:	fb 04       	cpc	r15, r11
     90c:	0c 05       	cpc	r16, r12
     90e:	1d 05       	cpc	r17, r13
     910:	40 f0       	brcs	.+16     	; 0x922 <__stack+0xc3>
     912:	28 2b       	or	r18, r24
     914:	39 2b       	or	r19, r25
     916:	4a 2b       	or	r20, r26
     918:	5b 2b       	or	r21, r27
     91a:	ea 18       	sub	r14, r10
     91c:	fb 08       	sbc	r15, r11
     91e:	0c 09       	sbc	r16, r12
     920:	1d 09       	sbc	r17, r13
     922:	b6 95       	lsr	r27
     924:	a7 95       	ror	r26
     926:	97 95       	ror	r25
     928:	87 95       	ror	r24
     92a:	ee 0c       	add	r14, r14
     92c:	ff 1c       	adc	r15, r15
     92e:	00 1f       	adc	r16, r16
     930:	11 1f       	adc	r17, r17
     932:	6f 5f       	subi	r22, 0xFF	; 255
     934:	7f 4f       	sbci	r23, 0xFF	; 255
     936:	6f 31       	cpi	r22, 0x1F	; 31
     938:	71 05       	cpc	r23, r1
     93a:	31 f7       	brne	.-52     	; 0x908 <__stack+0xa9>
     93c:	da 01       	movw	r26, r20
     93e:	c9 01       	movw	r24, r18
     940:	8f 77       	andi	r24, 0x7F	; 127
     942:	90 70       	andi	r25, 0x00	; 0
     944:	a0 70       	andi	r26, 0x00	; 0
     946:	b0 70       	andi	r27, 0x00	; 0
     948:	80 34       	cpi	r24, 0x40	; 64
     94a:	91 05       	cpc	r25, r1
     94c:	a1 05       	cpc	r26, r1
     94e:	b1 05       	cpc	r27, r1
     950:	61 f4       	brne	.+24     	; 0x96a <__stack+0x10b>
     952:	27 fd       	sbrc	r18, 7
     954:	0a c0       	rjmp	.+20     	; 0x96a <__stack+0x10b>
     956:	e1 14       	cp	r14, r1
     958:	f1 04       	cpc	r15, r1
     95a:	01 05       	cpc	r16, r1
     95c:	11 05       	cpc	r17, r1
     95e:	29 f0       	breq	.+10     	; 0x96a <__stack+0x10b>
     960:	20 5c       	subi	r18, 0xC0	; 192
     962:	3f 4f       	sbci	r19, 0xFF	; 255
     964:	4f 4f       	sbci	r20, 0xFF	; 255
     966:	5f 4f       	sbci	r21, 0xFF	; 255
     968:	20 78       	andi	r18, 0x80	; 128
     96a:	2d 87       	std	Y+13, r18	; 0x0d
     96c:	3e 87       	std	Y+14, r19	; 0x0e
     96e:	4f 87       	std	Y+15, r20	; 0x0f
     970:	58 8b       	std	Y+16, r21	; 0x10
     972:	be 01       	movw	r22, r28
     974:	67 5f       	subi	r22, 0xF7	; 247
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	cb 01       	movw	r24, r22
     97a:	0e 94 5d 07 	call	0xeba	; 0xeba <__pack_f>
     97e:	68 96       	adiw	r28, 0x18	; 24
     980:	ea e0       	ldi	r30, 0x0A	; 10
     982:	0c 94 e7 3c 	jmp	0x79ce	; 0x79ce <__epilogue_restores__+0x10>

00000986 <__eqsf2>:
     986:	a8 e1       	ldi	r26, 0x18	; 24
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	e9 ec       	ldi	r30, 0xC9	; 201
     98c:	f4 e0       	ldi	r31, 0x04	; 4
     98e:	0c 94 cf 3c 	jmp	0x799e	; 0x799e <__prologue_saves__+0x18>
     992:	69 83       	std	Y+1, r22	; 0x01
     994:	7a 83       	std	Y+2, r23	; 0x02
     996:	8b 83       	std	Y+3, r24	; 0x03
     998:	9c 83       	std	Y+4, r25	; 0x04
     99a:	2d 83       	std	Y+5, r18	; 0x05
     99c:	3e 83       	std	Y+6, r19	; 0x06
     99e:	4f 83       	std	Y+7, r20	; 0x07
     9a0:	58 87       	std	Y+8, r21	; 0x08
     9a2:	89 e0       	ldi	r24, 0x09	; 9
     9a4:	e8 2e       	mov	r14, r24
     9a6:	f1 2c       	mov	r15, r1
     9a8:	ec 0e       	add	r14, r28
     9aa:	fd 1e       	adc	r15, r29
     9ac:	ce 01       	movw	r24, r28
     9ae:	01 96       	adiw	r24, 0x01	; 1
     9b0:	b7 01       	movw	r22, r14
     9b2:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     9b6:	8e 01       	movw	r16, r28
     9b8:	0f 5e       	subi	r16, 0xEF	; 239
     9ba:	1f 4f       	sbci	r17, 0xFF	; 255
     9bc:	ce 01       	movw	r24, r28
     9be:	05 96       	adiw	r24, 0x05	; 5
     9c0:	b8 01       	movw	r22, r16
     9c2:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     9c6:	89 85       	ldd	r24, Y+9	; 0x09
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	40 f0       	brcs	.+16     	; 0x9dc <__eqsf2+0x56>
     9cc:	89 89       	ldd	r24, Y+17	; 0x11
     9ce:	82 30       	cpi	r24, 0x02	; 2
     9d0:	28 f0       	brcs	.+10     	; 0x9dc <__eqsf2+0x56>
     9d2:	c7 01       	movw	r24, r14
     9d4:	b8 01       	movw	r22, r16
     9d6:	0e 94 aa 08 	call	0x1154	; 0x1154 <__fpcmp_parts_f>
     9da:	01 c0       	rjmp	.+2      	; 0x9de <__eqsf2+0x58>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	68 96       	adiw	r28, 0x18	; 24
     9e0:	e6 e0       	ldi	r30, 0x06	; 6
     9e2:	0c 94 eb 3c 	jmp	0x79d6	; 0x79d6 <__epilogue_restores__+0x18>

000009e6 <__nesf2>:
     9e6:	a8 e1       	ldi	r26, 0x18	; 24
     9e8:	b0 e0       	ldi	r27, 0x00	; 0
     9ea:	e9 ef       	ldi	r30, 0xF9	; 249
     9ec:	f4 e0       	ldi	r31, 0x04	; 4
     9ee:	0c 94 cf 3c 	jmp	0x799e	; 0x799e <__prologue_saves__+0x18>
     9f2:	69 83       	std	Y+1, r22	; 0x01
     9f4:	7a 83       	std	Y+2, r23	; 0x02
     9f6:	8b 83       	std	Y+3, r24	; 0x03
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	2d 83       	std	Y+5, r18	; 0x05
     9fc:	3e 83       	std	Y+6, r19	; 0x06
     9fe:	4f 83       	std	Y+7, r20	; 0x07
     a00:	58 87       	std	Y+8, r21	; 0x08
     a02:	89 e0       	ldi	r24, 0x09	; 9
     a04:	e8 2e       	mov	r14, r24
     a06:	f1 2c       	mov	r15, r1
     a08:	ec 0e       	add	r14, r28
     a0a:	fd 1e       	adc	r15, r29
     a0c:	ce 01       	movw	r24, r28
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	b7 01       	movw	r22, r14
     a12:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     a16:	8e 01       	movw	r16, r28
     a18:	0f 5e       	subi	r16, 0xEF	; 239
     a1a:	1f 4f       	sbci	r17, 0xFF	; 255
     a1c:	ce 01       	movw	r24, r28
     a1e:	05 96       	adiw	r24, 0x05	; 5
     a20:	b8 01       	movw	r22, r16
     a22:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     a26:	89 85       	ldd	r24, Y+9	; 0x09
     a28:	82 30       	cpi	r24, 0x02	; 2
     a2a:	40 f0       	brcs	.+16     	; 0xa3c <__nesf2+0x56>
     a2c:	89 89       	ldd	r24, Y+17	; 0x11
     a2e:	82 30       	cpi	r24, 0x02	; 2
     a30:	28 f0       	brcs	.+10     	; 0xa3c <__nesf2+0x56>
     a32:	c7 01       	movw	r24, r14
     a34:	b8 01       	movw	r22, r16
     a36:	0e 94 aa 08 	call	0x1154	; 0x1154 <__fpcmp_parts_f>
     a3a:	01 c0       	rjmp	.+2      	; 0xa3e <__nesf2+0x58>
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	68 96       	adiw	r28, 0x18	; 24
     a40:	e6 e0       	ldi	r30, 0x06	; 6
     a42:	0c 94 eb 3c 	jmp	0x79d6	; 0x79d6 <__epilogue_restores__+0x18>

00000a46 <__gtsf2>:
     a46:	a8 e1       	ldi	r26, 0x18	; 24
     a48:	b0 e0       	ldi	r27, 0x00	; 0
     a4a:	e9 e2       	ldi	r30, 0x29	; 41
     a4c:	f5 e0       	ldi	r31, 0x05	; 5
     a4e:	0c 94 cf 3c 	jmp	0x799e	; 0x799e <__prologue_saves__+0x18>
     a52:	69 83       	std	Y+1, r22	; 0x01
     a54:	7a 83       	std	Y+2, r23	; 0x02
     a56:	8b 83       	std	Y+3, r24	; 0x03
     a58:	9c 83       	std	Y+4, r25	; 0x04
     a5a:	2d 83       	std	Y+5, r18	; 0x05
     a5c:	3e 83       	std	Y+6, r19	; 0x06
     a5e:	4f 83       	std	Y+7, r20	; 0x07
     a60:	58 87       	std	Y+8, r21	; 0x08
     a62:	89 e0       	ldi	r24, 0x09	; 9
     a64:	e8 2e       	mov	r14, r24
     a66:	f1 2c       	mov	r15, r1
     a68:	ec 0e       	add	r14, r28
     a6a:	fd 1e       	adc	r15, r29
     a6c:	ce 01       	movw	r24, r28
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	b7 01       	movw	r22, r14
     a72:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     a76:	8e 01       	movw	r16, r28
     a78:	0f 5e       	subi	r16, 0xEF	; 239
     a7a:	1f 4f       	sbci	r17, 0xFF	; 255
     a7c:	ce 01       	movw	r24, r28
     a7e:	05 96       	adiw	r24, 0x05	; 5
     a80:	b8 01       	movw	r22, r16
     a82:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     a86:	89 85       	ldd	r24, Y+9	; 0x09
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	40 f0       	brcs	.+16     	; 0xa9c <__gtsf2+0x56>
     a8c:	89 89       	ldd	r24, Y+17	; 0x11
     a8e:	82 30       	cpi	r24, 0x02	; 2
     a90:	28 f0       	brcs	.+10     	; 0xa9c <__gtsf2+0x56>
     a92:	c7 01       	movw	r24, r14
     a94:	b8 01       	movw	r22, r16
     a96:	0e 94 aa 08 	call	0x1154	; 0x1154 <__fpcmp_parts_f>
     a9a:	01 c0       	rjmp	.+2      	; 0xa9e <__gtsf2+0x58>
     a9c:	8f ef       	ldi	r24, 0xFF	; 255
     a9e:	68 96       	adiw	r28, 0x18	; 24
     aa0:	e6 e0       	ldi	r30, 0x06	; 6
     aa2:	0c 94 eb 3c 	jmp	0x79d6	; 0x79d6 <__epilogue_restores__+0x18>

00000aa6 <__gesf2>:
     aa6:	a8 e1       	ldi	r26, 0x18	; 24
     aa8:	b0 e0       	ldi	r27, 0x00	; 0
     aaa:	e9 e5       	ldi	r30, 0x59	; 89
     aac:	f5 e0       	ldi	r31, 0x05	; 5
     aae:	0c 94 cf 3c 	jmp	0x799e	; 0x799e <__prologue_saves__+0x18>
     ab2:	69 83       	std	Y+1, r22	; 0x01
     ab4:	7a 83       	std	Y+2, r23	; 0x02
     ab6:	8b 83       	std	Y+3, r24	; 0x03
     ab8:	9c 83       	std	Y+4, r25	; 0x04
     aba:	2d 83       	std	Y+5, r18	; 0x05
     abc:	3e 83       	std	Y+6, r19	; 0x06
     abe:	4f 83       	std	Y+7, r20	; 0x07
     ac0:	58 87       	std	Y+8, r21	; 0x08
     ac2:	89 e0       	ldi	r24, 0x09	; 9
     ac4:	e8 2e       	mov	r14, r24
     ac6:	f1 2c       	mov	r15, r1
     ac8:	ec 0e       	add	r14, r28
     aca:	fd 1e       	adc	r15, r29
     acc:	ce 01       	movw	r24, r28
     ace:	01 96       	adiw	r24, 0x01	; 1
     ad0:	b7 01       	movw	r22, r14
     ad2:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     ad6:	8e 01       	movw	r16, r28
     ad8:	0f 5e       	subi	r16, 0xEF	; 239
     ada:	1f 4f       	sbci	r17, 0xFF	; 255
     adc:	ce 01       	movw	r24, r28
     ade:	05 96       	adiw	r24, 0x05	; 5
     ae0:	b8 01       	movw	r22, r16
     ae2:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     ae6:	89 85       	ldd	r24, Y+9	; 0x09
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	40 f0       	brcs	.+16     	; 0xafc <__gesf2+0x56>
     aec:	89 89       	ldd	r24, Y+17	; 0x11
     aee:	82 30       	cpi	r24, 0x02	; 2
     af0:	28 f0       	brcs	.+10     	; 0xafc <__gesf2+0x56>
     af2:	c7 01       	movw	r24, r14
     af4:	b8 01       	movw	r22, r16
     af6:	0e 94 aa 08 	call	0x1154	; 0x1154 <__fpcmp_parts_f>
     afa:	01 c0       	rjmp	.+2      	; 0xafe <__gesf2+0x58>
     afc:	8f ef       	ldi	r24, 0xFF	; 255
     afe:	68 96       	adiw	r28, 0x18	; 24
     b00:	e6 e0       	ldi	r30, 0x06	; 6
     b02:	0c 94 eb 3c 	jmp	0x79d6	; 0x79d6 <__epilogue_restores__+0x18>

00000b06 <__ltsf2>:
     b06:	a8 e1       	ldi	r26, 0x18	; 24
     b08:	b0 e0       	ldi	r27, 0x00	; 0
     b0a:	e9 e8       	ldi	r30, 0x89	; 137
     b0c:	f5 e0       	ldi	r31, 0x05	; 5
     b0e:	0c 94 cf 3c 	jmp	0x799e	; 0x799e <__prologue_saves__+0x18>
     b12:	69 83       	std	Y+1, r22	; 0x01
     b14:	7a 83       	std	Y+2, r23	; 0x02
     b16:	8b 83       	std	Y+3, r24	; 0x03
     b18:	9c 83       	std	Y+4, r25	; 0x04
     b1a:	2d 83       	std	Y+5, r18	; 0x05
     b1c:	3e 83       	std	Y+6, r19	; 0x06
     b1e:	4f 83       	std	Y+7, r20	; 0x07
     b20:	58 87       	std	Y+8, r21	; 0x08
     b22:	89 e0       	ldi	r24, 0x09	; 9
     b24:	e8 2e       	mov	r14, r24
     b26:	f1 2c       	mov	r15, r1
     b28:	ec 0e       	add	r14, r28
     b2a:	fd 1e       	adc	r15, r29
     b2c:	ce 01       	movw	r24, r28
     b2e:	01 96       	adiw	r24, 0x01	; 1
     b30:	b7 01       	movw	r22, r14
     b32:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     b36:	8e 01       	movw	r16, r28
     b38:	0f 5e       	subi	r16, 0xEF	; 239
     b3a:	1f 4f       	sbci	r17, 0xFF	; 255
     b3c:	ce 01       	movw	r24, r28
     b3e:	05 96       	adiw	r24, 0x05	; 5
     b40:	b8 01       	movw	r22, r16
     b42:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     b46:	89 85       	ldd	r24, Y+9	; 0x09
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	40 f0       	brcs	.+16     	; 0xb5c <__ltsf2+0x56>
     b4c:	89 89       	ldd	r24, Y+17	; 0x11
     b4e:	82 30       	cpi	r24, 0x02	; 2
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__ltsf2+0x56>
     b52:	c7 01       	movw	r24, r14
     b54:	b8 01       	movw	r22, r16
     b56:	0e 94 aa 08 	call	0x1154	; 0x1154 <__fpcmp_parts_f>
     b5a:	01 c0       	rjmp	.+2      	; 0xb5e <__ltsf2+0x58>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	68 96       	adiw	r28, 0x18	; 24
     b60:	e6 e0       	ldi	r30, 0x06	; 6
     b62:	0c 94 eb 3c 	jmp	0x79d6	; 0x79d6 <__epilogue_restores__+0x18>

00000b66 <__lesf2>:
     b66:	a8 e1       	ldi	r26, 0x18	; 24
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e9 eb       	ldi	r30, 0xB9	; 185
     b6c:	f5 e0       	ldi	r31, 0x05	; 5
     b6e:	0c 94 cf 3c 	jmp	0x799e	; 0x799e <__prologue_saves__+0x18>
     b72:	69 83       	std	Y+1, r22	; 0x01
     b74:	7a 83       	std	Y+2, r23	; 0x02
     b76:	8b 83       	std	Y+3, r24	; 0x03
     b78:	9c 83       	std	Y+4, r25	; 0x04
     b7a:	2d 83       	std	Y+5, r18	; 0x05
     b7c:	3e 83       	std	Y+6, r19	; 0x06
     b7e:	4f 83       	std	Y+7, r20	; 0x07
     b80:	58 87       	std	Y+8, r21	; 0x08
     b82:	89 e0       	ldi	r24, 0x09	; 9
     b84:	e8 2e       	mov	r14, r24
     b86:	f1 2c       	mov	r15, r1
     b88:	ec 0e       	add	r14, r28
     b8a:	fd 1e       	adc	r15, r29
     b8c:	ce 01       	movw	r24, r28
     b8e:	01 96       	adiw	r24, 0x01	; 1
     b90:	b7 01       	movw	r22, r14
     b92:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     b96:	8e 01       	movw	r16, r28
     b98:	0f 5e       	subi	r16, 0xEF	; 239
     b9a:	1f 4f       	sbci	r17, 0xFF	; 255
     b9c:	ce 01       	movw	r24, r28
     b9e:	05 96       	adiw	r24, 0x05	; 5
     ba0:	b8 01       	movw	r22, r16
     ba2:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     ba6:	89 85       	ldd	r24, Y+9	; 0x09
     ba8:	82 30       	cpi	r24, 0x02	; 2
     baa:	40 f0       	brcs	.+16     	; 0xbbc <__lesf2+0x56>
     bac:	89 89       	ldd	r24, Y+17	; 0x11
     bae:	82 30       	cpi	r24, 0x02	; 2
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__lesf2+0x56>
     bb2:	c7 01       	movw	r24, r14
     bb4:	b8 01       	movw	r22, r16
     bb6:	0e 94 aa 08 	call	0x1154	; 0x1154 <__fpcmp_parts_f>
     bba:	01 c0       	rjmp	.+2      	; 0xbbe <__lesf2+0x58>
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	68 96       	adiw	r28, 0x18	; 24
     bc0:	e6 e0       	ldi	r30, 0x06	; 6
     bc2:	0c 94 eb 3c 	jmp	0x79d6	; 0x79d6 <__epilogue_restores__+0x18>

00000bc6 <__floatsisf>:
     bc6:	a8 e0       	ldi	r26, 0x08	; 8
     bc8:	b0 e0       	ldi	r27, 0x00	; 0
     bca:	e9 ee       	ldi	r30, 0xE9	; 233
     bcc:	f5 e0       	ldi	r31, 0x05	; 5
     bce:	0c 94 cc 3c 	jmp	0x7998	; 0x7998 <__prologue_saves__+0x12>
     bd2:	9b 01       	movw	r18, r22
     bd4:	ac 01       	movw	r20, r24
     bd6:	83 e0       	ldi	r24, 0x03	; 3
     bd8:	89 83       	std	Y+1, r24	; 0x01
     bda:	da 01       	movw	r26, r20
     bdc:	c9 01       	movw	r24, r18
     bde:	88 27       	eor	r24, r24
     be0:	b7 fd       	sbrc	r27, 7
     be2:	83 95       	inc	r24
     be4:	99 27       	eor	r25, r25
     be6:	aa 27       	eor	r26, r26
     be8:	bb 27       	eor	r27, r27
     bea:	b8 2e       	mov	r11, r24
     bec:	21 15       	cp	r18, r1
     bee:	31 05       	cpc	r19, r1
     bf0:	41 05       	cpc	r20, r1
     bf2:	51 05       	cpc	r21, r1
     bf4:	19 f4       	brne	.+6      	; 0xbfc <__floatsisf+0x36>
     bf6:	82 e0       	ldi	r24, 0x02	; 2
     bf8:	89 83       	std	Y+1, r24	; 0x01
     bfa:	3a c0       	rjmp	.+116    	; 0xc70 <__floatsisf+0xaa>
     bfc:	88 23       	and	r24, r24
     bfe:	a9 f0       	breq	.+42     	; 0xc2a <__floatsisf+0x64>
     c00:	20 30       	cpi	r18, 0x00	; 0
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	38 07       	cpc	r19, r24
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	48 07       	cpc	r20, r24
     c0a:	80 e8       	ldi	r24, 0x80	; 128
     c0c:	58 07       	cpc	r21, r24
     c0e:	29 f4       	brne	.+10     	; 0xc1a <__floatsisf+0x54>
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	80 e0       	ldi	r24, 0x00	; 0
     c16:	9f ec       	ldi	r25, 0xCF	; 207
     c18:	30 c0       	rjmp	.+96     	; 0xc7a <__floatsisf+0xb4>
     c1a:	ee 24       	eor	r14, r14
     c1c:	ff 24       	eor	r15, r15
     c1e:	87 01       	movw	r16, r14
     c20:	e2 1a       	sub	r14, r18
     c22:	f3 0a       	sbc	r15, r19
     c24:	04 0b       	sbc	r16, r20
     c26:	15 0b       	sbc	r17, r21
     c28:	02 c0       	rjmp	.+4      	; 0xc2e <__floatsisf+0x68>
     c2a:	79 01       	movw	r14, r18
     c2c:	8a 01       	movw	r16, r20
     c2e:	8e e1       	ldi	r24, 0x1E	; 30
     c30:	c8 2e       	mov	r12, r24
     c32:	d1 2c       	mov	r13, r1
     c34:	dc 82       	std	Y+4, r13	; 0x04
     c36:	cb 82       	std	Y+3, r12	; 0x03
     c38:	ed 82       	std	Y+5, r14	; 0x05
     c3a:	fe 82       	std	Y+6, r15	; 0x06
     c3c:	0f 83       	std	Y+7, r16	; 0x07
     c3e:	18 87       	std	Y+8, r17	; 0x08
     c40:	c8 01       	movw	r24, r16
     c42:	b7 01       	movw	r22, r14
     c44:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__clzsi2>
     c48:	01 97       	sbiw	r24, 0x01	; 1
     c4a:	18 16       	cp	r1, r24
     c4c:	19 06       	cpc	r1, r25
     c4e:	84 f4       	brge	.+32     	; 0xc70 <__floatsisf+0xaa>
     c50:	08 2e       	mov	r0, r24
     c52:	04 c0       	rjmp	.+8      	; 0xc5c <__floatsisf+0x96>
     c54:	ee 0c       	add	r14, r14
     c56:	ff 1c       	adc	r15, r15
     c58:	00 1f       	adc	r16, r16
     c5a:	11 1f       	adc	r17, r17
     c5c:	0a 94       	dec	r0
     c5e:	d2 f7       	brpl	.-12     	; 0xc54 <__floatsisf+0x8e>
     c60:	ed 82       	std	Y+5, r14	; 0x05
     c62:	fe 82       	std	Y+6, r15	; 0x06
     c64:	0f 83       	std	Y+7, r16	; 0x07
     c66:	18 87       	std	Y+8, r17	; 0x08
     c68:	c8 1a       	sub	r12, r24
     c6a:	d9 0a       	sbc	r13, r25
     c6c:	dc 82       	std	Y+4, r13	; 0x04
     c6e:	cb 82       	std	Y+3, r12	; 0x03
     c70:	ba 82       	std	Y+2, r11	; 0x02
     c72:	ce 01       	movw	r24, r28
     c74:	01 96       	adiw	r24, 0x01	; 1
     c76:	0e 94 5d 07 	call	0xeba	; 0xeba <__pack_f>
     c7a:	28 96       	adiw	r28, 0x08	; 8
     c7c:	e9 e0       	ldi	r30, 0x09	; 9
     c7e:	0c 94 e8 3c 	jmp	0x79d0	; 0x79d0 <__epilogue_restores__+0x12>

00000c82 <__fixsfsi>:
     c82:	ac e0       	ldi	r26, 0x0C	; 12
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	e7 e4       	ldi	r30, 0x47	; 71
     c88:	f6 e0       	ldi	r31, 0x06	; 6
     c8a:	0c 94 d3 3c 	jmp	0x79a6	; 0x79a6 <__prologue_saves__+0x20>
     c8e:	69 83       	std	Y+1, r22	; 0x01
     c90:	7a 83       	std	Y+2, r23	; 0x02
     c92:	8b 83       	std	Y+3, r24	; 0x03
     c94:	9c 83       	std	Y+4, r25	; 0x04
     c96:	ce 01       	movw	r24, r28
     c98:	01 96       	adiw	r24, 0x01	; 1
     c9a:	be 01       	movw	r22, r28
     c9c:	6b 5f       	subi	r22, 0xFB	; 251
     c9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ca0:	0e 94 32 08 	call	0x1064	; 0x1064 <__unpack_f>
     ca4:	8d 81       	ldd	r24, Y+5	; 0x05
     ca6:	82 30       	cpi	r24, 0x02	; 2
     ca8:	61 f1       	breq	.+88     	; 0xd02 <__fixsfsi+0x80>
     caa:	82 30       	cpi	r24, 0x02	; 2
     cac:	50 f1       	brcs	.+84     	; 0xd02 <__fixsfsi+0x80>
     cae:	84 30       	cpi	r24, 0x04	; 4
     cb0:	21 f4       	brne	.+8      	; 0xcba <__fixsfsi+0x38>
     cb2:	8e 81       	ldd	r24, Y+6	; 0x06
     cb4:	88 23       	and	r24, r24
     cb6:	51 f1       	breq	.+84     	; 0xd0c <__fixsfsi+0x8a>
     cb8:	2e c0       	rjmp	.+92     	; 0xd16 <__fixsfsi+0x94>
     cba:	2f 81       	ldd	r18, Y+7	; 0x07
     cbc:	38 85       	ldd	r19, Y+8	; 0x08
     cbe:	37 fd       	sbrc	r19, 7
     cc0:	20 c0       	rjmp	.+64     	; 0xd02 <__fixsfsi+0x80>
     cc2:	6e 81       	ldd	r22, Y+6	; 0x06
     cc4:	2f 31       	cpi	r18, 0x1F	; 31
     cc6:	31 05       	cpc	r19, r1
     cc8:	1c f0       	brlt	.+6      	; 0xcd0 <__fixsfsi+0x4e>
     cca:	66 23       	and	r22, r22
     ccc:	f9 f0       	breq	.+62     	; 0xd0c <__fixsfsi+0x8a>
     cce:	23 c0       	rjmp	.+70     	; 0xd16 <__fixsfsi+0x94>
     cd0:	8e e1       	ldi	r24, 0x1E	; 30
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	82 1b       	sub	r24, r18
     cd6:	93 0b       	sbc	r25, r19
     cd8:	29 85       	ldd	r18, Y+9	; 0x09
     cda:	3a 85       	ldd	r19, Y+10	; 0x0a
     cdc:	4b 85       	ldd	r20, Y+11	; 0x0b
     cde:	5c 85       	ldd	r21, Y+12	; 0x0c
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__fixsfsi+0x68>
     ce2:	56 95       	lsr	r21
     ce4:	47 95       	ror	r20
     ce6:	37 95       	ror	r19
     ce8:	27 95       	ror	r18
     cea:	8a 95       	dec	r24
     cec:	d2 f7       	brpl	.-12     	; 0xce2 <__fixsfsi+0x60>
     cee:	66 23       	and	r22, r22
     cf0:	b1 f0       	breq	.+44     	; 0xd1e <__fixsfsi+0x9c>
     cf2:	50 95       	com	r21
     cf4:	40 95       	com	r20
     cf6:	30 95       	com	r19
     cf8:	21 95       	neg	r18
     cfa:	3f 4f       	sbci	r19, 0xFF	; 255
     cfc:	4f 4f       	sbci	r20, 0xFF	; 255
     cfe:	5f 4f       	sbci	r21, 0xFF	; 255
     d00:	0e c0       	rjmp	.+28     	; 0xd1e <__fixsfsi+0x9c>
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	50 e0       	ldi	r21, 0x00	; 0
     d0a:	09 c0       	rjmp	.+18     	; 0xd1e <__fixsfsi+0x9c>
     d0c:	2f ef       	ldi	r18, 0xFF	; 255
     d0e:	3f ef       	ldi	r19, 0xFF	; 255
     d10:	4f ef       	ldi	r20, 0xFF	; 255
     d12:	5f e7       	ldi	r21, 0x7F	; 127
     d14:	04 c0       	rjmp	.+8      	; 0xd1e <__fixsfsi+0x9c>
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e0       	ldi	r20, 0x00	; 0
     d1c:	50 e8       	ldi	r21, 0x80	; 128
     d1e:	b9 01       	movw	r22, r18
     d20:	ca 01       	movw	r24, r20
     d22:	2c 96       	adiw	r28, 0x0c	; 12
     d24:	e2 e0       	ldi	r30, 0x02	; 2
     d26:	0c 94 ef 3c 	jmp	0x79de	; 0x79de <__epilogue_restores__+0x20>

00000d2a <__floatunsisf>:
     d2a:	a8 e0       	ldi	r26, 0x08	; 8
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	eb e9       	ldi	r30, 0x9B	; 155
     d30:	f6 e0       	ldi	r31, 0x06	; 6
     d32:	0c 94 cb 3c 	jmp	0x7996	; 0x7996 <__prologue_saves__+0x10>
     d36:	7b 01       	movw	r14, r22
     d38:	8c 01       	movw	r16, r24
     d3a:	61 15       	cp	r22, r1
     d3c:	71 05       	cpc	r23, r1
     d3e:	81 05       	cpc	r24, r1
     d40:	91 05       	cpc	r25, r1
     d42:	19 f4       	brne	.+6      	; 0xd4a <__floatunsisf+0x20>
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	89 83       	std	Y+1, r24	; 0x01
     d48:	60 c0       	rjmp	.+192    	; 0xe0a <__floatunsisf+0xe0>
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	89 83       	std	Y+1, r24	; 0x01
     d4e:	8e e1       	ldi	r24, 0x1E	; 30
     d50:	c8 2e       	mov	r12, r24
     d52:	d1 2c       	mov	r13, r1
     d54:	dc 82       	std	Y+4, r13	; 0x04
     d56:	cb 82       	std	Y+3, r12	; 0x03
     d58:	ed 82       	std	Y+5, r14	; 0x05
     d5a:	fe 82       	std	Y+6, r15	; 0x06
     d5c:	0f 83       	std	Y+7, r16	; 0x07
     d5e:	18 87       	std	Y+8, r17	; 0x08
     d60:	c8 01       	movw	r24, r16
     d62:	b7 01       	movw	r22, r14
     d64:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__clzsi2>
     d68:	fc 01       	movw	r30, r24
     d6a:	31 97       	sbiw	r30, 0x01	; 1
     d6c:	f7 ff       	sbrs	r31, 7
     d6e:	3b c0       	rjmp	.+118    	; 0xde6 <__floatunsisf+0xbc>
     d70:	22 27       	eor	r18, r18
     d72:	33 27       	eor	r19, r19
     d74:	2e 1b       	sub	r18, r30
     d76:	3f 0b       	sbc	r19, r31
     d78:	57 01       	movw	r10, r14
     d7a:	68 01       	movw	r12, r16
     d7c:	02 2e       	mov	r0, r18
     d7e:	04 c0       	rjmp	.+8      	; 0xd88 <__floatunsisf+0x5e>
     d80:	d6 94       	lsr	r13
     d82:	c7 94       	ror	r12
     d84:	b7 94       	ror	r11
     d86:	a7 94       	ror	r10
     d88:	0a 94       	dec	r0
     d8a:	d2 f7       	brpl	.-12     	; 0xd80 <__floatunsisf+0x56>
     d8c:	40 e0       	ldi	r20, 0x00	; 0
     d8e:	50 e0       	ldi	r21, 0x00	; 0
     d90:	60 e0       	ldi	r22, 0x00	; 0
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	81 e0       	ldi	r24, 0x01	; 1
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	a0 e0       	ldi	r26, 0x00	; 0
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	04 c0       	rjmp	.+8      	; 0xda6 <__floatunsisf+0x7c>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	aa 1f       	adc	r26, r26
     da4:	bb 1f       	adc	r27, r27
     da6:	2a 95       	dec	r18
     da8:	d2 f7       	brpl	.-12     	; 0xd9e <__floatunsisf+0x74>
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	a1 09       	sbc	r26, r1
     dae:	b1 09       	sbc	r27, r1
     db0:	8e 21       	and	r24, r14
     db2:	9f 21       	and	r25, r15
     db4:	a0 23       	and	r26, r16
     db6:	b1 23       	and	r27, r17
     db8:	00 97       	sbiw	r24, 0x00	; 0
     dba:	a1 05       	cpc	r26, r1
     dbc:	b1 05       	cpc	r27, r1
     dbe:	21 f0       	breq	.+8      	; 0xdc8 <__floatunsisf+0x9e>
     dc0:	41 e0       	ldi	r20, 0x01	; 1
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	70 e0       	ldi	r23, 0x00	; 0
     dc8:	4a 29       	or	r20, r10
     dca:	5b 29       	or	r21, r11
     dcc:	6c 29       	or	r22, r12
     dce:	7d 29       	or	r23, r13
     dd0:	4d 83       	std	Y+5, r20	; 0x05
     dd2:	5e 83       	std	Y+6, r21	; 0x06
     dd4:	6f 83       	std	Y+7, r22	; 0x07
     dd6:	78 87       	std	Y+8, r23	; 0x08
     dd8:	8e e1       	ldi	r24, 0x1E	; 30
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	8e 1b       	sub	r24, r30
     dde:	9f 0b       	sbc	r25, r31
     de0:	9c 83       	std	Y+4, r25	; 0x04
     de2:	8b 83       	std	Y+3, r24	; 0x03
     de4:	12 c0       	rjmp	.+36     	; 0xe0a <__floatunsisf+0xe0>
     de6:	30 97       	sbiw	r30, 0x00	; 0
     de8:	81 f0       	breq	.+32     	; 0xe0a <__floatunsisf+0xe0>
     dea:	0e 2e       	mov	r0, r30
     dec:	04 c0       	rjmp	.+8      	; 0xdf6 <__floatunsisf+0xcc>
     dee:	ee 0c       	add	r14, r14
     df0:	ff 1c       	adc	r15, r15
     df2:	00 1f       	adc	r16, r16
     df4:	11 1f       	adc	r17, r17
     df6:	0a 94       	dec	r0
     df8:	d2 f7       	brpl	.-12     	; 0xdee <__floatunsisf+0xc4>
     dfa:	ed 82       	std	Y+5, r14	; 0x05
     dfc:	fe 82       	std	Y+6, r15	; 0x06
     dfe:	0f 83       	std	Y+7, r16	; 0x07
     e00:	18 87       	std	Y+8, r17	; 0x08
     e02:	ce 1a       	sub	r12, r30
     e04:	df 0a       	sbc	r13, r31
     e06:	dc 82       	std	Y+4, r13	; 0x04
     e08:	cb 82       	std	Y+3, r12	; 0x03
     e0a:	1a 82       	std	Y+2, r1	; 0x02
     e0c:	ce 01       	movw	r24, r28
     e0e:	01 96       	adiw	r24, 0x01	; 1
     e10:	0e 94 5d 07 	call	0xeba	; 0xeba <__pack_f>
     e14:	28 96       	adiw	r28, 0x08	; 8
     e16:	ea e0       	ldi	r30, 0x0A	; 10
     e18:	0c 94 e7 3c 	jmp	0x79ce	; 0x79ce <__epilogue_restores__+0x10>

00000e1c <__clzsi2>:
     e1c:	ef 92       	push	r14
     e1e:	ff 92       	push	r15
     e20:	0f 93       	push	r16
     e22:	1f 93       	push	r17
     e24:	7b 01       	movw	r14, r22
     e26:	8c 01       	movw	r16, r24
     e28:	80 e0       	ldi	r24, 0x00	; 0
     e2a:	e8 16       	cp	r14, r24
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	f8 06       	cpc	r15, r24
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	08 07       	cpc	r16, r24
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	18 07       	cpc	r17, r24
     e38:	88 f4       	brcc	.+34     	; 0xe5c <__clzsi2+0x40>
     e3a:	8f ef       	ldi	r24, 0xFF	; 255
     e3c:	e8 16       	cp	r14, r24
     e3e:	f1 04       	cpc	r15, r1
     e40:	01 05       	cpc	r16, r1
     e42:	11 05       	cpc	r17, r1
     e44:	31 f0       	breq	.+12     	; 0xe52 <__clzsi2+0x36>
     e46:	28 f0       	brcs	.+10     	; 0xe52 <__clzsi2+0x36>
     e48:	88 e0       	ldi	r24, 0x08	; 8
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	a0 e0       	ldi	r26, 0x00	; 0
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	17 c0       	rjmp	.+46     	; 0xe80 <__clzsi2+0x64>
     e52:	80 e0       	ldi	r24, 0x00	; 0
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	a0 e0       	ldi	r26, 0x00	; 0
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	12 c0       	rjmp	.+36     	; 0xe80 <__clzsi2+0x64>
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	e8 16       	cp	r14, r24
     e60:	80 e0       	ldi	r24, 0x00	; 0
     e62:	f8 06       	cpc	r15, r24
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	08 07       	cpc	r16, r24
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	18 07       	cpc	r17, r24
     e6c:	28 f0       	brcs	.+10     	; 0xe78 <__clzsi2+0x5c>
     e6e:	88 e1       	ldi	r24, 0x18	; 24
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	a0 e0       	ldi	r26, 0x00	; 0
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	04 c0       	rjmp	.+8      	; 0xe80 <__clzsi2+0x64>
     e78:	80 e1       	ldi	r24, 0x10	; 16
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	a0 e0       	ldi	r26, 0x00	; 0
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	20 e2       	ldi	r18, 0x20	; 32
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	40 e0       	ldi	r20, 0x00	; 0
     e86:	50 e0       	ldi	r21, 0x00	; 0
     e88:	28 1b       	sub	r18, r24
     e8a:	39 0b       	sbc	r19, r25
     e8c:	4a 0b       	sbc	r20, r26
     e8e:	5b 0b       	sbc	r21, r27
     e90:	04 c0       	rjmp	.+8      	; 0xe9a <__clzsi2+0x7e>
     e92:	16 95       	lsr	r17
     e94:	07 95       	ror	r16
     e96:	f7 94       	ror	r15
     e98:	e7 94       	ror	r14
     e9a:	8a 95       	dec	r24
     e9c:	d2 f7       	brpl	.-12     	; 0xe92 <__clzsi2+0x76>
     e9e:	f7 01       	movw	r30, r14
     ea0:	ed 52       	subi	r30, 0x2D	; 45
     ea2:	ff 4f       	sbci	r31, 0xFF	; 255
     ea4:	80 81       	ld	r24, Z
     ea6:	28 1b       	sub	r18, r24
     ea8:	31 09       	sbc	r19, r1
     eaa:	41 09       	sbc	r20, r1
     eac:	51 09       	sbc	r21, r1
     eae:	c9 01       	movw	r24, r18
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	ff 90       	pop	r15
     eb6:	ef 90       	pop	r14
     eb8:	08 95       	ret

00000eba <__pack_f>:
     eba:	df 92       	push	r13
     ebc:	ef 92       	push	r14
     ebe:	ff 92       	push	r15
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	fc 01       	movw	r30, r24
     ec6:	e4 80       	ldd	r14, Z+4	; 0x04
     ec8:	f5 80       	ldd	r15, Z+5	; 0x05
     eca:	06 81       	ldd	r16, Z+6	; 0x06
     ecc:	17 81       	ldd	r17, Z+7	; 0x07
     ece:	d1 80       	ldd	r13, Z+1	; 0x01
     ed0:	80 81       	ld	r24, Z
     ed2:	82 30       	cpi	r24, 0x02	; 2
     ed4:	48 f4       	brcc	.+18     	; 0xee8 <__pack_f+0x2e>
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	a0 e1       	ldi	r26, 0x10	; 16
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e8 2a       	or	r14, r24
     ee0:	f9 2a       	or	r15, r25
     ee2:	0a 2b       	or	r16, r26
     ee4:	1b 2b       	or	r17, r27
     ee6:	a5 c0       	rjmp	.+330    	; 0x1032 <__pack_f+0x178>
     ee8:	84 30       	cpi	r24, 0x04	; 4
     eea:	09 f4       	brne	.+2      	; 0xeee <__pack_f+0x34>
     eec:	9f c0       	rjmp	.+318    	; 0x102c <__pack_f+0x172>
     eee:	82 30       	cpi	r24, 0x02	; 2
     ef0:	21 f4       	brne	.+8      	; 0xefa <__pack_f+0x40>
     ef2:	ee 24       	eor	r14, r14
     ef4:	ff 24       	eor	r15, r15
     ef6:	87 01       	movw	r16, r14
     ef8:	05 c0       	rjmp	.+10     	; 0xf04 <__pack_f+0x4a>
     efa:	e1 14       	cp	r14, r1
     efc:	f1 04       	cpc	r15, r1
     efe:	01 05       	cpc	r16, r1
     f00:	11 05       	cpc	r17, r1
     f02:	19 f4       	brne	.+6      	; 0xf0a <__pack_f+0x50>
     f04:	e0 e0       	ldi	r30, 0x00	; 0
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	96 c0       	rjmp	.+300    	; 0x1036 <__pack_f+0x17c>
     f0a:	62 81       	ldd	r22, Z+2	; 0x02
     f0c:	73 81       	ldd	r23, Z+3	; 0x03
     f0e:	9f ef       	ldi	r25, 0xFF	; 255
     f10:	62 38       	cpi	r22, 0x82	; 130
     f12:	79 07       	cpc	r23, r25
     f14:	0c f0       	brlt	.+2      	; 0xf18 <__pack_f+0x5e>
     f16:	5b c0       	rjmp	.+182    	; 0xfce <__pack_f+0x114>
     f18:	22 e8       	ldi	r18, 0x82	; 130
     f1a:	3f ef       	ldi	r19, 0xFF	; 255
     f1c:	26 1b       	sub	r18, r22
     f1e:	37 0b       	sbc	r19, r23
     f20:	2a 31       	cpi	r18, 0x1A	; 26
     f22:	31 05       	cpc	r19, r1
     f24:	2c f0       	brlt	.+10     	; 0xf30 <__pack_f+0x76>
     f26:	20 e0       	ldi	r18, 0x00	; 0
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	50 e0       	ldi	r21, 0x00	; 0
     f2e:	2a c0       	rjmp	.+84     	; 0xf84 <__pack_f+0xca>
     f30:	b8 01       	movw	r22, r16
     f32:	a7 01       	movw	r20, r14
     f34:	02 2e       	mov	r0, r18
     f36:	04 c0       	rjmp	.+8      	; 0xf40 <__pack_f+0x86>
     f38:	76 95       	lsr	r23
     f3a:	67 95       	ror	r22
     f3c:	57 95       	ror	r21
     f3e:	47 95       	ror	r20
     f40:	0a 94       	dec	r0
     f42:	d2 f7       	brpl	.-12     	; 0xf38 <__pack_f+0x7e>
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	a0 e0       	ldi	r26, 0x00	; 0
     f4a:	b0 e0       	ldi	r27, 0x00	; 0
     f4c:	04 c0       	rjmp	.+8      	; 0xf56 <__pack_f+0x9c>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	aa 1f       	adc	r26, r26
     f54:	bb 1f       	adc	r27, r27
     f56:	2a 95       	dec	r18
     f58:	d2 f7       	brpl	.-12     	; 0xf4e <__pack_f+0x94>
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	a1 09       	sbc	r26, r1
     f5e:	b1 09       	sbc	r27, r1
     f60:	8e 21       	and	r24, r14
     f62:	9f 21       	and	r25, r15
     f64:	a0 23       	and	r26, r16
     f66:	b1 23       	and	r27, r17
     f68:	00 97       	sbiw	r24, 0x00	; 0
     f6a:	a1 05       	cpc	r26, r1
     f6c:	b1 05       	cpc	r27, r1
     f6e:	21 f0       	breq	.+8      	; 0xf78 <__pack_f+0xbe>
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	a0 e0       	ldi	r26, 0x00	; 0
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	9a 01       	movw	r18, r20
     f7a:	ab 01       	movw	r20, r22
     f7c:	28 2b       	or	r18, r24
     f7e:	39 2b       	or	r19, r25
     f80:	4a 2b       	or	r20, r26
     f82:	5b 2b       	or	r21, r27
     f84:	da 01       	movw	r26, r20
     f86:	c9 01       	movw	r24, r18
     f88:	8f 77       	andi	r24, 0x7F	; 127
     f8a:	90 70       	andi	r25, 0x00	; 0
     f8c:	a0 70       	andi	r26, 0x00	; 0
     f8e:	b0 70       	andi	r27, 0x00	; 0
     f90:	80 34       	cpi	r24, 0x40	; 64
     f92:	91 05       	cpc	r25, r1
     f94:	a1 05       	cpc	r26, r1
     f96:	b1 05       	cpc	r27, r1
     f98:	39 f4       	brne	.+14     	; 0xfa8 <__pack_f+0xee>
     f9a:	27 ff       	sbrs	r18, 7
     f9c:	09 c0       	rjmp	.+18     	; 0xfb0 <__pack_f+0xf6>
     f9e:	20 5c       	subi	r18, 0xC0	; 192
     fa0:	3f 4f       	sbci	r19, 0xFF	; 255
     fa2:	4f 4f       	sbci	r20, 0xFF	; 255
     fa4:	5f 4f       	sbci	r21, 0xFF	; 255
     fa6:	04 c0       	rjmp	.+8      	; 0xfb0 <__pack_f+0xf6>
     fa8:	21 5c       	subi	r18, 0xC1	; 193
     faa:	3f 4f       	sbci	r19, 0xFF	; 255
     fac:	4f 4f       	sbci	r20, 0xFF	; 255
     fae:	5f 4f       	sbci	r21, 0xFF	; 255
     fb0:	e0 e0       	ldi	r30, 0x00	; 0
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	20 30       	cpi	r18, 0x00	; 0
     fb6:	a0 e0       	ldi	r26, 0x00	; 0
     fb8:	3a 07       	cpc	r19, r26
     fba:	a0 e0       	ldi	r26, 0x00	; 0
     fbc:	4a 07       	cpc	r20, r26
     fbe:	a0 e4       	ldi	r26, 0x40	; 64
     fc0:	5a 07       	cpc	r21, r26
     fc2:	10 f0       	brcs	.+4      	; 0xfc8 <__pack_f+0x10e>
     fc4:	e1 e0       	ldi	r30, 0x01	; 1
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	79 01       	movw	r14, r18
     fca:	8a 01       	movw	r16, r20
     fcc:	27 c0       	rjmp	.+78     	; 0x101c <__pack_f+0x162>
     fce:	60 38       	cpi	r22, 0x80	; 128
     fd0:	71 05       	cpc	r23, r1
     fd2:	64 f5       	brge	.+88     	; 0x102c <__pack_f+0x172>
     fd4:	fb 01       	movw	r30, r22
     fd6:	e1 58       	subi	r30, 0x81	; 129
     fd8:	ff 4f       	sbci	r31, 0xFF	; 255
     fda:	d8 01       	movw	r26, r16
     fdc:	c7 01       	movw	r24, r14
     fde:	8f 77       	andi	r24, 0x7F	; 127
     fe0:	90 70       	andi	r25, 0x00	; 0
     fe2:	a0 70       	andi	r26, 0x00	; 0
     fe4:	b0 70       	andi	r27, 0x00	; 0
     fe6:	80 34       	cpi	r24, 0x40	; 64
     fe8:	91 05       	cpc	r25, r1
     fea:	a1 05       	cpc	r26, r1
     fec:	b1 05       	cpc	r27, r1
     fee:	39 f4       	brne	.+14     	; 0xffe <__pack_f+0x144>
     ff0:	e7 fe       	sbrs	r14, 7
     ff2:	0d c0       	rjmp	.+26     	; 0x100e <__pack_f+0x154>
     ff4:	80 e4       	ldi	r24, 0x40	; 64
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a0 e0       	ldi	r26, 0x00	; 0
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	04 c0       	rjmp	.+8      	; 0x1006 <__pack_f+0x14c>
     ffe:	8f e3       	ldi	r24, 0x3F	; 63
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	a0 e0       	ldi	r26, 0x00	; 0
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e8 0e       	add	r14, r24
    1008:	f9 1e       	adc	r15, r25
    100a:	0a 1f       	adc	r16, r26
    100c:	1b 1f       	adc	r17, r27
    100e:	17 ff       	sbrs	r17, 7
    1010:	05 c0       	rjmp	.+10     	; 0x101c <__pack_f+0x162>
    1012:	16 95       	lsr	r17
    1014:	07 95       	ror	r16
    1016:	f7 94       	ror	r15
    1018:	e7 94       	ror	r14
    101a:	31 96       	adiw	r30, 0x01	; 1
    101c:	87 e0       	ldi	r24, 0x07	; 7
    101e:	16 95       	lsr	r17
    1020:	07 95       	ror	r16
    1022:	f7 94       	ror	r15
    1024:	e7 94       	ror	r14
    1026:	8a 95       	dec	r24
    1028:	d1 f7       	brne	.-12     	; 0x101e <__pack_f+0x164>
    102a:	05 c0       	rjmp	.+10     	; 0x1036 <__pack_f+0x17c>
    102c:	ee 24       	eor	r14, r14
    102e:	ff 24       	eor	r15, r15
    1030:	87 01       	movw	r16, r14
    1032:	ef ef       	ldi	r30, 0xFF	; 255
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	6e 2f       	mov	r22, r30
    1038:	67 95       	ror	r22
    103a:	66 27       	eor	r22, r22
    103c:	67 95       	ror	r22
    103e:	90 2f       	mov	r25, r16
    1040:	9f 77       	andi	r25, 0x7F	; 127
    1042:	d7 94       	ror	r13
    1044:	dd 24       	eor	r13, r13
    1046:	d7 94       	ror	r13
    1048:	8e 2f       	mov	r24, r30
    104a:	86 95       	lsr	r24
    104c:	49 2f       	mov	r20, r25
    104e:	46 2b       	or	r20, r22
    1050:	58 2f       	mov	r21, r24
    1052:	5d 29       	or	r21, r13
    1054:	b7 01       	movw	r22, r14
    1056:	ca 01       	movw	r24, r20
    1058:	1f 91       	pop	r17
    105a:	0f 91       	pop	r16
    105c:	ff 90       	pop	r15
    105e:	ef 90       	pop	r14
    1060:	df 90       	pop	r13
    1062:	08 95       	ret

00001064 <__unpack_f>:
    1064:	fc 01       	movw	r30, r24
    1066:	db 01       	movw	r26, r22
    1068:	40 81       	ld	r20, Z
    106a:	51 81       	ldd	r21, Z+1	; 0x01
    106c:	22 81       	ldd	r18, Z+2	; 0x02
    106e:	62 2f       	mov	r22, r18
    1070:	6f 77       	andi	r22, 0x7F	; 127
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	22 1f       	adc	r18, r18
    1076:	22 27       	eor	r18, r18
    1078:	22 1f       	adc	r18, r18
    107a:	93 81       	ldd	r25, Z+3	; 0x03
    107c:	89 2f       	mov	r24, r25
    107e:	88 0f       	add	r24, r24
    1080:	82 2b       	or	r24, r18
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	99 1f       	adc	r25, r25
    1088:	99 27       	eor	r25, r25
    108a:	99 1f       	adc	r25, r25
    108c:	11 96       	adiw	r26, 0x01	; 1
    108e:	9c 93       	st	X, r25
    1090:	11 97       	sbiw	r26, 0x01	; 1
    1092:	21 15       	cp	r18, r1
    1094:	31 05       	cpc	r19, r1
    1096:	a9 f5       	brne	.+106    	; 0x1102 <__unpack_f+0x9e>
    1098:	41 15       	cp	r20, r1
    109a:	51 05       	cpc	r21, r1
    109c:	61 05       	cpc	r22, r1
    109e:	71 05       	cpc	r23, r1
    10a0:	11 f4       	brne	.+4      	; 0x10a6 <__unpack_f+0x42>
    10a2:	82 e0       	ldi	r24, 0x02	; 2
    10a4:	37 c0       	rjmp	.+110    	; 0x1114 <__unpack_f+0xb0>
    10a6:	82 e8       	ldi	r24, 0x82	; 130
    10a8:	9f ef       	ldi	r25, 0xFF	; 255
    10aa:	13 96       	adiw	r26, 0x03	; 3
    10ac:	9c 93       	st	X, r25
    10ae:	8e 93       	st	-X, r24
    10b0:	12 97       	sbiw	r26, 0x02	; 2
    10b2:	9a 01       	movw	r18, r20
    10b4:	ab 01       	movw	r20, r22
    10b6:	67 e0       	ldi	r22, 0x07	; 7
    10b8:	22 0f       	add	r18, r18
    10ba:	33 1f       	adc	r19, r19
    10bc:	44 1f       	adc	r20, r20
    10be:	55 1f       	adc	r21, r21
    10c0:	6a 95       	dec	r22
    10c2:	d1 f7       	brne	.-12     	; 0x10b8 <__unpack_f+0x54>
    10c4:	83 e0       	ldi	r24, 0x03	; 3
    10c6:	8c 93       	st	X, r24
    10c8:	0d c0       	rjmp	.+26     	; 0x10e4 <__unpack_f+0x80>
    10ca:	22 0f       	add	r18, r18
    10cc:	33 1f       	adc	r19, r19
    10ce:	44 1f       	adc	r20, r20
    10d0:	55 1f       	adc	r21, r21
    10d2:	12 96       	adiw	r26, 0x02	; 2
    10d4:	8d 91       	ld	r24, X+
    10d6:	9c 91       	ld	r25, X
    10d8:	13 97       	sbiw	r26, 0x03	; 3
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	13 96       	adiw	r26, 0x03	; 3
    10de:	9c 93       	st	X, r25
    10e0:	8e 93       	st	-X, r24
    10e2:	12 97       	sbiw	r26, 0x02	; 2
    10e4:	20 30       	cpi	r18, 0x00	; 0
    10e6:	80 e0       	ldi	r24, 0x00	; 0
    10e8:	38 07       	cpc	r19, r24
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	48 07       	cpc	r20, r24
    10ee:	80 e4       	ldi	r24, 0x40	; 64
    10f0:	58 07       	cpc	r21, r24
    10f2:	58 f3       	brcs	.-42     	; 0x10ca <__unpack_f+0x66>
    10f4:	14 96       	adiw	r26, 0x04	; 4
    10f6:	2d 93       	st	X+, r18
    10f8:	3d 93       	st	X+, r19
    10fa:	4d 93       	st	X+, r20
    10fc:	5c 93       	st	X, r21
    10fe:	17 97       	sbiw	r26, 0x07	; 7
    1100:	08 95       	ret
    1102:	2f 3f       	cpi	r18, 0xFF	; 255
    1104:	31 05       	cpc	r19, r1
    1106:	79 f4       	brne	.+30     	; 0x1126 <__unpack_f+0xc2>
    1108:	41 15       	cp	r20, r1
    110a:	51 05       	cpc	r21, r1
    110c:	61 05       	cpc	r22, r1
    110e:	71 05       	cpc	r23, r1
    1110:	19 f4       	brne	.+6      	; 0x1118 <__unpack_f+0xb4>
    1112:	84 e0       	ldi	r24, 0x04	; 4
    1114:	8c 93       	st	X, r24
    1116:	08 95       	ret
    1118:	64 ff       	sbrs	r22, 4
    111a:	03 c0       	rjmp	.+6      	; 0x1122 <__unpack_f+0xbe>
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	8c 93       	st	X, r24
    1120:	12 c0       	rjmp	.+36     	; 0x1146 <__unpack_f+0xe2>
    1122:	1c 92       	st	X, r1
    1124:	10 c0       	rjmp	.+32     	; 0x1146 <__unpack_f+0xe2>
    1126:	2f 57       	subi	r18, 0x7F	; 127
    1128:	30 40       	sbci	r19, 0x00	; 0
    112a:	13 96       	adiw	r26, 0x03	; 3
    112c:	3c 93       	st	X, r19
    112e:	2e 93       	st	-X, r18
    1130:	12 97       	sbiw	r26, 0x02	; 2
    1132:	83 e0       	ldi	r24, 0x03	; 3
    1134:	8c 93       	st	X, r24
    1136:	87 e0       	ldi	r24, 0x07	; 7
    1138:	44 0f       	add	r20, r20
    113a:	55 1f       	adc	r21, r21
    113c:	66 1f       	adc	r22, r22
    113e:	77 1f       	adc	r23, r23
    1140:	8a 95       	dec	r24
    1142:	d1 f7       	brne	.-12     	; 0x1138 <__unpack_f+0xd4>
    1144:	70 64       	ori	r23, 0x40	; 64
    1146:	14 96       	adiw	r26, 0x04	; 4
    1148:	4d 93       	st	X+, r20
    114a:	5d 93       	st	X+, r21
    114c:	6d 93       	st	X+, r22
    114e:	7c 93       	st	X, r23
    1150:	17 97       	sbiw	r26, 0x07	; 7
    1152:	08 95       	ret

00001154 <__fpcmp_parts_f>:
    1154:	1f 93       	push	r17
    1156:	dc 01       	movw	r26, r24
    1158:	fb 01       	movw	r30, r22
    115a:	9c 91       	ld	r25, X
    115c:	92 30       	cpi	r25, 0x02	; 2
    115e:	08 f4       	brcc	.+2      	; 0x1162 <__fpcmp_parts_f+0xe>
    1160:	47 c0       	rjmp	.+142    	; 0x11f0 <__fpcmp_parts_f+0x9c>
    1162:	80 81       	ld	r24, Z
    1164:	82 30       	cpi	r24, 0x02	; 2
    1166:	08 f4       	brcc	.+2      	; 0x116a <__fpcmp_parts_f+0x16>
    1168:	43 c0       	rjmp	.+134    	; 0x11f0 <__fpcmp_parts_f+0x9c>
    116a:	94 30       	cpi	r25, 0x04	; 4
    116c:	51 f4       	brne	.+20     	; 0x1182 <__fpcmp_parts_f+0x2e>
    116e:	11 96       	adiw	r26, 0x01	; 1
    1170:	1c 91       	ld	r17, X
    1172:	84 30       	cpi	r24, 0x04	; 4
    1174:	99 f5       	brne	.+102    	; 0x11dc <__fpcmp_parts_f+0x88>
    1176:	81 81       	ldd	r24, Z+1	; 0x01
    1178:	68 2f       	mov	r22, r24
    117a:	70 e0       	ldi	r23, 0x00	; 0
    117c:	61 1b       	sub	r22, r17
    117e:	71 09       	sbc	r23, r1
    1180:	3f c0       	rjmp	.+126    	; 0x1200 <__fpcmp_parts_f+0xac>
    1182:	84 30       	cpi	r24, 0x04	; 4
    1184:	21 f0       	breq	.+8      	; 0x118e <__fpcmp_parts_f+0x3a>
    1186:	92 30       	cpi	r25, 0x02	; 2
    1188:	31 f4       	brne	.+12     	; 0x1196 <__fpcmp_parts_f+0x42>
    118a:	82 30       	cpi	r24, 0x02	; 2
    118c:	b9 f1       	breq	.+110    	; 0x11fc <__fpcmp_parts_f+0xa8>
    118e:	81 81       	ldd	r24, Z+1	; 0x01
    1190:	88 23       	and	r24, r24
    1192:	89 f1       	breq	.+98     	; 0x11f6 <__fpcmp_parts_f+0xa2>
    1194:	2d c0       	rjmp	.+90     	; 0x11f0 <__fpcmp_parts_f+0x9c>
    1196:	11 96       	adiw	r26, 0x01	; 1
    1198:	1c 91       	ld	r17, X
    119a:	11 97       	sbiw	r26, 0x01	; 1
    119c:	82 30       	cpi	r24, 0x02	; 2
    119e:	f1 f0       	breq	.+60     	; 0x11dc <__fpcmp_parts_f+0x88>
    11a0:	81 81       	ldd	r24, Z+1	; 0x01
    11a2:	18 17       	cp	r17, r24
    11a4:	d9 f4       	brne	.+54     	; 0x11dc <__fpcmp_parts_f+0x88>
    11a6:	12 96       	adiw	r26, 0x02	; 2
    11a8:	2d 91       	ld	r18, X+
    11aa:	3c 91       	ld	r19, X
    11ac:	13 97       	sbiw	r26, 0x03	; 3
    11ae:	82 81       	ldd	r24, Z+2	; 0x02
    11b0:	93 81       	ldd	r25, Z+3	; 0x03
    11b2:	82 17       	cp	r24, r18
    11b4:	93 07       	cpc	r25, r19
    11b6:	94 f0       	brlt	.+36     	; 0x11dc <__fpcmp_parts_f+0x88>
    11b8:	28 17       	cp	r18, r24
    11ba:	39 07       	cpc	r19, r25
    11bc:	bc f0       	brlt	.+46     	; 0x11ec <__fpcmp_parts_f+0x98>
    11be:	14 96       	adiw	r26, 0x04	; 4
    11c0:	8d 91       	ld	r24, X+
    11c2:	9d 91       	ld	r25, X+
    11c4:	0d 90       	ld	r0, X+
    11c6:	bc 91       	ld	r27, X
    11c8:	a0 2d       	mov	r26, r0
    11ca:	24 81       	ldd	r18, Z+4	; 0x04
    11cc:	35 81       	ldd	r19, Z+5	; 0x05
    11ce:	46 81       	ldd	r20, Z+6	; 0x06
    11d0:	57 81       	ldd	r21, Z+7	; 0x07
    11d2:	28 17       	cp	r18, r24
    11d4:	39 07       	cpc	r19, r25
    11d6:	4a 07       	cpc	r20, r26
    11d8:	5b 07       	cpc	r21, r27
    11da:	18 f4       	brcc	.+6      	; 0x11e2 <__fpcmp_parts_f+0x8e>
    11dc:	11 23       	and	r17, r17
    11de:	41 f0       	breq	.+16     	; 0x11f0 <__fpcmp_parts_f+0x9c>
    11e0:	0a c0       	rjmp	.+20     	; 0x11f6 <__fpcmp_parts_f+0xa2>
    11e2:	82 17       	cp	r24, r18
    11e4:	93 07       	cpc	r25, r19
    11e6:	a4 07       	cpc	r26, r20
    11e8:	b5 07       	cpc	r27, r21
    11ea:	40 f4       	brcc	.+16     	; 0x11fc <__fpcmp_parts_f+0xa8>
    11ec:	11 23       	and	r17, r17
    11ee:	19 f0       	breq	.+6      	; 0x11f6 <__fpcmp_parts_f+0xa2>
    11f0:	61 e0       	ldi	r22, 0x01	; 1
    11f2:	70 e0       	ldi	r23, 0x00	; 0
    11f4:	05 c0       	rjmp	.+10     	; 0x1200 <__fpcmp_parts_f+0xac>
    11f6:	6f ef       	ldi	r22, 0xFF	; 255
    11f8:	7f ef       	ldi	r23, 0xFF	; 255
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <__fpcmp_parts_f+0xac>
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	cb 01       	movw	r24, r22
    1202:	1f 91       	pop	r17
    1204:	08 95       	ret

00001206 <_pow>:
#include "stdTypes.h"
#include "Math_Functions.h"


float _pow(float a, signed char b)
{
    1206:	df 93       	push	r29
    1208:	cf 93       	push	r28
    120a:	cd b7       	in	r28, 0x3d	; 61
    120c:	de b7       	in	r29, 0x3e	; 62
    120e:	62 97       	sbiw	r28, 0x12	; 18
    1210:	0f b6       	in	r0, 0x3f	; 63
    1212:	f8 94       	cli
    1214:	de bf       	out	0x3e, r29	; 62
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	cd bf       	out	0x3d, r28	; 61
    121a:	6d 83       	std	Y+5, r22	; 0x05
    121c:	7e 83       	std	Y+6, r23	; 0x06
    121e:	8f 83       	std	Y+7, r24	; 0x07
    1220:	98 87       	std	Y+8, r25	; 0x08
    1222:	49 87       	std	Y+9, r20	; 0x09
	if (b == 0)
    1224:	89 85       	ldd	r24, Y+9	; 0x09
    1226:	88 23       	and	r24, r24
    1228:	49 f4       	brne	.+18     	; 0x123c <_pow+0x36>
		return 1;
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	a0 e8       	ldi	r26, 0x80	; 128
    1230:	bf e3       	ldi	r27, 0x3F	; 63
    1232:	8e 87       	std	Y+14, r24	; 0x0e
    1234:	9f 87       	std	Y+15, r25	; 0x0f
    1236:	a8 8b       	std	Y+16, r26	; 0x10
    1238:	b9 8b       	std	Y+17, r27	; 0x11
    123a:	6f c0       	rjmp	.+222    	; 0x131a <_pow+0x114>
	else if (b == 1)
    123c:	89 85       	ldd	r24, Y+9	; 0x09
    123e:	81 30       	cpi	r24, 0x01	; 1
    1240:	49 f4       	brne	.+18     	; 0x1254 <_pow+0x4e>
		return a;
    1242:	8d 81       	ldd	r24, Y+5	; 0x05
    1244:	9e 81       	ldd	r25, Y+6	; 0x06
    1246:	af 81       	ldd	r26, Y+7	; 0x07
    1248:	b8 85       	ldd	r27, Y+8	; 0x08
    124a:	8e 87       	std	Y+14, r24	; 0x0e
    124c:	9f 87       	std	Y+15, r25	; 0x0f
    124e:	a8 8b       	std	Y+16, r26	; 0x10
    1250:	b9 8b       	std	Y+17, r27	; 0x11
    1252:	63 c0       	rjmp	.+198    	; 0x131a <_pow+0x114>
	else if (b < 0)
    1254:	89 85       	ldd	r24, Y+9	; 0x09
    1256:	88 23       	and	r24, r24
    1258:	dc f4       	brge	.+54     	; 0x1290 <_pow+0x8a>
		return 1 / _pow(a, -b);
    125a:	89 85       	ldd	r24, Y+9	; 0x09
    125c:	28 2f       	mov	r18, r24
    125e:	21 95       	neg	r18
    1260:	8d 81       	ldd	r24, Y+5	; 0x05
    1262:	9e 81       	ldd	r25, Y+6	; 0x06
    1264:	af 81       	ldd	r26, Y+7	; 0x07
    1266:	b8 85       	ldd	r27, Y+8	; 0x08
    1268:	bc 01       	movw	r22, r24
    126a:	cd 01       	movw	r24, r26
    126c:	42 2f       	mov	r20, r18
    126e:	0e 94 03 09 	call	0x1206	; 0x1206 <_pow>
    1272:	9b 01       	movw	r18, r22
    1274:	ac 01       	movw	r20, r24
    1276:	60 e0       	ldi	r22, 0x00	; 0
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	80 e8       	ldi	r24, 0x80	; 128
    127c:	9f e3       	ldi	r25, 0x3F	; 63
    127e:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	8e 87       	std	Y+14, r24	; 0x0e
    1288:	9f 87       	std	Y+15, r25	; 0x0f
    128a:	a8 8b       	std	Y+16, r26	; 0x10
    128c:	b9 8b       	std	Y+17, r27	; 0x11
    128e:	45 c0       	rjmp	.+138    	; 0x131a <_pow+0x114>
	else {
		float temp = _pow(a * a, b / 2);
    1290:	6d 81       	ldd	r22, Y+5	; 0x05
    1292:	7e 81       	ldd	r23, Y+6	; 0x06
    1294:	8f 81       	ldd	r24, Y+7	; 0x07
    1296:	98 85       	ldd	r25, Y+8	; 0x08
    1298:	2d 81       	ldd	r18, Y+5	; 0x05
    129a:	3e 81       	ldd	r19, Y+6	; 0x06
    129c:	4f 81       	ldd	r20, Y+7	; 0x07
    129e:	58 85       	ldd	r21, Y+8	; 0x08
    12a0:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	8a 87       	std	Y+10, r24	; 0x0a
    12aa:	9b 87       	std	Y+11, r25	; 0x0b
    12ac:	ac 87       	std	Y+12, r26	; 0x0c
    12ae:	bd 87       	std	Y+13, r27	; 0x0d
    12b0:	89 85       	ldd	r24, Y+9	; 0x09
    12b2:	8a 8b       	std	Y+18, r24	; 0x12
    12b4:	9a 89       	ldd	r25, Y+18	; 0x12
    12b6:	99 23       	and	r25, r25
    12b8:	1c f4       	brge	.+6      	; 0x12c0 <_pow+0xba>
    12ba:	aa 89       	ldd	r26, Y+18	; 0x12
    12bc:	af 5f       	subi	r26, 0xFF	; 255
    12be:	aa 8b       	std	Y+18, r26	; 0x12
    12c0:	8a 89       	ldd	r24, Y+18	; 0x12
    12c2:	85 95       	asr	r24
    12c4:	28 2f       	mov	r18, r24
    12c6:	6a 85       	ldd	r22, Y+10	; 0x0a
    12c8:	7b 85       	ldd	r23, Y+11	; 0x0b
    12ca:	8c 85       	ldd	r24, Y+12	; 0x0c
    12cc:	9d 85       	ldd	r25, Y+13	; 0x0d
    12ce:	42 2f       	mov	r20, r18
    12d0:	0e 94 03 09 	call	0x1206	; 0x1206 <_pow>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	89 83       	std	Y+1, r24	; 0x01
    12da:	9a 83       	std	Y+2, r25	; 0x02
    12dc:	ab 83       	std	Y+3, r26	; 0x03
    12de:	bc 83       	std	Y+4, r27	; 0x04
		if ((int)b % 2 == 0)
    12e0:	89 85       	ldd	r24, Y+9	; 0x09
    12e2:	81 70       	andi	r24, 0x01	; 1
    12e4:	88 23       	and	r24, r24
    12e6:	49 f4       	brne	.+18     	; 0x12fa <_pow+0xf4>
			return temp;
    12e8:	89 81       	ldd	r24, Y+1	; 0x01
    12ea:	9a 81       	ldd	r25, Y+2	; 0x02
    12ec:	ab 81       	ldd	r26, Y+3	; 0x03
    12ee:	bc 81       	ldd	r27, Y+4	; 0x04
    12f0:	8e 87       	std	Y+14, r24	; 0x0e
    12f2:	9f 87       	std	Y+15, r25	; 0x0f
    12f4:	a8 8b       	std	Y+16, r26	; 0x10
    12f6:	b9 8b       	std	Y+17, r27	; 0x11
    12f8:	10 c0       	rjmp	.+32     	; 0x131a <_pow+0x114>
		else
			return a * temp;
    12fa:	6d 81       	ldd	r22, Y+5	; 0x05
    12fc:	7e 81       	ldd	r23, Y+6	; 0x06
    12fe:	8f 81       	ldd	r24, Y+7	; 0x07
    1300:	98 85       	ldd	r25, Y+8	; 0x08
    1302:	29 81       	ldd	r18, Y+1	; 0x01
    1304:	3a 81       	ldd	r19, Y+2	; 0x02
    1306:	4b 81       	ldd	r20, Y+3	; 0x03
    1308:	5c 81       	ldd	r21, Y+4	; 0x04
    130a:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    130e:	dc 01       	movw	r26, r24
    1310:	cb 01       	movw	r24, r22
    1312:	8e 87       	std	Y+14, r24	; 0x0e
    1314:	9f 87       	std	Y+15, r25	; 0x0f
    1316:	a8 8b       	std	Y+16, r26	; 0x10
    1318:	b9 8b       	std	Y+17, r27	; 0x11
    131a:	8e 85       	ldd	r24, Y+14	; 0x0e
    131c:	9f 85       	ldd	r25, Y+15	; 0x0f
    131e:	a8 89       	ldd	r26, Y+16	; 0x10
    1320:	b9 89       	ldd	r27, Y+17	; 0x11
	}
}
    1322:	bc 01       	movw	r22, r24
    1324:	cd 01       	movw	r24, r26
    1326:	62 96       	adiw	r28, 0x12	; 18
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	f8 94       	cli
    132c:	de bf       	out	0x3e, r29	; 62
    132e:	0f be       	out	0x3f, r0	; 63
    1330:	cd bf       	out	0x3d, r28	; 61
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <_cos>:



float _cos(float x)
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	6b 97       	sbiw	r28, 0x1b	; 27
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	6a 8b       	std	Y+18, r22	; 0x12
    134e:	7b 8b       	std	Y+19, r23	; 0x13
    1350:	8c 8b       	std	Y+20, r24	; 0x14
    1352:	9d 8b       	std	Y+21, r25	; 0x15
    1354:	10 c0       	rjmp	.+32     	; 0x1376 <_cos+0x3e>
	while (x < -M_PI) x += 2 * M_PI;
    1356:	6a 89       	ldd	r22, Y+18	; 0x12
    1358:	7b 89       	ldd	r23, Y+19	; 0x13
    135a:	8c 89       	ldd	r24, Y+20	; 0x14
    135c:	9d 89       	ldd	r25, Y+21	; 0x15
    135e:	2b ed       	ldi	r18, 0xDB	; 219
    1360:	3f e0       	ldi	r19, 0x0F	; 15
    1362:	49 ec       	ldi	r20, 0xC9	; 201
    1364:	50 e4       	ldi	r21, 0x40	; 64
    1366:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    136a:	dc 01       	movw	r26, r24
    136c:	cb 01       	movw	r24, r22
    136e:	8a 8b       	std	Y+18, r24	; 0x12
    1370:	9b 8b       	std	Y+19, r25	; 0x13
    1372:	ac 8b       	std	Y+20, r26	; 0x14
    1374:	bd 8b       	std	Y+21, r27	; 0x15
    1376:	6a 89       	ldd	r22, Y+18	; 0x12
    1378:	7b 89       	ldd	r23, Y+19	; 0x13
    137a:	8c 89       	ldd	r24, Y+20	; 0x14
    137c:	9d 89       	ldd	r25, Y+21	; 0x15
    137e:	2b ed       	ldi	r18, 0xDB	; 219
    1380:	3f e0       	ldi	r19, 0x0F	; 15
    1382:	49 e4       	ldi	r20, 0x49	; 73
    1384:	50 ec       	ldi	r21, 0xC0	; 192
    1386:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    138a:	88 23       	and	r24, r24
    138c:	24 f3       	brlt	.-56     	; 0x1356 <_cos+0x1e>
    138e:	10 c0       	rjmp	.+32     	; 0x13b0 <_cos+0x78>
	while (x > M_PI) x -= 2 * M_PI;
    1390:	6a 89       	ldd	r22, Y+18	; 0x12
    1392:	7b 89       	ldd	r23, Y+19	; 0x13
    1394:	8c 89       	ldd	r24, Y+20	; 0x14
    1396:	9d 89       	ldd	r25, Y+21	; 0x15
    1398:	2b ed       	ldi	r18, 0xDB	; 219
    139a:	3f e0       	ldi	r19, 0x0F	; 15
    139c:	49 ec       	ldi	r20, 0xC9	; 201
    139e:	50 e4       	ldi	r21, 0x40	; 64
    13a0:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	8a 8b       	std	Y+18, r24	; 0x12
    13aa:	9b 8b       	std	Y+19, r25	; 0x13
    13ac:	ac 8b       	std	Y+20, r26	; 0x14
    13ae:	bd 8b       	std	Y+21, r27	; 0x15
    13b0:	6a 89       	ldd	r22, Y+18	; 0x12
    13b2:	7b 89       	ldd	r23, Y+19	; 0x13
    13b4:	8c 89       	ldd	r24, Y+20	; 0x14
    13b6:	9d 89       	ldd	r25, Y+21	; 0x15
    13b8:	2b ed       	ldi	r18, 0xDB	; 219
    13ba:	3f e0       	ldi	r19, 0x0F	; 15
    13bc:	49 e4       	ldi	r20, 0x49	; 73
    13be:	50 e4       	ldi	r21, 0x40	; 64
    13c0:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    13c4:	18 16       	cp	r1, r24
    13c6:	24 f3       	brlt	.-56     	; 0x1390 <_cos+0x58>

	u8 f =0;
    13c8:	19 8a       	std	Y+17, r1	; 0x11

	if((x > 3*M_PI/2.0 && x < 2*M_PI) || (x<0 && x>= -1*M_PI/2)) {
    13ca:	1b 8e       	std	Y+27, r1	; 0x1b
    13cc:	6a 89       	ldd	r22, Y+18	; 0x12
    13ce:	7b 89       	ldd	r23, Y+19	; 0x13
    13d0:	8c 89       	ldd	r24, Y+20	; 0x14
    13d2:	9d 89       	ldd	r25, Y+21	; 0x15
    13d4:	24 ee       	ldi	r18, 0xE4	; 228
    13d6:	3b ec       	ldi	r19, 0xCB	; 203
    13d8:	46 e9       	ldi	r20, 0x96	; 150
    13da:	50 e4       	ldi	r21, 0x40	; 64
    13dc:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    13e0:	18 16       	cp	r1, r24
    13e2:	14 f4       	brge	.+4      	; 0x13e8 <_cos+0xb0>
    13e4:	21 e0       	ldi	r18, 0x01	; 1
    13e6:	2b 8f       	std	Y+27, r18	; 0x1b
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	3b 8d       	ldd	r19, Y+27	; 0x1b
    13ec:	83 27       	eor	r24, r19
    13ee:	88 23       	and	r24, r24
    13f0:	61 f4       	brne	.+24     	; 0x140a <_cos+0xd2>
    13f2:	6a 89       	ldd	r22, Y+18	; 0x12
    13f4:	7b 89       	ldd	r23, Y+19	; 0x13
    13f6:	8c 89       	ldd	r24, Y+20	; 0x14
    13f8:	9d 89       	ldd	r25, Y+21	; 0x15
    13fa:	2b ed       	ldi	r18, 0xDB	; 219
    13fc:	3f e0       	ldi	r19, 0x0F	; 15
    13fe:	49 ec       	ldi	r20, 0xC9	; 201
    1400:	50 e4       	ldi	r21, 0x40	; 64
    1402:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    1406:	88 23       	and	r24, r24
    1408:	04 f1       	brlt	.+64     	; 0x144a <_cos+0x112>
    140a:	1a 8e       	std	Y+26, r1	; 0x1a
    140c:	6a 89       	ldd	r22, Y+18	; 0x12
    140e:	7b 89       	ldd	r23, Y+19	; 0x13
    1410:	8c 89       	ldd	r24, Y+20	; 0x14
    1412:	9d 89       	ldd	r25, Y+21	; 0x15
    1414:	20 e0       	ldi	r18, 0x00	; 0
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	40 e0       	ldi	r20, 0x00	; 0
    141a:	50 e0       	ldi	r21, 0x00	; 0
    141c:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    1420:	88 23       	and	r24, r24
    1422:	14 f4       	brge	.+4      	; 0x1428 <_cos+0xf0>
    1424:	41 e0       	ldi	r20, 0x01	; 1
    1426:	4a 8f       	std	Y+26, r20	; 0x1a
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	5a 8d       	ldd	r21, Y+26	; 0x1a
    142c:	85 27       	eor	r24, r21
    142e:	88 23       	and	r24, r24
    1430:	f1 f4       	brne	.+60     	; 0x146e <_cos+0x136>
    1432:	6a 89       	ldd	r22, Y+18	; 0x12
    1434:	7b 89       	ldd	r23, Y+19	; 0x13
    1436:	8c 89       	ldd	r24, Y+20	; 0x14
    1438:	9d 89       	ldd	r25, Y+21	; 0x15
    143a:	2b ed       	ldi	r18, 0xDB	; 219
    143c:	3f e0       	ldi	r19, 0x0F	; 15
    143e:	49 ec       	ldi	r20, 0xC9	; 201
    1440:	5f eb       	ldi	r21, 0xBF	; 191
    1442:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__gesf2>
    1446:	88 23       	and	r24, r24
    1448:	94 f0       	brlt	.+36     	; 0x146e <_cos+0x136>
		x = 2.0*M_PI + x ;
    144a:	6a 89       	ldd	r22, Y+18	; 0x12
    144c:	7b 89       	ldd	r23, Y+19	; 0x13
    144e:	8c 89       	ldd	r24, Y+20	; 0x14
    1450:	9d 89       	ldd	r25, Y+21	; 0x15
    1452:	2b ed       	ldi	r18, 0xDB	; 219
    1454:	3f e0       	ldi	r19, 0x0F	; 15
    1456:	49 ec       	ldi	r20, 0xC9	; 201
    1458:	50 e4       	ldi	r21, 0x40	; 64
    145a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	8a 8b       	std	Y+18, r24	; 0x12
    1464:	9b 8b       	std	Y+19, r25	; 0x13
    1466:	ac 8b       	std	Y+20, r26	; 0x14
    1468:	bd 8b       	std	Y+21, r27	; 0x15
		f=2;
    146a:	82 e0       	ldi	r24, 0x02	; 2
    146c:	89 8b       	std	Y+17, r24	; 0x11
	}


	if(x > 0 && x < M_PI/2) {
    146e:	6a 89       	ldd	r22, Y+18	; 0x12
    1470:	7b 89       	ldd	r23, Y+19	; 0x13
    1472:	8c 89       	ldd	r24, Y+20	; 0x14
    1474:	9d 89       	ldd	r25, Y+21	; 0x15
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    1482:	18 16       	cp	r1, r24
    1484:	f4 f4       	brge	.+60     	; 0x14c2 <_cos+0x18a>
    1486:	6a 89       	ldd	r22, Y+18	; 0x12
    1488:	7b 89       	ldd	r23, Y+19	; 0x13
    148a:	8c 89       	ldd	r24, Y+20	; 0x14
    148c:	9d 89       	ldd	r25, Y+21	; 0x15
    148e:	2b ed       	ldi	r18, 0xDB	; 219
    1490:	3f e0       	ldi	r19, 0x0F	; 15
    1492:	49 ec       	ldi	r20, 0xC9	; 201
    1494:	5f e3       	ldi	r21, 0x3F	; 63
    1496:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    149a:	88 23       	and	r24, r24
    149c:	94 f4       	brge	.+36     	; 0x14c2 <_cos+0x18a>
		x = M_PI -x ;
    149e:	6b ed       	ldi	r22, 0xDB	; 219
    14a0:	7f e0       	ldi	r23, 0x0F	; 15
    14a2:	89 e4       	ldi	r24, 0x49	; 73
    14a4:	90 e4       	ldi	r25, 0x40	; 64
    14a6:	2a 89       	ldd	r18, Y+18	; 0x12
    14a8:	3b 89       	ldd	r19, Y+19	; 0x13
    14aa:	4c 89       	ldd	r20, Y+20	; 0x14
    14ac:	5d 89       	ldd	r21, Y+21	; 0x15
    14ae:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	8a 8b       	std	Y+18, r24	; 0x12
    14b8:	9b 8b       	std	Y+19, r25	; 0x13
    14ba:	ac 8b       	std	Y+20, r26	; 0x14
    14bc:	bd 8b       	std	Y+21, r27	; 0x15
		f=1;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	89 8b       	std	Y+17, r24	; 0x11
	}


	double result = 1.0;
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	a0 e8       	ldi	r26, 0x80	; 128
    14c8:	bf e3       	ldi	r27, 0x3F	; 63
    14ca:	8d 87       	std	Y+13, r24	; 0x0d
    14cc:	9e 87       	std	Y+14, r25	; 0x0e
    14ce:	af 87       	std	Y+15, r26	; 0x0f
    14d0:	b8 8b       	std	Y+16, r27	; 0x10
	double term = 1.0;
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	a0 e8       	ldi	r26, 0x80	; 128
    14d8:	bf e3       	ldi	r27, 0x3F	; 63
    14da:	89 87       	std	Y+9, r24	; 0x09
    14dc:	9a 87       	std	Y+10, r25	; 0x0a
    14de:	ab 87       	std	Y+11, r26	; 0x0b
    14e0:	bc 87       	std	Y+12, r27	; 0x0c
	double x_squared = x * x;
    14e2:	6a 89       	ldd	r22, Y+18	; 0x12
    14e4:	7b 89       	ldd	r23, Y+19	; 0x13
    14e6:	8c 89       	ldd	r24, Y+20	; 0x14
    14e8:	9d 89       	ldd	r25, Y+21	; 0x15
    14ea:	2a 89       	ldd	r18, Y+18	; 0x12
    14ec:	3b 89       	ldd	r19, Y+19	; 0x13
    14ee:	4c 89       	ldd	r20, Y+20	; 0x14
    14f0:	5d 89       	ldd	r21, Y+21	; 0x15
    14f2:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	8d 83       	std	Y+5, r24	; 0x05
    14fc:	9e 83       	std	Y+6, r25	; 0x06
    14fe:	af 83       	std	Y+7, r26	; 0x07
    1500:	b8 87       	std	Y+8, r27	; 0x08
	int sign = -1;
    1502:	8f ef       	ldi	r24, 0xFF	; 255
    1504:	9f ef       	ldi	r25, 0xFF	; 255
    1506:	9c 83       	std	Y+4, r25	; 0x04
    1508:	8b 83       	std	Y+3, r24	; 0x03

	for (int i = 2; i <= 20; i += 2) {
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	9a 83       	std	Y+2, r25	; 0x02
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	5f c0       	rjmp	.+190    	; 0x15d2 <_cos+0x29a>
		term *= x_squared / ((i - 1) * i);
    1514:	89 81       	ldd	r24, Y+1	; 0x01
    1516:	9a 81       	ldd	r25, Y+2	; 0x02
    1518:	9c 01       	movw	r18, r24
    151a:	21 50       	subi	r18, 0x01	; 1
    151c:	30 40       	sbci	r19, 0x00	; 0
    151e:	89 81       	ldd	r24, Y+1	; 0x01
    1520:	9a 81       	ldd	r25, Y+2	; 0x02
    1522:	dc 01       	movw	r26, r24
    1524:	2a 9f       	mul	r18, r26
    1526:	c0 01       	movw	r24, r0
    1528:	2b 9f       	mul	r18, r27
    152a:	90 0d       	add	r25, r0
    152c:	3a 9f       	mul	r19, r26
    152e:	90 0d       	add	r25, r0
    1530:	11 24       	eor	r1, r1
    1532:	aa 27       	eor	r26, r26
    1534:	97 fd       	sbrc	r25, 7
    1536:	a0 95       	com	r26
    1538:	ba 2f       	mov	r27, r26
    153a:	bc 01       	movw	r22, r24
    153c:	cd 01       	movw	r24, r26
    153e:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatsisf>
    1542:	9b 01       	movw	r18, r22
    1544:	ac 01       	movw	r20, r24
    1546:	6d 81       	ldd	r22, Y+5	; 0x05
    1548:	7e 81       	ldd	r23, Y+6	; 0x06
    154a:	8f 81       	ldd	r24, Y+7	; 0x07
    154c:	98 85       	ldd	r25, Y+8	; 0x08
    154e:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	9c 01       	movw	r18, r24
    1558:	ad 01       	movw	r20, r26
    155a:	69 85       	ldd	r22, Y+9	; 0x09
    155c:	7a 85       	ldd	r23, Y+10	; 0x0a
    155e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1560:	9c 85       	ldd	r25, Y+12	; 0x0c
    1562:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1566:	dc 01       	movw	r26, r24
    1568:	cb 01       	movw	r24, r22
    156a:	89 87       	std	Y+9, r24	; 0x09
    156c:	9a 87       	std	Y+10, r25	; 0x0a
    156e:	ab 87       	std	Y+11, r26	; 0x0b
    1570:	bc 87       	std	Y+12, r27	; 0x0c
		result += sign * term;
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	9c 81       	ldd	r25, Y+4	; 0x04
    1576:	aa 27       	eor	r26, r26
    1578:	97 fd       	sbrc	r25, 7
    157a:	a0 95       	com	r26
    157c:	ba 2f       	mov	r27, r26
    157e:	bc 01       	movw	r22, r24
    1580:	cd 01       	movw	r24, r26
    1582:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatsisf>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	bc 01       	movw	r22, r24
    158c:	cd 01       	movw	r24, r26
    158e:	29 85       	ldd	r18, Y+9	; 0x09
    1590:	3a 85       	ldd	r19, Y+10	; 0x0a
    1592:	4b 85       	ldd	r20, Y+11	; 0x0b
    1594:	5c 85       	ldd	r21, Y+12	; 0x0c
    1596:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    159a:	dc 01       	movw	r26, r24
    159c:	cb 01       	movw	r24, r22
    159e:	9c 01       	movw	r18, r24
    15a0:	ad 01       	movw	r20, r26
    15a2:	6d 85       	ldd	r22, Y+13	; 0x0d
    15a4:	7e 85       	ldd	r23, Y+14	; 0x0e
    15a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    15a8:	98 89       	ldd	r25, Y+16	; 0x10
    15aa:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	8d 87       	std	Y+13, r24	; 0x0d
    15b4:	9e 87       	std	Y+14, r25	; 0x0e
    15b6:	af 87       	std	Y+15, r26	; 0x0f
    15b8:	b8 8b       	std	Y+16, r27	; 0x10
		sign *= -1;
    15ba:	8b 81       	ldd	r24, Y+3	; 0x03
    15bc:	9c 81       	ldd	r25, Y+4	; 0x04
    15be:	90 95       	com	r25
    15c0:	81 95       	neg	r24
    15c2:	9f 4f       	sbci	r25, 0xFF	; 255
    15c4:	9c 83       	std	Y+4, r25	; 0x04
    15c6:	8b 83       	std	Y+3, r24	; 0x03
	double result = 1.0;
	double term = 1.0;
	double x_squared = x * x;
	int sign = -1;

	for (int i = 2; i <= 20; i += 2) {
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	9a 81       	ldd	r25, Y+2	; 0x02
    15cc:	02 96       	adiw	r24, 0x02	; 2
    15ce:	9a 83       	std	Y+2, r25	; 0x02
    15d0:	89 83       	std	Y+1, r24	; 0x01
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	9a 81       	ldd	r25, Y+2	; 0x02
    15d6:	85 31       	cpi	r24, 0x15	; 21
    15d8:	91 05       	cpc	r25, r1
    15da:	0c f4       	brge	.+2      	; 0x15de <_cos+0x2a6>
    15dc:	9b cf       	rjmp	.-202    	; 0x1514 <_cos+0x1dc>
		term *= x_squared / ((i - 1) * i);
		result += sign * term;
		sign *= -1;
	}

	if(result > -0.0001 && result < 0.0001 ) return 0;
    15de:	6d 85       	ldd	r22, Y+13	; 0x0d
    15e0:	7e 85       	ldd	r23, Y+14	; 0x0e
    15e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e4:	98 89       	ldd	r25, Y+16	; 0x10
    15e6:	27 e1       	ldi	r18, 0x17	; 23
    15e8:	37 eb       	ldi	r19, 0xB7	; 183
    15ea:	41 ed       	ldi	r20, 0xD1	; 209
    15ec:	58 eb       	ldi	r21, 0xB8	; 184
    15ee:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    15f2:	18 16       	cp	r1, r24
    15f4:	ac f4       	brge	.+42     	; 0x1620 <_cos+0x2e8>
    15f6:	6d 85       	ldd	r22, Y+13	; 0x0d
    15f8:	7e 85       	ldd	r23, Y+14	; 0x0e
    15fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    15fc:	98 89       	ldd	r25, Y+16	; 0x10
    15fe:	27 e1       	ldi	r18, 0x17	; 23
    1600:	37 eb       	ldi	r19, 0xB7	; 183
    1602:	41 ed       	ldi	r20, 0xD1	; 209
    1604:	58 e3       	ldi	r21, 0x38	; 56
    1606:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    160a:	88 23       	and	r24, r24
    160c:	4c f4       	brge	.+18     	; 0x1620 <_cos+0x2e8>
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	40 e0       	ldi	r20, 0x00	; 0
    1614:	50 e0       	ldi	r21, 0x00	; 0
    1616:	2e 8b       	std	Y+22, r18	; 0x16
    1618:	3f 8b       	std	Y+23, r19	; 0x17
    161a:	48 8f       	std	Y+24, r20	; 0x18
    161c:	59 8f       	std	Y+25, r21	; 0x19
    161e:	17 c0       	rjmp	.+46     	; 0x164e <_cos+0x316>

	if(f==1) return -1*result;
    1620:	89 89       	ldd	r24, Y+17	; 0x11
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	61 f4       	brne	.+24     	; 0x163e <_cos+0x306>
    1626:	8d 85       	ldd	r24, Y+13	; 0x0d
    1628:	9e 85       	ldd	r25, Y+14	; 0x0e
    162a:	af 85       	ldd	r26, Y+15	; 0x0f
    162c:	b8 89       	ldd	r27, Y+16	; 0x10
    162e:	9c 01       	movw	r18, r24
    1630:	ad 01       	movw	r20, r26
    1632:	50 58       	subi	r21, 0x80	; 128
    1634:	2e 8b       	std	Y+22, r18	; 0x16
    1636:	3f 8b       	std	Y+23, r19	; 0x17
    1638:	48 8f       	std	Y+24, r20	; 0x18
    163a:	59 8f       	std	Y+25, r21	; 0x19
    163c:	08 c0       	rjmp	.+16     	; 0x164e <_cos+0x316>
	return result;
    163e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1640:	9e 85       	ldd	r25, Y+14	; 0x0e
    1642:	af 85       	ldd	r26, Y+15	; 0x0f
    1644:	b8 89       	ldd	r27, Y+16	; 0x10
    1646:	8e 8b       	std	Y+22, r24	; 0x16
    1648:	9f 8b       	std	Y+23, r25	; 0x17
    164a:	a8 8f       	std	Y+24, r26	; 0x18
    164c:	b9 8f       	std	Y+25, r27	; 0x19
    164e:	8e 89       	ldd	r24, Y+22	; 0x16
    1650:	9f 89       	ldd	r25, Y+23	; 0x17
    1652:	a8 8d       	ldd	r26, Y+24	; 0x18
    1654:	b9 8d       	ldd	r27, Y+25	; 0x19
}
    1656:	bc 01       	movw	r22, r24
    1658:	cd 01       	movw	r24, r26
    165a:	6b 96       	adiw	r28, 0x1b	; 27
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <_sin>:

float _sin(float x)
{
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	00 d0       	rcall	.+0      	; 0x1672 <_sin+0x6>
    1672:	00 d0       	rcall	.+0      	; 0x1674 <_sin+0x8>
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	69 83       	std	Y+1, r22	; 0x01
    167a:	7a 83       	std	Y+2, r23	; 0x02
    167c:	8b 83       	std	Y+3, r24	; 0x03
    167e:	9c 83       	std	Y+4, r25	; 0x04
	return -1 * _cos((M_PI/2) + x);
    1680:	69 81       	ldd	r22, Y+1	; 0x01
    1682:	7a 81       	ldd	r23, Y+2	; 0x02
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	2b ed       	ldi	r18, 0xDB	; 219
    168a:	3f e0       	ldi	r19, 0x0F	; 15
    168c:	49 ec       	ldi	r20, 0xC9	; 201
    168e:	5f e3       	ldi	r21, 0x3F	; 63
    1690:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	bc 01       	movw	r22, r24
    169a:	cd 01       	movw	r24, r26
    169c:	0e 94 9c 09 	call	0x1338	; 0x1338 <_cos>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	b0 58       	subi	r27, 0x80	; 128
}
    16a6:	bc 01       	movw	r22, r24
    16a8:	cd 01       	movw	r24, r26
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	cf 91       	pop	r28
    16b4:	df 91       	pop	r29
    16b6:	08 95       	ret

000016b8 <_tan>:

float _tan(float x)
{
    16b8:	ef 92       	push	r14
    16ba:	ff 92       	push	r15
    16bc:	0f 93       	push	r16
    16be:	1f 93       	push	r17
    16c0:	df 93       	push	r29
    16c2:	cf 93       	push	r28
    16c4:	00 d0       	rcall	.+0      	; 0x16c6 <_tan+0xe>
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <_tan+0x10>
    16c8:	cd b7       	in	r28, 0x3d	; 61
    16ca:	de b7       	in	r29, 0x3e	; 62
    16cc:	69 83       	std	Y+1, r22	; 0x01
    16ce:	7a 83       	std	Y+2, r23	; 0x02
    16d0:	8b 83       	std	Y+3, r24	; 0x03
    16d2:	9c 83       	std	Y+4, r25	; 0x04
	return (_sin(x)/_cos(x));
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	9a 81       	ldd	r25, Y+2	; 0x02
    16d8:	ab 81       	ldd	r26, Y+3	; 0x03
    16da:	bc 81       	ldd	r27, Y+4	; 0x04
    16dc:	bc 01       	movw	r22, r24
    16de:	cd 01       	movw	r24, r26
    16e0:	0e 94 36 0b 	call	0x166c	; 0x166c <_sin>
    16e4:	7b 01       	movw	r14, r22
    16e6:	8c 01       	movw	r16, r24
    16e8:	89 81       	ldd	r24, Y+1	; 0x01
    16ea:	9a 81       	ldd	r25, Y+2	; 0x02
    16ec:	ab 81       	ldd	r26, Y+3	; 0x03
    16ee:	bc 81       	ldd	r27, Y+4	; 0x04
    16f0:	bc 01       	movw	r22, r24
    16f2:	cd 01       	movw	r24, r26
    16f4:	0e 94 9c 09 	call	0x1338	; 0x1338 <_cos>
    16f8:	9b 01       	movw	r18, r22
    16fa:	ac 01       	movw	r20, r24
    16fc:	c8 01       	movw	r24, r16
    16fe:	b7 01       	movw	r22, r14
    1700:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    1704:	dc 01       	movw	r26, r24
    1706:	cb 01       	movw	r24, r22
}
    1708:	bc 01       	movw	r22, r24
    170a:	cd 01       	movw	r24, r26
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	0f 90       	pop	r0
    1714:	cf 91       	pop	r28
    1716:	df 91       	pop	r29
    1718:	1f 91       	pop	r17
    171a:	0f 91       	pop	r16
    171c:	ff 90       	pop	r15
    171e:	ef 90       	pop	r14
    1720:	08 95       	ret

00001722 <expo>:

float expo(float n)
{
    1722:	ef 92       	push	r14
    1724:	ff 92       	push	r15
    1726:	0f 93       	push	r16
    1728:	1f 93       	push	r17
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
    1732:	69 97       	sbiw	r28, 0x19	; 25
    1734:	0f b6       	in	r0, 0x3f	; 63
    1736:	f8 94       	cli
    1738:	de bf       	out	0x3e, r29	; 62
    173a:	0f be       	out	0x3f, r0	; 63
    173c:	cd bf       	out	0x3d, r28	; 61
    173e:	69 8b       	std	Y+17, r22	; 0x11
    1740:	7a 8b       	std	Y+18, r23	; 0x12
    1742:	8b 8b       	std	Y+19, r24	; 0x13
    1744:	9c 8b       	std	Y+20, r25	; 0x14
    int a = 0, b = n > 0;
    1746:	18 8a       	std	Y+16, r1	; 0x10
    1748:	1f 86       	std	Y+15, r1	; 0x0f
    174a:	1e 86       	std	Y+14, r1	; 0x0e
    174c:	1d 86       	std	Y+13, r1	; 0x0d
    174e:	69 89       	ldd	r22, Y+17	; 0x11
    1750:	7a 89       	ldd	r23, Y+18	; 0x12
    1752:	8b 89       	ldd	r24, Y+19	; 0x13
    1754:	9c 89       	ldd	r25, Y+20	; 0x14
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e0       	ldi	r20, 0x00	; 0
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    1762:	18 16       	cp	r1, r24
    1764:	24 f4       	brge	.+8      	; 0x176e <expo+0x4c>
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	9e 87       	std	Y+14, r25	; 0x0e
    176c:	8d 87       	std	Y+13, r24	; 0x0d
    float c = 1, d = 1, e = 1;
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a0 e8       	ldi	r26, 0x80	; 128
    1774:	bf e3       	ldi	r27, 0x3F	; 63
    1776:	89 87       	std	Y+9, r24	; 0x09
    1778:	9a 87       	std	Y+10, r25	; 0x0a
    177a:	ab 87       	std	Y+11, r26	; 0x0b
    177c:	bc 87       	std	Y+12, r27	; 0x0c
    177e:	80 e0       	ldi	r24, 0x00	; 0
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	a0 e8       	ldi	r26, 0x80	; 128
    1784:	bf e3       	ldi	r27, 0x3F	; 63
    1786:	8d 83       	std	Y+5, r24	; 0x05
    1788:	9e 83       	std	Y+6, r25	; 0x06
    178a:	af 83       	std	Y+7, r26	; 0x07
    178c:	b8 87       	std	Y+8, r27	; 0x08
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	a0 e8       	ldi	r26, 0x80	; 128
    1794:	bf e3       	ldi	r27, 0x3F	; 63
    1796:	89 83       	std	Y+1, r24	; 0x01
    1798:	9a 83       	std	Y+2, r25	; 0x02
    179a:	ab 83       	std	Y+3, r26	; 0x03
    179c:	bc 83       	std	Y+4, r27	; 0x04
    for (b || (n = -n); e + .00001 < (e += (d *= n) / (c *= ++a)););
    179e:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	a1 f4       	brne	.+40     	; 0x17ce <expo+0xac>
    17a6:	89 89       	ldd	r24, Y+17	; 0x11
    17a8:	9a 89       	ldd	r25, Y+18	; 0x12
    17aa:	ab 89       	ldd	r26, Y+19	; 0x13
    17ac:	bc 89       	ldd	r27, Y+20	; 0x14
    17ae:	b0 58       	subi	r27, 0x80	; 128
    17b0:	89 8b       	std	Y+17, r24	; 0x11
    17b2:	9a 8b       	std	Y+18, r25	; 0x12
    17b4:	ab 8b       	std	Y+19, r26	; 0x13
    17b6:	bc 8b       	std	Y+20, r27	; 0x14
    17b8:	69 89       	ldd	r22, Y+17	; 0x11
    17ba:	7a 89       	ldd	r23, Y+18	; 0x12
    17bc:	8b 89       	ldd	r24, Y+19	; 0x13
    17be:	9c 89       	ldd	r25, Y+20	; 0x14
    17c0:	20 e0       	ldi	r18, 0x00	; 0
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	40 e0       	ldi	r20, 0x00	; 0
    17c6:	50 e0       	ldi	r21, 0x00	; 0
    17c8:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__nesf2>
    17cc:	89 8f       	std	Y+25, r24	; 0x19
    17ce:	69 81       	ldd	r22, Y+1	; 0x01
    17d0:	7a 81       	ldd	r23, Y+2	; 0x02
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	9c 81       	ldd	r25, Y+4	; 0x04
    17d6:	2c ea       	ldi	r18, 0xAC	; 172
    17d8:	35 ec       	ldi	r19, 0xC5	; 197
    17da:	47 e2       	ldi	r20, 0x27	; 39
    17dc:	57 e3       	ldi	r21, 0x37	; 55
    17de:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	7c 01       	movw	r14, r24
    17e8:	8d 01       	movw	r16, r26
    17ea:	6d 81       	ldd	r22, Y+5	; 0x05
    17ec:	7e 81       	ldd	r23, Y+6	; 0x06
    17ee:	8f 81       	ldd	r24, Y+7	; 0x07
    17f0:	98 85       	ldd	r25, Y+8	; 0x08
    17f2:	29 89       	ldd	r18, Y+17	; 0x11
    17f4:	3a 89       	ldd	r19, Y+18	; 0x12
    17f6:	4b 89       	ldd	r20, Y+19	; 0x13
    17f8:	5c 89       	ldd	r21, Y+20	; 0x14
    17fa:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	8d 83       	std	Y+5, r24	; 0x05
    1804:	9e 83       	std	Y+6, r25	; 0x06
    1806:	af 83       	std	Y+7, r26	; 0x07
    1808:	b8 87       	std	Y+8, r27	; 0x08
    180a:	8f 85       	ldd	r24, Y+15	; 0x0f
    180c:	98 89       	ldd	r25, Y+16	; 0x10
    180e:	01 96       	adiw	r24, 0x01	; 1
    1810:	98 8b       	std	Y+16, r25	; 0x10
    1812:	8f 87       	std	Y+15, r24	; 0x0f
    1814:	8f 85       	ldd	r24, Y+15	; 0x0f
    1816:	98 89       	ldd	r25, Y+16	; 0x10
    1818:	aa 27       	eor	r26, r26
    181a:	97 fd       	sbrc	r25, 7
    181c:	a0 95       	com	r26
    181e:	ba 2f       	mov	r27, r26
    1820:	bc 01       	movw	r22, r24
    1822:	cd 01       	movw	r24, r26
    1824:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatsisf>
    1828:	9b 01       	movw	r18, r22
    182a:	ac 01       	movw	r20, r24
    182c:	69 85       	ldd	r22, Y+9	; 0x09
    182e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1830:	8b 85       	ldd	r24, Y+11	; 0x0b
    1832:	9c 85       	ldd	r25, Y+12	; 0x0c
    1834:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1838:	dc 01       	movw	r26, r24
    183a:	cb 01       	movw	r24, r22
    183c:	89 87       	std	Y+9, r24	; 0x09
    183e:	9a 87       	std	Y+10, r25	; 0x0a
    1840:	ab 87       	std	Y+11, r26	; 0x0b
    1842:	bc 87       	std	Y+12, r27	; 0x0c
    1844:	6d 81       	ldd	r22, Y+5	; 0x05
    1846:	7e 81       	ldd	r23, Y+6	; 0x06
    1848:	8f 81       	ldd	r24, Y+7	; 0x07
    184a:	98 85       	ldd	r25, Y+8	; 0x08
    184c:	29 85       	ldd	r18, Y+9	; 0x09
    184e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1850:	4b 85       	ldd	r20, Y+11	; 0x0b
    1852:	5c 85       	ldd	r21, Y+12	; 0x0c
    1854:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    1858:	dc 01       	movw	r26, r24
    185a:	cb 01       	movw	r24, r22
    185c:	9c 01       	movw	r18, r24
    185e:	ad 01       	movw	r20, r26
    1860:	69 81       	ldd	r22, Y+1	; 0x01
    1862:	7a 81       	ldd	r23, Y+2	; 0x02
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	9c 81       	ldd	r25, Y+4	; 0x04
    1868:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	89 83       	std	Y+1, r24	; 0x01
    1872:	9a 83       	std	Y+2, r25	; 0x02
    1874:	ab 83       	std	Y+3, r26	; 0x03
    1876:	bc 83       	std	Y+4, r27	; 0x04
    1878:	c8 01       	movw	r24, r16
    187a:	b7 01       	movw	r22, r14
    187c:	29 81       	ldd	r18, Y+1	; 0x01
    187e:	3a 81       	ldd	r19, Y+2	; 0x02
    1880:	4b 81       	ldd	r20, Y+3	; 0x03
    1882:	5c 81       	ldd	r21, Y+4	; 0x04
    1884:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    1888:	88 23       	and	r24, r24
    188a:	0c f4       	brge	.+2      	; 0x188e <expo+0x16c>
    188c:	a0 cf       	rjmp	.-192    	; 0x17ce <expo+0xac>
    return b ? e : 1 / e;
    188e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1890:	9e 85       	ldd	r25, Y+14	; 0x0e
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	89 f4       	brne	.+34     	; 0x18b8 <expo+0x196>
    1896:	60 e0       	ldi	r22, 0x00	; 0
    1898:	70 e0       	ldi	r23, 0x00	; 0
    189a:	80 e8       	ldi	r24, 0x80	; 128
    189c:	9f e3       	ldi	r25, 0x3F	; 63
    189e:	29 81       	ldd	r18, Y+1	; 0x01
    18a0:	3a 81       	ldd	r19, Y+2	; 0x02
    18a2:	4b 81       	ldd	r20, Y+3	; 0x03
    18a4:	5c 81       	ldd	r21, Y+4	; 0x04
    18a6:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	8d 8b       	std	Y+21, r24	; 0x15
    18b0:	9e 8b       	std	Y+22, r25	; 0x16
    18b2:	af 8b       	std	Y+23, r26	; 0x17
    18b4:	b8 8f       	std	Y+24, r27	; 0x18
    18b6:	08 c0       	rjmp	.+16     	; 0x18c8 <expo+0x1a6>
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	9a 81       	ldd	r25, Y+2	; 0x02
    18bc:	ab 81       	ldd	r26, Y+3	; 0x03
    18be:	bc 81       	ldd	r27, Y+4	; 0x04
    18c0:	8d 8b       	std	Y+21, r24	; 0x15
    18c2:	9e 8b       	std	Y+22, r25	; 0x16
    18c4:	af 8b       	std	Y+23, r26	; 0x17
    18c6:	b8 8f       	std	Y+24, r27	; 0x18
    18c8:	8d 89       	ldd	r24, Y+21	; 0x15
    18ca:	9e 89       	ldd	r25, Y+22	; 0x16
    18cc:	af 89       	ldd	r26, Y+23	; 0x17
    18ce:	b8 8d       	ldd	r27, Y+24	; 0x18
}
    18d0:	bc 01       	movw	r22, r24
    18d2:	cd 01       	movw	r24, r26
    18d4:	69 96       	adiw	r28, 0x19	; 25
    18d6:	0f b6       	in	r0, 0x3f	; 63
    18d8:	f8 94       	cli
    18da:	de bf       	out	0x3e, r29	; 62
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	cd bf       	out	0x3d, r28	; 61
    18e0:	cf 91       	pop	r28
    18e2:	df 91       	pop	r29
    18e4:	1f 91       	pop	r17
    18e6:	0f 91       	pop	r16
    18e8:	ff 90       	pop	r15
    18ea:	ef 90       	pop	r14
    18ec:	08 95       	ret

000018ee <_sqrt>:


float _sqrt(float n)
{
    18ee:	df 93       	push	r29
    18f0:	cf 93       	push	r28
    18f2:	cd b7       	in	r28, 0x3d	; 61
    18f4:	de b7       	in	r29, 0x3e	; 62
    18f6:	64 97       	sbiw	r28, 0x14	; 20
    18f8:	0f b6       	in	r0, 0x3f	; 63
    18fa:	f8 94       	cli
    18fc:	de bf       	out	0x3e, r29	; 62
    18fe:	0f be       	out	0x3f, r0	; 63
    1900:	cd bf       	out	0x3d, r28	; 61
    1902:	6d 87       	std	Y+13, r22	; 0x0d
    1904:	7e 87       	std	Y+14, r23	; 0x0e
    1906:	8f 87       	std	Y+15, r24	; 0x0f
    1908:	98 8b       	std	Y+16, r25	; 0x10
	if(n <= 0) return 0;
    190a:	6d 85       	ldd	r22, Y+13	; 0x0d
    190c:	7e 85       	ldd	r23, Y+14	; 0x0e
    190e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1910:	98 89       	ldd	r25, Y+16	; 0x10
    1912:	20 e0       	ldi	r18, 0x00	; 0
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	40 e0       	ldi	r20, 0x00	; 0
    1918:	50 e0       	ldi	r21, 0x00	; 0
    191a:	0e 94 b3 05 	call	0xb66	; 0xb66 <__lesf2>
    191e:	18 16       	cp	r1, r24
    1920:	4c f0       	brlt	.+18     	; 0x1934 <_sqrt+0x46>
    1922:	80 e0       	ldi	r24, 0x00	; 0
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	a0 e0       	ldi	r26, 0x00	; 0
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	89 8b       	std	Y+17, r24	; 0x11
    192c:	9a 8b       	std	Y+18, r25	; 0x12
    192e:	ab 8b       	std	Y+19, r26	; 0x13
    1930:	bc 8b       	std	Y+20, r27	; 0x14
    1932:	62 c0       	rjmp	.+196    	; 0x19f8 <_sqrt+0x10a>

	float x = n;
    1934:	8d 85       	ldd	r24, Y+13	; 0x0d
    1936:	9e 85       	ldd	r25, Y+14	; 0x0e
    1938:	af 85       	ldd	r26, Y+15	; 0x0f
    193a:	b8 89       	ldd	r27, Y+16	; 0x10
    193c:	89 87       	std	Y+9, r24	; 0x09
    193e:	9a 87       	std	Y+10, r25	; 0x0a
    1940:	ab 87       	std	Y+11, r26	; 0x0b
    1942:	bc 87       	std	Y+12, r27	; 0x0c
	float y = 1;
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	a0 e8       	ldi	r26, 0x80	; 128
    194a:	bf e3       	ldi	r27, 0x3F	; 63
    194c:	8d 83       	std	Y+5, r24	; 0x05
    194e:	9e 83       	std	Y+6, r25	; 0x06
    1950:	af 83       	std	Y+7, r26	; 0x07
    1952:	b8 87       	std	Y+8, r27	; 0x08

	double e = 0.000001;
    1954:	8d eb       	ldi	r24, 0xBD	; 189
    1956:	97 e3       	ldi	r25, 0x37	; 55
    1958:	a6 e8       	ldi	r26, 0x86	; 134
    195a:	b5 e3       	ldi	r27, 0x35	; 53
    195c:	89 83       	std	Y+1, r24	; 0x01
    195e:	9a 83       	std	Y+2, r25	; 0x02
    1960:	ab 83       	std	Y+3, r26	; 0x03
    1962:	bc 83       	std	Y+4, r27	; 0x04
    1964:	2a c0       	rjmp	.+84     	; 0x19ba <_sqrt+0xcc>
	while(x - y > e)
	{
		x = (x + y)/2;
    1966:	69 85       	ldd	r22, Y+9	; 0x09
    1968:	7a 85       	ldd	r23, Y+10	; 0x0a
    196a:	8b 85       	ldd	r24, Y+11	; 0x0b
    196c:	9c 85       	ldd	r25, Y+12	; 0x0c
    196e:	2d 81       	ldd	r18, Y+5	; 0x05
    1970:	3e 81       	ldd	r19, Y+6	; 0x06
    1972:	4f 81       	ldd	r20, Y+7	; 0x07
    1974:	58 85       	ldd	r21, Y+8	; 0x08
    1976:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	bc 01       	movw	r22, r24
    1980:	cd 01       	movw	r24, r26
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	50 e4       	ldi	r21, 0x40	; 64
    198a:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	89 87       	std	Y+9, r24	; 0x09
    1994:	9a 87       	std	Y+10, r25	; 0x0a
    1996:	ab 87       	std	Y+11, r26	; 0x0b
    1998:	bc 87       	std	Y+12, r27	; 0x0c
		y = n/x;
    199a:	6d 85       	ldd	r22, Y+13	; 0x0d
    199c:	7e 85       	ldd	r23, Y+14	; 0x0e
    199e:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a0:	98 89       	ldd	r25, Y+16	; 0x10
    19a2:	29 85       	ldd	r18, Y+9	; 0x09
    19a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    19a6:	4b 85       	ldd	r20, Y+11	; 0x0b
    19a8:	5c 85       	ldd	r21, Y+12	; 0x0c
    19aa:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    19ae:	dc 01       	movw	r26, r24
    19b0:	cb 01       	movw	r24, r22
    19b2:	8d 83       	std	Y+5, r24	; 0x05
    19b4:	9e 83       	std	Y+6, r25	; 0x06
    19b6:	af 83       	std	Y+7, r26	; 0x07
    19b8:	b8 87       	std	Y+8, r27	; 0x08

	float x = n;
	float y = 1;

	double e = 0.000001;
	while(x - y > e)
    19ba:	69 85       	ldd	r22, Y+9	; 0x09
    19bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    19be:	8b 85       	ldd	r24, Y+11	; 0x0b
    19c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    19c2:	2d 81       	ldd	r18, Y+5	; 0x05
    19c4:	3e 81       	ldd	r19, Y+6	; 0x06
    19c6:	4f 81       	ldd	r20, Y+7	; 0x07
    19c8:	58 85       	ldd	r21, Y+8	; 0x08
    19ca:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    19ce:	dc 01       	movw	r26, r24
    19d0:	cb 01       	movw	r24, r22
    19d2:	bc 01       	movw	r22, r24
    19d4:	cd 01       	movw	r24, r26
    19d6:	29 81       	ldd	r18, Y+1	; 0x01
    19d8:	3a 81       	ldd	r19, Y+2	; 0x02
    19da:	4b 81       	ldd	r20, Y+3	; 0x03
    19dc:	5c 81       	ldd	r21, Y+4	; 0x04
    19de:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    19e2:	18 16       	cp	r1, r24
    19e4:	0c f4       	brge	.+2      	; 0x19e8 <_sqrt+0xfa>
    19e6:	bf cf       	rjmp	.-130    	; 0x1966 <_sqrt+0x78>
	{
		x = (x + y)/2;
		y = n/x;
	}
	return x;
    19e8:	89 85       	ldd	r24, Y+9	; 0x09
    19ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ec:	ab 85       	ldd	r26, Y+11	; 0x0b
    19ee:	bc 85       	ldd	r27, Y+12	; 0x0c
    19f0:	89 8b       	std	Y+17, r24	; 0x11
    19f2:	9a 8b       	std	Y+18, r25	; 0x12
    19f4:	ab 8b       	std	Y+19, r26	; 0x13
    19f6:	bc 8b       	std	Y+20, r27	; 0x14
    19f8:	89 89       	ldd	r24, Y+17	; 0x11
    19fa:	9a 89       	ldd	r25, Y+18	; 0x12
    19fc:	ab 89       	ldd	r26, Y+19	; 0x13
    19fe:	bc 89       	ldd	r27, Y+20	; 0x14
}
    1a00:	bc 01       	movw	r22, r24
    1a02:	cd 01       	movw	r24, r26
    1a04:	64 96       	adiw	r28, 0x14	; 20
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
    1a10:	cf 91       	pop	r28
    1a12:	df 91       	pop	r29
    1a14:	08 95       	ret

00001a16 <Dec2Hex>:


/*                  Number Representation              */

void Dec2Hex(u16 DecNumber, u8 * HexNumber)
{
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	00 d0       	rcall	.+0      	; 0x1a1c <Dec2Hex+0x6>
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <Dec2Hex+0x8>
    1a1e:	0f 92       	push	r0
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	9b 83       	std	Y+3, r25	; 0x03
    1a26:	8a 83       	std	Y+2, r24	; 0x02
    1a28:	7d 83       	std	Y+5, r23	; 0x05
    1a2a:	6c 83       	std	Y+4, r22	; 0x04
	u8 i = 0;
    1a2c:	19 82       	std	Y+1, r1	; 0x01
    1a2e:	37 c0       	rjmp	.+110    	; 0x1a9e <Dec2Hex+0x88>
	while (DecNumber != 0)
	{
		if ((DecNumber % 16) < 10)
    1a30:	8a 81       	ldd	r24, Y+2	; 0x02
    1a32:	9b 81       	ldd	r25, Y+3	; 0x03
    1a34:	8f 70       	andi	r24, 0x0F	; 15
    1a36:	90 70       	andi	r25, 0x00	; 0
    1a38:	8a 30       	cpi	r24, 0x0A	; 10
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	90 f4       	brcc	.+36     	; 0x1a62 <Dec2Hex+0x4c>
		{
			HexNumber[15-i] = (DecNumber % 16) + '0'; // 15 -> NUMBER OF BITS - 1
    1a3e:	89 81       	ldd	r24, Y+1	; 0x01
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	8f e0       	ldi	r24, 0x0F	; 15
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	82 1b       	sub	r24, r18
    1a4a:	93 0b       	sbc	r25, r19
    1a4c:	9c 01       	movw	r18, r24
    1a4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a50:	9d 81       	ldd	r25, Y+5	; 0x05
    1a52:	fc 01       	movw	r30, r24
    1a54:	e2 0f       	add	r30, r18
    1a56:	f3 1f       	adc	r31, r19
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	8f 70       	andi	r24, 0x0F	; 15
    1a5c:	80 5d       	subi	r24, 0xD0	; 208
    1a5e:	80 83       	st	Z, r24
    1a60:	11 c0       	rjmp	.+34     	; 0x1a84 <Dec2Hex+0x6e>
		}
		else
		{
			HexNumber[15-i] = (DecNumber % 16) + 'A' - 10;
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	8f e0       	ldi	r24, 0x0F	; 15
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	82 1b       	sub	r24, r18
    1a6e:	93 0b       	sbc	r25, r19
    1a70:	9c 01       	movw	r18, r24
    1a72:	8c 81       	ldd	r24, Y+4	; 0x04
    1a74:	9d 81       	ldd	r25, Y+5	; 0x05
    1a76:	fc 01       	movw	r30, r24
    1a78:	e2 0f       	add	r30, r18
    1a7a:	f3 1f       	adc	r31, r19
    1a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7e:	8f 70       	andi	r24, 0x0F	; 15
    1a80:	89 5c       	subi	r24, 0xC9	; 201
    1a82:	80 83       	st	Z, r24
		}
		DecNumber /= 16;
    1a84:	8a 81       	ldd	r24, Y+2	; 0x02
    1a86:	9b 81       	ldd	r25, Y+3	; 0x03
    1a88:	92 95       	swap	r25
    1a8a:	82 95       	swap	r24
    1a8c:	8f 70       	andi	r24, 0x0F	; 15
    1a8e:	89 27       	eor	r24, r25
    1a90:	9f 70       	andi	r25, 0x0F	; 15
    1a92:	89 27       	eor	r24, r25
    1a94:	9b 83       	std	Y+3, r25	; 0x03
    1a96:	8a 83       	std	Y+2, r24	; 0x02
		i++;
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	8f 5f       	subi	r24, 0xFF	; 255
    1a9c:	89 83       	std	Y+1, r24	; 0x01
/*                  Number Representation              */

void Dec2Hex(u16 DecNumber, u8 * HexNumber)
{
	u8 i = 0;
	while (DecNumber != 0)
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	29 f6       	brne	.-118    	; 0x1a30 <Dec2Hex+0x1a>
			HexNumber[15-i] = (DecNumber % 16) + 'A' - 10;
		}
		DecNumber /= 16;
		i++;
	}
}
    1aa6:	0f 90       	pop	r0
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	0f 90       	pop	r0
    1ab0:	cf 91       	pop	r28
    1ab2:	df 91       	pop	r29
    1ab4:	08 95       	ret

00001ab6 <Dec2Oct>:


void Dec2Oct(u16 DecNumber, u8 * OctNumber)
{
    1ab6:	df 93       	push	r29
    1ab8:	cf 93       	push	r28
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <Dec2Oct+0x6>
    1abc:	00 d0       	rcall	.+0      	; 0x1abe <Dec2Oct+0x8>
    1abe:	0f 92       	push	r0
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
    1ac4:	9b 83       	std	Y+3, r25	; 0x03
    1ac6:	8a 83       	std	Y+2, r24	; 0x02
    1ac8:	7d 83       	std	Y+5, r23	; 0x05
    1aca:	6c 83       	std	Y+4, r22	; 0x04
	u8 i = 0;
    1acc:	19 82       	std	Y+1, r1	; 0x01
    1ace:	1e c0       	rjmp	.+60     	; 0x1b0c <Dec2Oct+0x56>
	while (DecNumber != 0)
	{
		OctNumber[15-i] = (DecNumber % 8) + '0';
    1ad0:	89 81       	ldd	r24, Y+1	; 0x01
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	8f e0       	ldi	r24, 0x0F	; 15
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	82 1b       	sub	r24, r18
    1adc:	93 0b       	sbc	r25, r19
    1ade:	9c 01       	movw	r18, r24
    1ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	e2 0f       	add	r30, r18
    1ae8:	f3 1f       	adc	r31, r19
    1aea:	8a 81       	ldd	r24, Y+2	; 0x02
    1aec:	87 70       	andi	r24, 0x07	; 7
    1aee:	80 5d       	subi	r24, 0xD0	; 208
    1af0:	80 83       	st	Z, r24
		DecNumber /= 8;
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	9b 81       	ldd	r25, Y+3	; 0x03
    1af6:	96 95       	lsr	r25
    1af8:	87 95       	ror	r24
    1afa:	96 95       	lsr	r25
    1afc:	87 95       	ror	r24
    1afe:	96 95       	lsr	r25
    1b00:	87 95       	ror	r24
    1b02:	9b 83       	std	Y+3, r25	; 0x03
    1b04:	8a 83       	std	Y+2, r24	; 0x02
		i++;
    1b06:	89 81       	ldd	r24, Y+1	; 0x01
    1b08:	8f 5f       	subi	r24, 0xFF	; 255
    1b0a:	89 83       	std	Y+1, r24	; 0x01


void Dec2Oct(u16 DecNumber, u8 * OctNumber)
{
	u8 i = 0;
	while (DecNumber != 0)
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	f1 f6       	brne	.-68     	; 0x1ad0 <Dec2Oct+0x1a>
	{
		OctNumber[15-i] = (DecNumber % 8) + '0';
		DecNumber /= 8;
		i++;
	}
}
    1b14:	0f 90       	pop	r0
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	08 95       	ret

00001b24 <Dec2Bin>:


void Dec2Bin(u16 DecNumber, u8 * BinNumber)
{
    1b24:	df 93       	push	r29
    1b26:	cf 93       	push	r28
    1b28:	00 d0       	rcall	.+0      	; 0x1b2a <Dec2Bin+0x6>
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <Dec2Bin+0x8>
    1b2c:	0f 92       	push	r0
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62
    1b32:	9b 83       	std	Y+3, r25	; 0x03
    1b34:	8a 83       	std	Y+2, r24	; 0x02
    1b36:	7d 83       	std	Y+5, r23	; 0x05
    1b38:	6c 83       	std	Y+4, r22	; 0x04
	u8 i = 0;
    1b3a:	19 82       	std	Y+1, r1	; 0x01
    1b3c:	1a c0       	rjmp	.+52     	; 0x1b72 <Dec2Bin+0x4e>
	while (DecNumber != 0)
	{
		BinNumber[15-i] = (DecNumber % 2) + '0';
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	28 2f       	mov	r18, r24
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	8f e0       	ldi	r24, 0x0F	; 15
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	82 1b       	sub	r24, r18
    1b4a:	93 0b       	sbc	r25, r19
    1b4c:	9c 01       	movw	r18, r24
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	9d 81       	ldd	r25, Y+5	; 0x05
    1b52:	fc 01       	movw	r30, r24
    1b54:	e2 0f       	add	r30, r18
    1b56:	f3 1f       	adc	r31, r19
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	81 70       	andi	r24, 0x01	; 1
    1b5c:	80 5d       	subi	r24, 0xD0	; 208
    1b5e:	80 83       	st	Z, r24
		DecNumber /= 2;
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	9b 81       	ldd	r25, Y+3	; 0x03
    1b64:	96 95       	lsr	r25
    1b66:	87 95       	ror	r24
    1b68:	9b 83       	std	Y+3, r25	; 0x03
    1b6a:	8a 83       	std	Y+2, r24	; 0x02
		i++;
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	8f 5f       	subi	r24, 0xFF	; 255
    1b70:	89 83       	std	Y+1, r24	; 0x01


void Dec2Bin(u16 DecNumber, u8 * BinNumber)
{
	u8 i = 0;
	while (DecNumber != 0)
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	9b 81       	ldd	r25, Y+3	; 0x03
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	11 f7       	brne	.-60     	; 0x1b3e <Dec2Bin+0x1a>
	{
		BinNumber[15-i] = (DecNumber % 2) + '0';
		DecNumber /= 2;
		i++;
	}
}
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <Hex2Dec>:



u16 Hex2Dec(char * HexNumber)
{
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	00 d0       	rcall	.+0      	; 0x1b90 <Hex2Dec+0x6>
    1b90:	00 d0       	rcall	.+0      	; 0x1b92 <Hex2Dec+0x8>
    1b92:	0f 92       	push	r0
    1b94:	cd b7       	in	r28, 0x3d	; 61
    1b96:	de b7       	in	r29, 0x3e	; 62
    1b98:	9d 83       	std	Y+5, r25	; 0x05
    1b9a:	8c 83       	std	Y+4, r24	; 0x04
	u16 val = 0;
    1b9c:	1b 82       	std	Y+3, r1	; 0x03
    1b9e:	1a 82       	std	Y+2, r1	; 0x02
    1ba0:	36 c0       	rjmp	.+108    	; 0x1c0e <Hex2Dec+0x84>
	u8 byte;
	while (*HexNumber)
	{
		byte = *HexNumber++;
    1ba2:	ec 81       	ldd	r30, Y+4	; 0x04
    1ba4:	fd 81       	ldd	r31, Y+5	; 0x05
    1ba6:	80 81       	ld	r24, Z
    1ba8:	89 83       	std	Y+1, r24	; 0x01
    1baa:	8c 81       	ldd	r24, Y+4	; 0x04
    1bac:	9d 81       	ldd	r25, Y+5	; 0x05
    1bae:	01 96       	adiw	r24, 0x01	; 1
    1bb0:	9d 83       	std	Y+5, r25	; 0x05
    1bb2:	8c 83       	std	Y+4, r24	; 0x04
		if (byte >= '0' && byte <= '9') byte = byte - '0';
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
    1bb6:	80 33       	cpi	r24, 0x30	; 48
    1bb8:	38 f0       	brcs	.+14     	; 0x1bc8 <Hex2Dec+0x3e>
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	8a 33       	cpi	r24, 0x3A	; 58
    1bbe:	20 f4       	brcc	.+8      	; 0x1bc8 <Hex2Dec+0x3e>
    1bc0:	89 81       	ldd	r24, Y+1	; 0x01
    1bc2:	80 53       	subi	r24, 0x30	; 48
    1bc4:	89 83       	std	Y+1, r24	; 0x01
    1bc6:	13 c0       	rjmp	.+38     	; 0x1bee <Hex2Dec+0x64>
		else if (byte >= 'a' && byte <='f') byte = byte - 'a' + 10;
    1bc8:	89 81       	ldd	r24, Y+1	; 0x01
    1bca:	81 36       	cpi	r24, 0x61	; 97
    1bcc:	38 f0       	brcs	.+14     	; 0x1bdc <Hex2Dec+0x52>
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	87 36       	cpi	r24, 0x67	; 103
    1bd2:	20 f4       	brcc	.+8      	; 0x1bdc <Hex2Dec+0x52>
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	87 55       	subi	r24, 0x57	; 87
    1bd8:	89 83       	std	Y+1, r24	; 0x01
    1bda:	09 c0       	rjmp	.+18     	; 0x1bee <Hex2Dec+0x64>
		else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	81 34       	cpi	r24, 0x41	; 65
    1be0:	30 f0       	brcs	.+12     	; 0x1bee <Hex2Dec+0x64>
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	87 34       	cpi	r24, 0x47	; 71
    1be6:	18 f4       	brcc	.+6      	; 0x1bee <Hex2Dec+0x64>
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	87 53       	subi	r24, 0x37	; 55
    1bec:	89 83       	std	Y+1, r24	; 0x01
		val = (val << 4) | byte;
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf2:	9c 01       	movw	r18, r24
    1bf4:	22 95       	swap	r18
    1bf6:	32 95       	swap	r19
    1bf8:	30 7f       	andi	r19, 0xF0	; 240
    1bfa:	32 27       	eor	r19, r18
    1bfc:	20 7f       	andi	r18, 0xF0	; 240
    1bfe:	32 27       	eor	r19, r18
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	88 2f       	mov	r24, r24
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	82 2b       	or	r24, r18
    1c08:	93 2b       	or	r25, r19
    1c0a:	9b 83       	std	Y+3, r25	; 0x03
    1c0c:	8a 83       	std	Y+2, r24	; 0x02

u16 Hex2Dec(char * HexNumber)
{
	u16 val = 0;
	u8 byte;
	while (*HexNumber)
    1c0e:	ec 81       	ldd	r30, Y+4	; 0x04
    1c10:	fd 81       	ldd	r31, Y+5	; 0x05
    1c12:	80 81       	ld	r24, Z
    1c14:	88 23       	and	r24, r24
    1c16:	29 f6       	brne	.-118    	; 0x1ba2 <Hex2Dec+0x18>
		if (byte >= '0' && byte <= '9') byte = byte - '0';
		else if (byte >= 'a' && byte <='f') byte = byte - 'a' + 10;
		else if (byte >= 'A' && byte <='F') byte = byte - 'A' + 10;
		val = (val << 4) | byte;
	}
	return val;
    1c18:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1a:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <Oct2Dec>:

u16 Oct2Dec(u8 * OctNumber)
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	00 d0       	rcall	.+0      	; 0x1c32 <Oct2Dec+0x6>
    1c32:	00 d0       	rcall	.+0      	; 0x1c34 <Oct2Dec+0x8>
    1c34:	0f 92       	push	r0
    1c36:	cd b7       	in	r28, 0x3d	; 61
    1c38:	de b7       	in	r29, 0x3e	; 62
    1c3a:	9d 83       	std	Y+5, r25	; 0x05
    1c3c:	8c 83       	std	Y+4, r24	; 0x04
	u16 val = 0;
    1c3e:	1b 82       	std	Y+3, r1	; 0x03
    1c40:	1a 82       	std	Y+2, r1	; 0x02
    1c42:	1a c0       	rjmp	.+52     	; 0x1c78 <Oct2Dec+0x4c>
	u8 byte;
	while (*OctNumber)
	{
		byte = *OctNumber++;
    1c44:	ec 81       	ldd	r30, Y+4	; 0x04
    1c46:	fd 81       	ldd	r31, Y+5	; 0x05
    1c48:	80 81       	ld	r24, Z
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c4e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c50:	01 96       	adiw	r24, 0x01	; 1
    1c52:	9d 83       	std	Y+5, r25	; 0x05
    1c54:	8c 83       	std	Y+4, r24	; 0x04
		val = (val << 3) | (byte - '0');
    1c56:	8a 81       	ldd	r24, Y+2	; 0x02
    1c58:	9b 81       	ldd	r25, Y+3	; 0x03
    1c5a:	9c 01       	movw	r18, r24
    1c5c:	22 0f       	add	r18, r18
    1c5e:	33 1f       	adc	r19, r19
    1c60:	22 0f       	add	r18, r18
    1c62:	33 1f       	adc	r19, r19
    1c64:	22 0f       	add	r18, r18
    1c66:	33 1f       	adc	r19, r19
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	88 2f       	mov	r24, r24
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	c0 97       	sbiw	r24, 0x30	; 48
    1c70:	82 2b       	or	r24, r18
    1c72:	93 2b       	or	r25, r19
    1c74:	9b 83       	std	Y+3, r25	; 0x03
    1c76:	8a 83       	std	Y+2, r24	; 0x02

u16 Oct2Dec(u8 * OctNumber)
{
	u16 val = 0;
	u8 byte;
	while (*OctNumber)
    1c78:	ec 81       	ldd	r30, Y+4	; 0x04
    1c7a:	fd 81       	ldd	r31, Y+5	; 0x05
    1c7c:	80 81       	ld	r24, Z
    1c7e:	88 23       	and	r24, r24
    1c80:	09 f7       	brne	.-62     	; 0x1c44 <Oct2Dec+0x18>
	{
		byte = *OctNumber++;
		val = (val << 3) | (byte - '0');
	}
	return val;
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1c86:	0f 90       	pop	r0
    1c88:	0f 90       	pop	r0
    1c8a:	0f 90       	pop	r0
    1c8c:	0f 90       	pop	r0
    1c8e:	0f 90       	pop	r0
    1c90:	cf 91       	pop	r28
    1c92:	df 91       	pop	r29
    1c94:	08 95       	ret

00001c96 <Bin2Dec>:



u16 Bin2Dec(u8 * BinNumber)
{
    1c96:	df 93       	push	r29
    1c98:	cf 93       	push	r28
    1c9a:	00 d0       	rcall	.+0      	; 0x1c9c <Bin2Dec+0x6>
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <Bin2Dec+0x8>
    1c9e:	0f 92       	push	r0
    1ca0:	cd b7       	in	r28, 0x3d	; 61
    1ca2:	de b7       	in	r29, 0x3e	; 62
    1ca4:	9d 83       	std	Y+5, r25	; 0x05
    1ca6:	8c 83       	std	Y+4, r24	; 0x04
	u16 val = 0;
    1ca8:	1b 82       	std	Y+3, r1	; 0x03
    1caa:	1a 82       	std	Y+2, r1	; 0x02
    1cac:	16 c0       	rjmp	.+44     	; 0x1cda <Bin2Dec+0x44>
	u8 byte;
	while (*BinNumber)
	{
		byte = *BinNumber++;
    1cae:	ec 81       	ldd	r30, Y+4	; 0x04
    1cb0:	fd 81       	ldd	r31, Y+5	; 0x05
    1cb2:	80 81       	ld	r24, Z
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cba:	01 96       	adiw	r24, 0x01	; 1
    1cbc:	9d 83       	std	Y+5, r25	; 0x05
    1cbe:	8c 83       	std	Y+4, r24	; 0x04
		val = (val << 1) | (byte - '0');
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1cc4:	9c 01       	movw	r18, r24
    1cc6:	22 0f       	add	r18, r18
    1cc8:	33 1f       	adc	r19, r19
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	88 2f       	mov	r24, r24
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	c0 97       	sbiw	r24, 0x30	; 48
    1cd2:	82 2b       	or	r24, r18
    1cd4:	93 2b       	or	r25, r19
    1cd6:	9b 83       	std	Y+3, r25	; 0x03
    1cd8:	8a 83       	std	Y+2, r24	; 0x02

u16 Bin2Dec(u8 * BinNumber)
{
	u16 val = 0;
	u8 byte;
	while (*BinNumber)
    1cda:	ec 81       	ldd	r30, Y+4	; 0x04
    1cdc:	fd 81       	ldd	r31, Y+5	; 0x05
    1cde:	80 81       	ld	r24, Z
    1ce0:	88 23       	and	r24, r24
    1ce2:	29 f7       	brne	.-54     	; 0x1cae <Bin2Dec+0x18>
	{
		byte = *BinNumber++;
		val = (val << 1) | (byte - '0');
	}
	return val;
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <_sinh>:




f32 _sinh(f32 x)
{
    1cf8:	ef 92       	push	r14
    1cfa:	ff 92       	push	r15
    1cfc:	0f 93       	push	r16
    1cfe:	1f 93       	push	r17
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <_sinh+0xe>
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <_sinh+0x10>
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	69 83       	std	Y+1, r22	; 0x01
    1d0e:	7a 83       	std	Y+2, r23	; 0x02
    1d10:	8b 83       	std	Y+3, r24	; 0x03
    1d12:	9c 83       	std	Y+4, r25	; 0x04
	return (expo(x) - expo(-x))/2;
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	9a 81       	ldd	r25, Y+2	; 0x02
    1d18:	ab 81       	ldd	r26, Y+3	; 0x03
    1d1a:	bc 81       	ldd	r27, Y+4	; 0x04
    1d1c:	bc 01       	movw	r22, r24
    1d1e:	cd 01       	movw	r24, r26
    1d20:	0e 94 91 0b 	call	0x1722	; 0x1722 <expo>
    1d24:	7b 01       	movw	r14, r22
    1d26:	8c 01       	movw	r16, r24
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2c:	ab 81       	ldd	r26, Y+3	; 0x03
    1d2e:	bc 81       	ldd	r27, Y+4	; 0x04
    1d30:	b0 58       	subi	r27, 0x80	; 128
    1d32:	bc 01       	movw	r22, r24
    1d34:	cd 01       	movw	r24, r26
    1d36:	0e 94 91 0b 	call	0x1722	; 0x1722 <expo>
    1d3a:	9b 01       	movw	r18, r22
    1d3c:	ac 01       	movw	r20, r24
    1d3e:	c8 01       	movw	r24, r16
    1d40:	b7 01       	movw	r22, r14
    1d42:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	bc 01       	movw	r22, r24
    1d4c:	cd 01       	movw	r24, r26
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	50 e4       	ldi	r21, 0x40	; 64
    1d56:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    1d5a:	dc 01       	movw	r26, r24
    1d5c:	cb 01       	movw	r24, r22
}
    1d5e:	bc 01       	movw	r22, r24
    1d60:	cd 01       	movw	r24, r26
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	1f 91       	pop	r17
    1d70:	0f 91       	pop	r16
    1d72:	ff 90       	pop	r15
    1d74:	ef 90       	pop	r14
    1d76:	08 95       	ret

00001d78 <_cosh>:



f32 _cosh(f32 x)
{
    1d78:	ef 92       	push	r14
    1d7a:	ff 92       	push	r15
    1d7c:	0f 93       	push	r16
    1d7e:	1f 93       	push	r17
    1d80:	df 93       	push	r29
    1d82:	cf 93       	push	r28
    1d84:	00 d0       	rcall	.+0      	; 0x1d86 <_cosh+0xe>
    1d86:	00 d0       	rcall	.+0      	; 0x1d88 <_cosh+0x10>
    1d88:	cd b7       	in	r28, 0x3d	; 61
    1d8a:	de b7       	in	r29, 0x3e	; 62
    1d8c:	69 83       	std	Y+1, r22	; 0x01
    1d8e:	7a 83       	std	Y+2, r23	; 0x02
    1d90:	8b 83       	std	Y+3, r24	; 0x03
    1d92:	9c 83       	std	Y+4, r25	; 0x04
	return (expo(x) + expo(-x))/2;
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	9a 81       	ldd	r25, Y+2	; 0x02
    1d98:	ab 81       	ldd	r26, Y+3	; 0x03
    1d9a:	bc 81       	ldd	r27, Y+4	; 0x04
    1d9c:	bc 01       	movw	r22, r24
    1d9e:	cd 01       	movw	r24, r26
    1da0:	0e 94 91 0b 	call	0x1722	; 0x1722 <expo>
    1da4:	7b 01       	movw	r14, r22
    1da6:	8c 01       	movw	r16, r24
    1da8:	89 81       	ldd	r24, Y+1	; 0x01
    1daa:	9a 81       	ldd	r25, Y+2	; 0x02
    1dac:	ab 81       	ldd	r26, Y+3	; 0x03
    1dae:	bc 81       	ldd	r27, Y+4	; 0x04
    1db0:	b0 58       	subi	r27, 0x80	; 128
    1db2:	bc 01       	movw	r22, r24
    1db4:	cd 01       	movw	r24, r26
    1db6:	0e 94 91 0b 	call	0x1722	; 0x1722 <expo>
    1dba:	9b 01       	movw	r18, r22
    1dbc:	ac 01       	movw	r20, r24
    1dbe:	c8 01       	movw	r24, r16
    1dc0:	b7 01       	movw	r22, r14
    1dc2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    1dc6:	dc 01       	movw	r26, r24
    1dc8:	cb 01       	movw	r24, r22
    1dca:	bc 01       	movw	r22, r24
    1dcc:	cd 01       	movw	r24, r26
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	40 e0       	ldi	r20, 0x00	; 0
    1dd4:	50 e4       	ldi	r21, 0x40	; 64
    1dd6:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    1dda:	dc 01       	movw	r26, r24
    1ddc:	cb 01       	movw	r24, r22
}
    1dde:	bc 01       	movw	r22, r24
    1de0:	cd 01       	movw	r24, r26
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	cf 91       	pop	r28
    1dec:	df 91       	pop	r29
    1dee:	1f 91       	pop	r17
    1df0:	0f 91       	pop	r16
    1df2:	ff 90       	pop	r15
    1df4:	ef 90       	pop	r14
    1df6:	08 95       	ret

00001df8 <_tanh>:



f32 _tanh(f32 x)
{
    1df8:	ef 92       	push	r14
    1dfa:	ff 92       	push	r15
    1dfc:	0f 93       	push	r16
    1dfe:	1f 93       	push	r17
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <_tanh+0xe>
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <_tanh+0x10>
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	69 83       	std	Y+1, r22	; 0x01
    1e0e:	7a 83       	std	Y+2, r23	; 0x02
    1e10:	8b 83       	std	Y+3, r24	; 0x03
    1e12:	9c 83       	std	Y+4, r25	; 0x04
	return _sinh(x)/_cosh(x);
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	9a 81       	ldd	r25, Y+2	; 0x02
    1e18:	ab 81       	ldd	r26, Y+3	; 0x03
    1e1a:	bc 81       	ldd	r27, Y+4	; 0x04
    1e1c:	bc 01       	movw	r22, r24
    1e1e:	cd 01       	movw	r24, r26
    1e20:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_sinh>
    1e24:	7b 01       	movw	r14, r22
    1e26:	8c 01       	movw	r16, r24
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2c:	ab 81       	ldd	r26, Y+3	; 0x03
    1e2e:	bc 81       	ldd	r27, Y+4	; 0x04
    1e30:	bc 01       	movw	r22, r24
    1e32:	cd 01       	movw	r24, r26
    1e34:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <_cosh>
    1e38:	9b 01       	movw	r18, r22
    1e3a:	ac 01       	movw	r20, r24
    1e3c:	c8 01       	movw	r24, r16
    1e3e:	b7 01       	movw	r22, r14
    1e40:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
}
    1e48:	bc 01       	movw	r22, r24
    1e4a:	cd 01       	movw	r24, r26
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	1f 91       	pop	r17
    1e5a:	0f 91       	pop	r16
    1e5c:	ff 90       	pop	r15
    1e5e:	ef 90       	pop	r14
    1e60:	08 95       	ret

00001e62 <_atan>:

double _atan (double x)
{
    1e62:	ef 92       	push	r14
    1e64:	ff 92       	push	r15
    1e66:	0f 93       	push	r16
    1e68:	1f 93       	push	r17
    1e6a:	df 93       	push	r29
    1e6c:	cf 93       	push	r28
    1e6e:	cd b7       	in	r28, 0x3d	; 61
    1e70:	de b7       	in	r29, 0x3e	; 62
    1e72:	e0 97       	sbiw	r28, 0x30	; 48
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	de bf       	out	0x3e, r29	; 62
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	cd bf       	out	0x3d, r28	; 61
    1e7e:	6d 8f       	std	Y+29, r22	; 0x1d
    1e80:	7e 8f       	std	Y+30, r23	; 0x1e
    1e82:	8f 8f       	std	Y+31, r24	; 0x1f
    1e84:	98 a3       	std	Y+32, r25	; 0x20
	/* argument reduction:
       arctan (-x) = -arctan(x);
       arctan (1/x) = 1/2 * pi - arctan (x), when x > 0
	 */

	if (x>=1000000) return M_PI/2;
    1e86:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e88:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1e8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e8c:	98 a1       	ldd	r25, Y+32	; 0x20
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	34 e2       	ldi	r19, 0x24	; 36
    1e92:	44 e7       	ldi	r20, 0x74	; 116
    1e94:	59 e4       	ldi	r21, 0x49	; 73
    1e96:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__gesf2>
    1e9a:	88 23       	and	r24, r24
    1e9c:	4c f0       	brlt	.+18     	; 0x1eb0 <_atan+0x4e>
    1e9e:	4b ed       	ldi	r20, 0xDB	; 219
    1ea0:	5f e0       	ldi	r21, 0x0F	; 15
    1ea2:	69 ec       	ldi	r22, 0xC9	; 201
    1ea4:	7f e3       	ldi	r23, 0x3F	; 63
    1ea6:	4d a7       	std	Y+45, r20	; 0x2d
    1ea8:	5e a7       	std	Y+46, r21	; 0x2e
    1eaa:	6f a7       	std	Y+47, r22	; 0x2f
    1eac:	78 ab       	std	Y+48, r23	; 0x30
    1eae:	e9 c2       	rjmp	.+1490   	; 0x2482 <_atan+0x620>
	else if (x<-100000)return -M_PI/2;
    1eb0:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1eb2:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1eb4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1eb6:	98 a1       	ldd	r25, Y+32	; 0x20
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e5       	ldi	r19, 0x50	; 80
    1ebc:	43 ec       	ldi	r20, 0xC3	; 195
    1ebe:	57 ec       	ldi	r21, 0xC7	; 199
    1ec0:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    1ec4:	88 23       	and	r24, r24
    1ec6:	4c f4       	brge	.+18     	; 0x1eda <_atan+0x78>
    1ec8:	6b ed       	ldi	r22, 0xDB	; 219
    1eca:	7f e0       	ldi	r23, 0x0F	; 15
    1ecc:	89 ec       	ldi	r24, 0xC9	; 201
    1ece:	9f eb       	ldi	r25, 0xBF	; 191
    1ed0:	6d a7       	std	Y+45, r22	; 0x2d
    1ed2:	7e a7       	std	Y+46, r23	; 0x2e
    1ed4:	8f a7       	std	Y+47, r24	; 0x2f
    1ed6:	98 ab       	std	Y+48, r25	; 0x30
    1ed8:	d4 c2       	rjmp	.+1448   	; 0x2482 <_atan+0x620>
	z = fabs (x);
    1eda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1edc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ede:	af 8d       	ldd	r26, Y+31	; 0x1f
    1ee0:	b8 a1       	ldd	r27, Y+32	; 0x20
    1ee2:	bf 77       	andi	r27, 0x7F	; 127
    1ee4:	8d 8b       	std	Y+21, r24	; 0x15
    1ee6:	9e 8b       	std	Y+22, r25	; 0x16
    1ee8:	af 8b       	std	Y+23, r26	; 0x17
    1eea:	b8 8f       	std	Y+24, r27	; 0x18
	a = (z > 1.0) ? (1.0 / z) : z;
    1eec:	6d 89       	ldd	r22, Y+21	; 0x15
    1eee:	7e 89       	ldd	r23, Y+22	; 0x16
    1ef0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef4:	20 e0       	ldi	r18, 0x00	; 0
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	40 e8       	ldi	r20, 0x80	; 128
    1efa:	5f e3       	ldi	r21, 0x3F	; 63
    1efc:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    1f00:	18 16       	cp	r1, r24
    1f02:	8c f4       	brge	.+34     	; 0x1f26 <_atan+0xc4>
    1f04:	60 e0       	ldi	r22, 0x00	; 0
    1f06:	70 e0       	ldi	r23, 0x00	; 0
    1f08:	80 e8       	ldi	r24, 0x80	; 128
    1f0a:	9f e3       	ldi	r25, 0x3F	; 63
    1f0c:	2d 89       	ldd	r18, Y+21	; 0x15
    1f0e:	3e 89       	ldd	r19, Y+22	; 0x16
    1f10:	4f 89       	ldd	r20, Y+23	; 0x17
    1f12:	58 8d       	ldd	r21, Y+24	; 0x18
    1f14:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	89 a7       	std	Y+41, r24	; 0x29
    1f1e:	9a a7       	std	Y+42, r25	; 0x2a
    1f20:	ab a7       	std	Y+43, r26	; 0x2b
    1f22:	bc a7       	std	Y+44, r27	; 0x2c
    1f24:	08 c0       	rjmp	.+16     	; 0x1f36 <_atan+0xd4>
    1f26:	8d 89       	ldd	r24, Y+21	; 0x15
    1f28:	9e 89       	ldd	r25, Y+22	; 0x16
    1f2a:	af 89       	ldd	r26, Y+23	; 0x17
    1f2c:	b8 8d       	ldd	r27, Y+24	; 0x18
    1f2e:	89 a7       	std	Y+41, r24	; 0x29
    1f30:	9a a7       	std	Y+42, r25	; 0x2a
    1f32:	ab a7       	std	Y+43, r26	; 0x2b
    1f34:	bc a7       	std	Y+44, r27	; 0x2c
    1f36:	49 a5       	ldd	r20, Y+41	; 0x29
    1f38:	5a a5       	ldd	r21, Y+42	; 0x2a
    1f3a:	6b a5       	ldd	r22, Y+43	; 0x2b
    1f3c:	7c a5       	ldd	r23, Y+44	; 0x2c
    1f3e:	49 8f       	std	Y+25, r20	; 0x19
    1f40:	5a 8f       	std	Y+26, r21	; 0x1a
    1f42:	6b 8f       	std	Y+27, r22	; 0x1b
    1f44:	7c 8f       	std	Y+28, r23	; 0x1c
	s = a * a;
    1f46:	69 8d       	ldd	r22, Y+25	; 0x19
    1f48:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f4a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f4c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f4e:	29 8d       	ldd	r18, Y+25	; 0x19
    1f50:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1f52:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1f54:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1f56:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1f5a:	dc 01       	movw	r26, r24
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	8d 83       	std	Y+5, r24	; 0x05
    1f60:	9e 83       	std	Y+6, r25	; 0x06
    1f62:	af 83       	std	Y+7, r26	; 0x07
    1f64:	b8 87       	std	Y+8, r27	; 0x08
	q = s * s;
    1f66:	6d 81       	ldd	r22, Y+5	; 0x05
    1f68:	7e 81       	ldd	r23, Y+6	; 0x06
    1f6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f6c:	98 85       	ldd	r25, Y+8	; 0x08
    1f6e:	2d 81       	ldd	r18, Y+5	; 0x05
    1f70:	3e 81       	ldd	r19, Y+6	; 0x06
    1f72:	4f 81       	ldd	r20, Y+7	; 0x07
    1f74:	58 85       	ldd	r21, Y+8	; 0x08
    1f76:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	89 87       	std	Y+9, r24	; 0x09
    1f80:	9a 87       	std	Y+10, r25	; 0x0a
    1f82:	ab 87       	std	Y+11, r26	; 0x0b
    1f84:	bc 87       	std	Y+12, r27	; 0x0c
	/* core approximation: approximate atan(x) on [0,1] */
	p =            -2.0258553044340116e-5;  // -0x1.53e1d2a258e3ap-16
    1f86:	89 ee       	ldi	r24, 0xE9	; 233
    1f88:	90 ef       	ldi	r25, 0xF0	; 240
    1f8a:	a9 ea       	ldi	r26, 0xA9	; 169
    1f8c:	b7 eb       	ldi	r27, 0xB7	; 183
    1f8e:	89 8b       	std	Y+17, r24	; 0x11
    1f90:	9a 8b       	std	Y+18, r25	; 0x12
    1f92:	ab 8b       	std	Y+19, r26	; 0x13
    1f94:	bc 8b       	std	Y+20, r27	; 0x14
	t =             2.2302240345710764e-4;  //  0x1.d3b63dbb6167ap-13
    1f96:	8f e1       	ldi	r24, 0x1F	; 31
    1f98:	9b ed       	ldi	r25, 0xDB	; 219
    1f9a:	a9 e6       	ldi	r26, 0x69	; 105
    1f9c:	b9 e3       	ldi	r27, 0x39	; 57
    1f9e:	89 83       	std	Y+1, r24	; 0x01
    1fa0:	9a 83       	std	Y+2, r25	; 0x02
    1fa2:	ab 83       	std	Y+3, r26	; 0x03
    1fa4:	bc 83       	std	Y+4, r27	; 0x04
	p = fma (p, q, -1.1640717779912220e-3); // -0x1.312788ddde71dp-10
    1fa6:	89 89       	ldd	r24, Y+17	; 0x11
    1fa8:	9a 89       	ldd	r25, Y+18	; 0x12
    1faa:	ab 89       	ldd	r26, Y+19	; 0x13
    1fac:	bc 89       	ldd	r27, Y+20	; 0x14
    1fae:	29 85       	ldd	r18, Y+9	; 0x09
    1fb0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fb2:	4b 85       	ldd	r20, Y+11	; 0x0b
    1fb4:	5c 85       	ldd	r21, Y+12	; 0x0c
    1fb6:	bc 01       	movw	r22, r24
    1fb8:	cd 01       	movw	r24, r26
    1fba:	0f 2e       	mov	r0, r31
    1fbc:	f4 ec       	ldi	r31, 0xC4	; 196
    1fbe:	ef 2e       	mov	r14, r31
    1fc0:	f3 e9       	ldi	r31, 0x93	; 147
    1fc2:	ff 2e       	mov	r15, r31
    1fc4:	f8 e9       	ldi	r31, 0x98	; 152
    1fc6:	0f 2f       	mov	r16, r31
    1fc8:	fa eb       	ldi	r31, 0xBA	; 186
    1fca:	1f 2f       	mov	r17, r31
    1fcc:	f0 2d       	mov	r31, r0
    1fce:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <fma>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	89 8b       	std	Y+17, r24	; 0x11
    1fd8:	9a 8b       	std	Y+18, r25	; 0x12
    1fda:	ab 8b       	std	Y+19, r26	; 0x13
    1fdc:	bc 8b       	std	Y+20, r27	; 0x14
	t = fma (t, q,  3.8559749383656407e-3); //  0x1.f9690c824aaf1p-9
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe2:	ab 81       	ldd	r26, Y+3	; 0x03
    1fe4:	bc 81       	ldd	r27, Y+4	; 0x04
    1fe6:	29 85       	ldd	r18, Y+9	; 0x09
    1fe8:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fea:	4b 85       	ldd	r20, Y+11	; 0x0b
    1fec:	5c 85       	ldd	r21, Y+12	; 0x0c
    1fee:	bc 01       	movw	r22, r24
    1ff0:	cd 01       	movw	r24, r26
    1ff2:	0f 2e       	mov	r0, r31
    1ff4:	f6 e8       	ldi	r31, 0x86	; 134
    1ff6:	ef 2e       	mov	r14, r31
    1ff8:	f4 eb       	ldi	r31, 0xB4	; 180
    1ffa:	ff 2e       	mov	r15, r31
    1ffc:	fc e7       	ldi	r31, 0x7C	; 124
    1ffe:	0f 2f       	mov	r16, r31
    2000:	fb e3       	ldi	r31, 0x3B	; 59
    2002:	1f 2f       	mov	r17, r31
    2004:	f0 2d       	mov	r31, r0
    2006:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <fma>
    200a:	dc 01       	movw	r26, r24
    200c:	cb 01       	movw	r24, r22
    200e:	89 83       	std	Y+1, r24	; 0x01
    2010:	9a 83       	std	Y+2, r25	; 0x02
    2012:	ab 83       	std	Y+3, r26	; 0x03
    2014:	bc 83       	std	Y+4, r27	; 0x04
	p = fma (p, q, -9.1845592187222193e-3); // -0x1.2cf5aabc7dbd2p-7
    2016:	89 89       	ldd	r24, Y+17	; 0x11
    2018:	9a 89       	ldd	r25, Y+18	; 0x12
    201a:	ab 89       	ldd	r26, Y+19	; 0x13
    201c:	bc 89       	ldd	r27, Y+20	; 0x14
    201e:	29 85       	ldd	r18, Y+9	; 0x09
    2020:	3a 85       	ldd	r19, Y+10	; 0x0a
    2022:	4b 85       	ldd	r20, Y+11	; 0x0b
    2024:	5c 85       	ldd	r21, Y+12	; 0x0c
    2026:	bc 01       	movw	r22, r24
    2028:	cd 01       	movw	r24, r26
    202a:	0f 2e       	mov	r0, r31
    202c:	f5 ed       	ldi	r31, 0xD5	; 213
    202e:	ef 2e       	mov	r14, r31
    2030:	fa e7       	ldi	r31, 0x7A	; 122
    2032:	ff 2e       	mov	r15, r31
    2034:	f6 e1       	ldi	r31, 0x16	; 22
    2036:	0f 2f       	mov	r16, r31
    2038:	fc eb       	ldi	r31, 0xBC	; 188
    203a:	1f 2f       	mov	r17, r31
    203c:	f0 2d       	mov	r31, r0
    203e:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <fma>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	89 8b       	std	Y+17, r24	; 0x11
    2048:	9a 8b       	std	Y+18, r25	; 0x12
    204a:	ab 8b       	std	Y+19, r26	; 0x13
    204c:	bc 8b       	std	Y+20, r27	; 0x14
	t = fma (t, q,  1.6978035834594660e-2); //  0x1.162b0b2a3bcdcp-6
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	9a 81       	ldd	r25, Y+2	; 0x02
    2052:	ab 81       	ldd	r26, Y+3	; 0x03
    2054:	bc 81       	ldd	r27, Y+4	; 0x04
    2056:	29 85       	ldd	r18, Y+9	; 0x09
    2058:	3a 85       	ldd	r19, Y+10	; 0x0a
    205a:	4b 85       	ldd	r20, Y+11	; 0x0b
    205c:	5c 85       	ldd	r21, Y+12	; 0x0c
    205e:	bc 01       	movw	r22, r24
    2060:	cd 01       	movw	r24, r26
    2062:	0f 2e       	mov	r0, r31
    2064:	f6 e8       	ldi	r31, 0x86	; 134
    2066:	ef 2e       	mov	r14, r31
    2068:	f5 e1       	ldi	r31, 0x15	; 21
    206a:	ff 2e       	mov	r15, r31
    206c:	fb e8       	ldi	r31, 0x8B	; 139
    206e:	0f 2f       	mov	r16, r31
    2070:	fc e3       	ldi	r31, 0x3C	; 60
    2072:	1f 2f       	mov	r17, r31
    2074:	f0 2d       	mov	r31, r0
    2076:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <fma>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	9a 83       	std	Y+2, r25	; 0x02
    2082:	ab 83       	std	Y+3, r26	; 0x03
    2084:	bc 83       	std	Y+4, r27	; 0x04
	p = fma (p, q, -2.5826796814492296e-2); // -0x1.a7256feb6f841p-6
    2086:	89 89       	ldd	r24, Y+17	; 0x11
    2088:	9a 89       	ldd	r25, Y+18	; 0x12
    208a:	ab 89       	ldd	r26, Y+19	; 0x13
    208c:	bc 89       	ldd	r27, Y+20	; 0x14
    208e:	29 85       	ldd	r18, Y+9	; 0x09
    2090:	3a 85       	ldd	r19, Y+10	; 0x0a
    2092:	4b 85       	ldd	r20, Y+11	; 0x0b
    2094:	5c 85       	ldd	r21, Y+12	; 0x0c
    2096:	bc 01       	movw	r22, r24
    2098:	cd 01       	movw	r24, r26
    209a:	0f 2e       	mov	r0, r31
    209c:	f8 eb       	ldi	r31, 0xB8	; 184
    209e:	ef 2e       	mov	r14, r31
    20a0:	f2 e9       	ldi	r31, 0x92	; 146
    20a2:	ff 2e       	mov	r15, r31
    20a4:	f3 ed       	ldi	r31, 0xD3	; 211
    20a6:	0f 2f       	mov	r16, r31
    20a8:	fc eb       	ldi	r31, 0xBC	; 188
    20aa:	1f 2f       	mov	r17, r31
    20ac:	f0 2d       	mov	r31, r0
    20ae:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <fma>
    20b2:	dc 01       	movw	r26, r24
    20b4:	cb 01       	movw	r24, r22
    20b6:	89 8b       	std	Y+17, r24	; 0x11
    20b8:	9a 8b       	std	Y+18, r25	; 0x12
    20ba:	ab 8b       	std	Y+19, r26	; 0x13
    20bc:	bc 8b       	std	Y+20, r27	; 0x14
	t = fma (t, q,  3.4067811082715810e-2); //  0x1.171560ce4a4ecp-5
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	9a 81       	ldd	r25, Y+2	; 0x02
    20c2:	ab 81       	ldd	r26, Y+3	; 0x03
    20c4:	bc 81       	ldd	r27, Y+4	; 0x04
    20c6:	29 85       	ldd	r18, Y+9	; 0x09
    20c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    20ca:	4b 85       	ldd	r20, Y+11	; 0x0b
    20cc:	5c 85       	ldd	r21, Y+12	; 0x0c
    20ce:	bc 01       	movw	r22, r24
    20d0:	cd 01       	movw	r24, r26
    20d2:	0f 2e       	mov	r0, r31
    20d4:	f0 eb       	ldi	r31, 0xB0	; 176
    20d6:	ef 2e       	mov	r14, r31
    20d8:	fa e8       	ldi	r31, 0x8A	; 138
    20da:	ff 2e       	mov	r15, r31
    20dc:	fb e0       	ldi	r31, 0x0B	; 11
    20de:	0f 2f       	mov	r16, r31
    20e0:	fd e3       	ldi	r31, 0x3D	; 61
    20e2:	1f 2f       	mov	r17, r31
    20e4:	f0 2d       	mov	r31, r0
    20e6:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <fma>
    20ea:	dc 01       	movw	r26, r24
    20ec:	cb 01       	movw	r24, r22
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	9a 83       	std	Y+2, r25	; 0x02
    20f2:	ab 83       	std	Y+3, r26	; 0x03
    20f4:	bc 83       	std	Y+4, r27	; 0x04
	p = fma (p, q, -4.0926382420509999e-2); // -0x1.4f44d841450e8p-5
    20f6:	89 89       	ldd	r24, Y+17	; 0x11
    20f8:	9a 89       	ldd	r25, Y+18	; 0x12
    20fa:	ab 89       	ldd	r26, Y+19	; 0x13
    20fc:	bc 89       	ldd	r27, Y+20	; 0x14
    20fe:	29 85       	ldd	r18, Y+9	; 0x09
    2100:	3a 85       	ldd	r19, Y+10	; 0x0a
    2102:	4b 85       	ldd	r20, Y+11	; 0x0b
    2104:	5c 85       	ldd	r21, Y+12	; 0x0c
    2106:	bc 01       	movw	r22, r24
    2108:	cd 01       	movw	r24, r26
    210a:	0f 2e       	mov	r0, r31
    210c:	fc e6       	ldi	r31, 0x6C	; 108
    210e:	ef 2e       	mov	r14, r31
    2110:	f2 ea       	ldi	r31, 0xA2	; 162
    2112:	ff 2e       	mov	r15, r31
    2114:	f7 e2       	ldi	r31, 0x27	; 39
    2116:	0f 2f       	mov	r16, r31
    2118:	fd eb       	ldi	r31, 0xBD	; 189
    211a:	1f 2f       	mov	r17, r31
    211c:	f0 2d       	mov	r31, r0
    211e:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <fma>
    2122:	dc 01       	movw	r26, r24
    2124:	cb 01       	movw	r24, r22
    2126:	89 8b       	std	Y+17, r24	; 0x11
    2128:	9a 8b       	std	Y+18, r25	; 0x12
    212a:	ab 8b       	std	Y+19, r26	; 0x13
    212c:	bc 8b       	std	Y+20, r27	; 0x14
	t = fma (t, q,  4.6739496199158334e-2); //  0x1.7ee3d3f36bbc6p-5
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	9a 81       	ldd	r25, Y+2	; 0x02
    2132:	ab 81       	ldd	r26, Y+3	; 0x03
    2134:	bc 81       	ldd	r27, Y+4	; 0x04
    2136:	29 85       	ldd	r18, Y+9	; 0x09
    2138:	3a 85       	ldd	r19, Y+10	; 0x0a
    213a:	4b 85       	ldd	r20, Y+11	; 0x0b
    213c:	5c 85       	ldd	r21, Y+12	; 0x0c
    213e:	bc 01       	movw	r22, r24
    2140:	cd 01       	movw	r24, r26
    2142:	0f 2e       	mov	r0, r31
    2144:	fa ee       	ldi	r31, 0xEA	; 234
    2146:	ef 2e       	mov	r14, r31
    2148:	f1 e7       	ldi	r31, 0x71	; 113
    214a:	ff 2e       	mov	r15, r31
    214c:	ff e3       	ldi	r31, 0x3F	; 63
    214e:	0f 2f       	mov	r16, r31
    2150:	fd e3       	ldi	r31, 0x3D	; 61
    2152:	1f 2f       	mov	r17, r31
    2154:	f0 2d       	mov	r31, r0
    2156:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <fma>
    215a:	dc 01       	movw	r26, r24
    215c:	cb 01       	movw	r24, r22
    215e:	89 83       	std	Y+1, r24	; 0x01
    2160:	9a 83       	std	Y+2, r25	; 0x02
    2162:	ab 83       	std	Y+3, r26	; 0x03
    2164:	bc 83       	std	Y+4, r27	; 0x04
	p = fma (p, q, -5.2392330054601366e-2); // -0x1.ad32ae04a9fd8p-5
    2166:	89 89       	ldd	r24, Y+17	; 0x11
    2168:	9a 89       	ldd	r25, Y+18	; 0x12
    216a:	ab 89       	ldd	r26, Y+19	; 0x13
    216c:	bc 89       	ldd	r27, Y+20	; 0x14
    216e:	29 85       	ldd	r18, Y+9	; 0x09
    2170:	3a 85       	ldd	r19, Y+10	; 0x0a
    2172:	4b 85       	ldd	r20, Y+11	; 0x0b
    2174:	5c 85       	ldd	r21, Y+12	; 0x0c
    2176:	bc 01       	movw	r22, r24
    2178:	cd 01       	movw	r24, r26
    217a:	0f 2e       	mov	r0, r31
    217c:	f7 e5       	ldi	r31, 0x57	; 87
    217e:	ef 2e       	mov	r14, r31
    2180:	f9 e9       	ldi	r31, 0x99	; 153
    2182:	ff 2e       	mov	r15, r31
    2184:	f6 e5       	ldi	r31, 0x56	; 86
    2186:	0f 2f       	mov	r16, r31
    2188:	fd eb       	ldi	r31, 0xBD	; 189
    218a:	1f 2f       	mov	r17, r31
    218c:	f0 2d       	mov	r31, r0
    218e:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <fma>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	89 8b       	std	Y+17, r24	; 0x11
    2198:	9a 8b       	std	Y+18, r25	; 0x12
    219a:	ab 8b       	std	Y+19, r26	; 0x13
    219c:	bc 8b       	std	Y+20, r27	; 0x14
	t = fma (t, q,  5.8773077721790683e-2); //  0x1.e17813d669537p-5
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	9a 81       	ldd	r25, Y+2	; 0x02
    21a2:	ab 81       	ldd	r26, Y+3	; 0x03
    21a4:	bc 81       	ldd	r27, Y+4	; 0x04
    21a6:	29 85       	ldd	r18, Y+9	; 0x09
    21a8:	3a 85       	ldd	r19, Y+10	; 0x0a
    21aa:	4b 85       	ldd	r20, Y+11	; 0x0b
    21ac:	5c 85       	ldd	r21, Y+12	; 0x0c
    21ae:	bc 01       	movw	r22, r24
    21b0:	cd 01       	movw	r24, r26
    21b2:	0f 2e       	mov	r0, r31
    21b4:	fa e0       	ldi	r31, 0x0A	; 10
    21b6:	ef 2e       	mov	r14, r31
    21b8:	fc eb       	ldi	r31, 0xBC	; 188
    21ba:	ff 2e       	mov	r15, r31
    21bc:	f0 e7       	ldi	r31, 0x70	; 112
    21be:	0f 2f       	mov	r16, r31
    21c0:	fd e3       	ldi	r31, 0x3D	; 61
    21c2:	1f 2f       	mov	r17, r31
    21c4:	f0 2d       	mov	r31, r0
    21c6:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <fma>
    21ca:	dc 01       	movw	r26, r24
    21cc:	cb 01       	movw	r24, r22
    21ce:	89 83       	std	Y+1, r24	; 0x01
    21d0:	9a 83       	std	Y+2, r25	; 0x02
    21d2:	ab 83       	std	Y+3, r26	; 0x03
    21d4:	bc 83       	std	Y+4, r27	; 0x04
	p = fma (p, q, -6.6658603633512892e-2); // -0x1.11089ca9a5be4p-4
    21d6:	89 89       	ldd	r24, Y+17	; 0x11
    21d8:	9a 89       	ldd	r25, Y+18	; 0x12
    21da:	ab 89       	ldd	r26, Y+19	; 0x13
    21dc:	bc 89       	ldd	r27, Y+20	; 0x14
    21de:	29 85       	ldd	r18, Y+9	; 0x09
    21e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    21e2:	4b 85       	ldd	r20, Y+11	; 0x0b
    21e4:	5c 85       	ldd	r21, Y+12	; 0x0c
    21e6:	bc 01       	movw	r22, r24
    21e8:	cd 01       	movw	r24, r26
    21ea:	0f 2e       	mov	r0, r31
    21ec:	fe e4       	ldi	r31, 0x4E	; 78
    21ee:	ef 2e       	mov	r14, r31
    21f0:	f4 e8       	ldi	r31, 0x84	; 132
    21f2:	ff 2e       	mov	r15, r31
    21f4:	f8 e8       	ldi	r31, 0x88	; 136
    21f6:	0f 2f       	mov	r16, r31
    21f8:	fd eb       	ldi	r31, 0xBD	; 189
    21fa:	1f 2f       	mov	r17, r31
    21fc:	f0 2d       	mov	r31, r0
    21fe:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <fma>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	89 8b       	std	Y+17, r24	; 0x11
    2208:	9a 8b       	std	Y+18, r25	; 0x12
    220a:	ab 8b       	std	Y+19, r26	; 0x13
    220c:	bc 8b       	std	Y+20, r27	; 0x14
	t = fma (t, q,  7.6922129305867892e-2); //  0x1.3b12b2db5173cp-4
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	9a 81       	ldd	r25, Y+2	; 0x02
    2212:	ab 81       	ldd	r26, Y+3	; 0x03
    2214:	bc 81       	ldd	r27, Y+4	; 0x04
    2216:	29 85       	ldd	r18, Y+9	; 0x09
    2218:	3a 85       	ldd	r19, Y+10	; 0x0a
    221a:	4b 85       	ldd	r20, Y+11	; 0x0b
    221c:	5c 85       	ldd	r21, Y+12	; 0x0c
    221e:	bc 01       	movw	r22, r24
    2220:	cd 01       	movw	r24, r26
    2222:	0f 2e       	mov	r0, r31
    2224:	f9 e5       	ldi	r31, 0x59	; 89
    2226:	ef 2e       	mov	r14, r31
    2228:	f9 e8       	ldi	r31, 0x89	; 137
    222a:	ff 2e       	mov	r15, r31
    222c:	fd e9       	ldi	r31, 0x9D	; 157
    222e:	0f 2f       	mov	r16, r31
    2230:	fd e3       	ldi	r31, 0x3D	; 61
    2232:	1f 2f       	mov	r17, r31
    2234:	f0 2d       	mov	r31, r0
    2236:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <fma>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	9a 83       	std	Y+2, r25	; 0x02
    2242:	ab 83       	std	Y+3, r26	; 0x03
    2244:	bc 83       	std	Y+4, r27	; 0x04
	p = fma (p, s, t);
    2246:	89 89       	ldd	r24, Y+17	; 0x11
    2248:	9a 89       	ldd	r25, Y+18	; 0x12
    224a:	ab 89       	ldd	r26, Y+19	; 0x13
    224c:	bc 89       	ldd	r27, Y+20	; 0x14
    224e:	2d 81       	ldd	r18, Y+5	; 0x05
    2250:	3e 81       	ldd	r19, Y+6	; 0x06
    2252:	4f 81       	ldd	r20, Y+7	; 0x07
    2254:	58 85       	ldd	r21, Y+8	; 0x08
    2256:	e9 80       	ldd	r14, Y+1	; 0x01
    2258:	fa 80       	ldd	r15, Y+2	; 0x02
    225a:	0b 81       	ldd	r16, Y+3	; 0x03
    225c:	1c 81       	ldd	r17, Y+4	; 0x04
    225e:	bc 01       	movw	r22, r24
    2260:	cd 01       	movw	r24, r26
    2262:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <fma>
    2266:	dc 01       	movw	r26, r24
    2268:	cb 01       	movw	r24, r22
    226a:	89 8b       	std	Y+17, r24	; 0x11
    226c:	9a 8b       	std	Y+18, r25	; 0x12
    226e:	ab 8b       	std	Y+19, r26	; 0x13
    2270:	bc 8b       	std	Y+20, r27	; 0x14
	p = fma (p, s, -9.0909012354005267e-2); // -0x1.745d022f8dc5fp-4
    2272:	89 89       	ldd	r24, Y+17	; 0x11
    2274:	9a 89       	ldd	r25, Y+18	; 0x12
    2276:	ab 89       	ldd	r26, Y+19	; 0x13
    2278:	bc 89       	ldd	r27, Y+20	; 0x14
    227a:	2d 81       	ldd	r18, Y+5	; 0x05
    227c:	3e 81       	ldd	r19, Y+6	; 0x06
    227e:	4f 81       	ldd	r20, Y+7	; 0x07
    2280:	58 85       	ldd	r21, Y+8	; 0x08
    2282:	bc 01       	movw	r22, r24
    2284:	cd 01       	movw	r24, r26
    2286:	0f 2e       	mov	r0, r31
    2288:	f1 e8       	ldi	r31, 0x81	; 129
    228a:	ef 2e       	mov	r14, r31
    228c:	fe e2       	ldi	r31, 0x2E	; 46
    228e:	ff 2e       	mov	r15, r31
    2290:	fa eb       	ldi	r31, 0xBA	; 186
    2292:	0f 2f       	mov	r16, r31
    2294:	fd eb       	ldi	r31, 0xBD	; 189
    2296:	1f 2f       	mov	r17, r31
    2298:	f0 2d       	mov	r31, r0
    229a:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <fma>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	89 8b       	std	Y+17, r24	; 0x11
    22a4:	9a 8b       	std	Y+18, r25	; 0x12
    22a6:	ab 8b       	std	Y+19, r26	; 0x13
    22a8:	bc 8b       	std	Y+20, r27	; 0x14
	p = fma (p, s,  1.1111110678749421e-1); //  0x1.c71c709dfe925p-4
    22aa:	89 89       	ldd	r24, Y+17	; 0x11
    22ac:	9a 89       	ldd	r25, Y+18	; 0x12
    22ae:	ab 89       	ldd	r26, Y+19	; 0x13
    22b0:	bc 89       	ldd	r27, Y+20	; 0x14
    22b2:	2d 81       	ldd	r18, Y+5	; 0x05
    22b4:	3e 81       	ldd	r19, Y+6	; 0x06
    22b6:	4f 81       	ldd	r20, Y+7	; 0x07
    22b8:	58 85       	ldd	r21, Y+8	; 0x08
    22ba:	bc 01       	movw	r22, r24
    22bc:	cd 01       	movw	r24, r26
    22be:	0f 2e       	mov	r0, r31
    22c0:	f8 e3       	ldi	r31, 0x38	; 56
    22c2:	ef 2e       	mov	r14, r31
    22c4:	fe e8       	ldi	r31, 0x8E	; 142
    22c6:	ff 2e       	mov	r15, r31
    22c8:	f3 ee       	ldi	r31, 0xE3	; 227
    22ca:	0f 2f       	mov	r16, r31
    22cc:	fd e3       	ldi	r31, 0x3D	; 61
    22ce:	1f 2f       	mov	r17, r31
    22d0:	f0 2d       	mov	r31, r0
    22d2:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <fma>
    22d6:	dc 01       	movw	r26, r24
    22d8:	cb 01       	movw	r24, r22
    22da:	89 8b       	std	Y+17, r24	; 0x11
    22dc:	9a 8b       	std	Y+18, r25	; 0x12
    22de:	ab 8b       	std	Y+19, r26	; 0x13
    22e0:	bc 8b       	std	Y+20, r27	; 0x14
	p = fma (p, s, -1.4285714271334810e-1); // -0x1.2492491fa1742p-3
    22e2:	89 89       	ldd	r24, Y+17	; 0x11
    22e4:	9a 89       	ldd	r25, Y+18	; 0x12
    22e6:	ab 89       	ldd	r26, Y+19	; 0x13
    22e8:	bc 89       	ldd	r27, Y+20	; 0x14
    22ea:	2d 81       	ldd	r18, Y+5	; 0x05
    22ec:	3e 81       	ldd	r19, Y+6	; 0x06
    22ee:	4f 81       	ldd	r20, Y+7	; 0x07
    22f0:	58 85       	ldd	r21, Y+8	; 0x08
    22f2:	bc 01       	movw	r22, r24
    22f4:	cd 01       	movw	r24, r26
    22f6:	0f 2e       	mov	r0, r31
    22f8:	f5 e2       	ldi	r31, 0x25	; 37
    22fa:	ef 2e       	mov	r14, r31
    22fc:	f9 e4       	ldi	r31, 0x49	; 73
    22fe:	ff 2e       	mov	r15, r31
    2300:	f2 e1       	ldi	r31, 0x12	; 18
    2302:	0f 2f       	mov	r16, r31
    2304:	fe eb       	ldi	r31, 0xBE	; 190
    2306:	1f 2f       	mov	r17, r31
    2308:	f0 2d       	mov	r31, r0
    230a:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <fma>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	89 8b       	std	Y+17, r24	; 0x11
    2314:	9a 8b       	std	Y+18, r25	; 0x12
    2316:	ab 8b       	std	Y+19, r26	; 0x13
    2318:	bc 8b       	std	Y+20, r27	; 0x14
	p = fma (p, s,  1.9999999999755005e-1); //  0x1.99999999840cdp-3
    231a:	89 89       	ldd	r24, Y+17	; 0x11
    231c:	9a 89       	ldd	r25, Y+18	; 0x12
    231e:	ab 89       	ldd	r26, Y+19	; 0x13
    2320:	bc 89       	ldd	r27, Y+20	; 0x14
    2322:	2d 81       	ldd	r18, Y+5	; 0x05
    2324:	3e 81       	ldd	r19, Y+6	; 0x06
    2326:	4f 81       	ldd	r20, Y+7	; 0x07
    2328:	58 85       	ldd	r21, Y+8	; 0x08
    232a:	bc 01       	movw	r22, r24
    232c:	cd 01       	movw	r24, r26
    232e:	0f 2e       	mov	r0, r31
    2330:	fd ec       	ldi	r31, 0xCD	; 205
    2332:	ef 2e       	mov	r14, r31
    2334:	fc ec       	ldi	r31, 0xCC	; 204
    2336:	ff 2e       	mov	r15, r31
    2338:	fc e4       	ldi	r31, 0x4C	; 76
    233a:	0f 2f       	mov	r16, r31
    233c:	fe e3       	ldi	r31, 0x3E	; 62
    233e:	1f 2f       	mov	r17, r31
    2340:	f0 2d       	mov	r31, r0
    2342:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <fma>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	89 8b       	std	Y+17, r24	; 0x11
    234c:	9a 8b       	std	Y+18, r25	; 0x12
    234e:	ab 8b       	std	Y+19, r26	; 0x13
    2350:	bc 8b       	std	Y+20, r27	; 0x14
	p = fma (p, s, -3.3333333333331838e-1); // -0x1.5555555555448p-2
    2352:	89 89       	ldd	r24, Y+17	; 0x11
    2354:	9a 89       	ldd	r25, Y+18	; 0x12
    2356:	ab 89       	ldd	r26, Y+19	; 0x13
    2358:	bc 89       	ldd	r27, Y+20	; 0x14
    235a:	2d 81       	ldd	r18, Y+5	; 0x05
    235c:	3e 81       	ldd	r19, Y+6	; 0x06
    235e:	4f 81       	ldd	r20, Y+7	; 0x07
    2360:	58 85       	ldd	r21, Y+8	; 0x08
    2362:	bc 01       	movw	r22, r24
    2364:	cd 01       	movw	r24, r26
    2366:	0f 2e       	mov	r0, r31
    2368:	fb ea       	ldi	r31, 0xAB	; 171
    236a:	ef 2e       	mov	r14, r31
    236c:	fa ea       	ldi	r31, 0xAA	; 170
    236e:	ff 2e       	mov	r15, r31
    2370:	fa ea       	ldi	r31, 0xAA	; 170
    2372:	0f 2f       	mov	r16, r31
    2374:	fe eb       	ldi	r31, 0xBE	; 190
    2376:	1f 2f       	mov	r17, r31
    2378:	f0 2d       	mov	r31, r0
    237a:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <fma>
    237e:	dc 01       	movw	r26, r24
    2380:	cb 01       	movw	r24, r22
    2382:	89 8b       	std	Y+17, r24	; 0x11
    2384:	9a 8b       	std	Y+18, r25	; 0x12
    2386:	ab 8b       	std	Y+19, r26	; 0x13
    2388:	bc 8b       	std	Y+20, r27	; 0x14
	p = fma (p * s, a, a);
    238a:	69 89       	ldd	r22, Y+17	; 0x11
    238c:	7a 89       	ldd	r23, Y+18	; 0x12
    238e:	8b 89       	ldd	r24, Y+19	; 0x13
    2390:	9c 89       	ldd	r25, Y+20	; 0x14
    2392:	2d 81       	ldd	r18, Y+5	; 0x05
    2394:	3e 81       	ldd	r19, Y+6	; 0x06
    2396:	4f 81       	ldd	r20, Y+7	; 0x07
    2398:	58 85       	ldd	r21, Y+8	; 0x08
    239a:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	29 8d       	ldd	r18, Y+25	; 0x19
    23a4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    23a6:	4b 8d       	ldd	r20, Y+27	; 0x1b
    23a8:	5c 8d       	ldd	r21, Y+28	; 0x1c
    23aa:	e9 8c       	ldd	r14, Y+25	; 0x19
    23ac:	fa 8c       	ldd	r15, Y+26	; 0x1a
    23ae:	0b 8d       	ldd	r16, Y+27	; 0x1b
    23b0:	1c 8d       	ldd	r17, Y+28	; 0x1c
    23b2:	bc 01       	movw	r22, r24
    23b4:	cd 01       	movw	r24, r26
    23b6:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <fma>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	89 8b       	std	Y+17, r24	; 0x11
    23c0:	9a 8b       	std	Y+18, r25	; 0x12
    23c2:	ab 8b       	std	Y+19, r26	; 0x13
    23c4:	bc 8b       	std	Y+20, r27	; 0x14
	/* back substitution in accordance with argument reduction */
	/* double-precision factorization of PI/2 courtesy of Tor Myklebust */
	r = (z > 1.0) ? fma (0.93282184640716537, 1.6839188885261840, -p) : p;
    23c6:	6d 89       	ldd	r22, Y+21	; 0x15
    23c8:	7e 89       	ldd	r23, Y+22	; 0x16
    23ca:	8f 89       	ldd	r24, Y+23	; 0x17
    23cc:	98 8d       	ldd	r25, Y+24	; 0x18
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e8       	ldi	r20, 0x80	; 128
    23d4:	5f e3       	ldi	r21, 0x3F	; 63
    23d6:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    23da:	18 16       	cp	r1, r24
    23dc:	cc f4       	brge	.+50     	; 0x2410 <_atan+0x5ae>
    23de:	89 89       	ldd	r24, Y+17	; 0x11
    23e0:	9a 89       	ldd	r25, Y+18	; 0x12
    23e2:	ab 89       	ldd	r26, Y+19	; 0x13
    23e4:	bc 89       	ldd	r27, Y+20	; 0x14
    23e6:	7c 01       	movw	r14, r24
    23e8:	8d 01       	movw	r16, r26
    23ea:	17 fb       	bst	r17, 7
    23ec:	10 95       	com	r17
    23ee:	17 f9       	bld	r17, 7
    23f0:	10 95       	com	r17
    23f2:	6a e6       	ldi	r22, 0x6A	; 106
    23f4:	7d ec       	ldi	r23, 0xCD	; 205
    23f6:	8e e6       	ldi	r24, 0x6E	; 110
    23f8:	9f e3       	ldi	r25, 0x3F	; 63
    23fa:	27 ea       	ldi	r18, 0xA7	; 167
    23fc:	3a e8       	ldi	r19, 0x8A	; 138
    23fe:	47 ed       	ldi	r20, 0xD7	; 215
    2400:	5f e3       	ldi	r21, 0x3F	; 63
    2402:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <fma>
    2406:	6d a3       	std	Y+37, r22	; 0x25
    2408:	7e a3       	std	Y+38, r23	; 0x26
    240a:	8f a3       	std	Y+39, r24	; 0x27
    240c:	98 a7       	std	Y+40, r25	; 0x28
    240e:	08 c0       	rjmp	.+16     	; 0x2420 <_atan+0x5be>
    2410:	69 89       	ldd	r22, Y+17	; 0x11
    2412:	7a 89       	ldd	r23, Y+18	; 0x12
    2414:	8b 89       	ldd	r24, Y+19	; 0x13
    2416:	9c 89       	ldd	r25, Y+20	; 0x14
    2418:	6d a3       	std	Y+37, r22	; 0x25
    241a:	7e a3       	std	Y+38, r23	; 0x26
    241c:	8f a3       	std	Y+39, r24	; 0x27
    241e:	98 a7       	std	Y+40, r25	; 0x28
    2420:	8d a1       	ldd	r24, Y+37	; 0x25
    2422:	9e a1       	ldd	r25, Y+38	; 0x26
    2424:	af a1       	ldd	r26, Y+39	; 0x27
    2426:	b8 a5       	ldd	r27, Y+40	; 0x28
    2428:	8d 87       	std	Y+13, r24	; 0x0d
    242a:	9e 87       	std	Y+14, r25	; 0x0e
    242c:	af 87       	std	Y+15, r26	; 0x0f
    242e:	b8 8b       	std	Y+16, r27	; 0x10
	return copysign (r, x) * (180/M_PI);
    2430:	88 a1       	ldd	r24, Y+32	; 0x20
    2432:	28 2f       	mov	r18, r24
    2434:	20 78       	andi	r18, 0x80	; 128
    2436:	8d 85       	ldd	r24, Y+13	; 0x0d
    2438:	9e 85       	ldd	r25, Y+14	; 0x0e
    243a:	af 85       	ldd	r26, Y+15	; 0x0f
    243c:	b8 89       	ldd	r27, Y+16	; 0x10
    243e:	ac 01       	movw	r20, r24
    2440:	bd 01       	movw	r22, r26
    2442:	7f 77       	andi	r23, 0x7F	; 127
    2444:	49 a3       	std	Y+33, r20	; 0x21
    2446:	5a a3       	std	Y+34, r21	; 0x22
    2448:	6b a3       	std	Y+35, r22	; 0x23
    244a:	7c a3       	std	Y+36, r23	; 0x24
    244c:	22 23       	and	r18, r18
    244e:	49 f0       	breq	.+18     	; 0x2462 <_atan+0x600>
    2450:	69 a1       	ldd	r22, Y+33	; 0x21
    2452:	7a a1       	ldd	r23, Y+34	; 0x22
    2454:	8b a1       	ldd	r24, Y+35	; 0x23
    2456:	9c a1       	ldd	r25, Y+36	; 0x24
    2458:	90 58       	subi	r25, 0x80	; 128
    245a:	69 a3       	std	Y+33, r22	; 0x21
    245c:	7a a3       	std	Y+34, r23	; 0x22
    245e:	8b a3       	std	Y+35, r24	; 0x23
    2460:	9c a3       	std	Y+36, r25	; 0x24
    2462:	69 a1       	ldd	r22, Y+33	; 0x21
    2464:	7a a1       	ldd	r23, Y+34	; 0x22
    2466:	8b a1       	ldd	r24, Y+35	; 0x23
    2468:	9c a1       	ldd	r25, Y+36	; 0x24
    246a:	20 ee       	ldi	r18, 0xE0	; 224
    246c:	3e e2       	ldi	r19, 0x2E	; 46
    246e:	45 e6       	ldi	r20, 0x65	; 101
    2470:	52 e4       	ldi	r21, 0x42	; 66
    2472:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	8d a7       	std	Y+45, r24	; 0x2d
    247c:	9e a7       	std	Y+46, r25	; 0x2e
    247e:	af a7       	std	Y+47, r26	; 0x2f
    2480:	b8 ab       	std	Y+48, r27	; 0x30
    2482:	8d a5       	ldd	r24, Y+45	; 0x2d
    2484:	9e a5       	ldd	r25, Y+46	; 0x2e
    2486:	af a5       	ldd	r26, Y+47	; 0x2f
    2488:	b8 a9       	ldd	r27, Y+48	; 0x30
}
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	e0 96       	adiw	r28, 0x30	; 48
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	f8 94       	cli
    2494:	de bf       	out	0x3e, r29	; 62
    2496:	0f be       	out	0x3f, r0	; 63
    2498:	cd bf       	out	0x3d, r28	; 61
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	1f 91       	pop	r17
    24a0:	0f 91       	pop	r16
    24a2:	ff 90       	pop	r15
    24a4:	ef 90       	pop	r14
    24a6:	08 95       	ret

000024a8 <_asin>:

double _asin(double x)
{
    24a8:	df 93       	push	r29
    24aa:	cf 93       	push	r28
    24ac:	00 d0       	rcall	.+0      	; 0x24ae <_asin+0x6>
    24ae:	00 d0       	rcall	.+0      	; 0x24b0 <_asin+0x8>
    24b0:	cd b7       	in	r28, 0x3d	; 61
    24b2:	de b7       	in	r29, 0x3e	; 62
    24b4:	69 83       	std	Y+1, r22	; 0x01
    24b6:	7a 83       	std	Y+2, r23	; 0x02
    24b8:	8b 83       	std	Y+3, r24	; 0x03
    24ba:	9c 83       	std	Y+4, r25	; 0x04
	return (_atan(x/sqrt(1-(x*x))));
    24bc:	69 81       	ldd	r22, Y+1	; 0x01
    24be:	7a 81       	ldd	r23, Y+2	; 0x02
    24c0:	8b 81       	ldd	r24, Y+3	; 0x03
    24c2:	9c 81       	ldd	r25, Y+4	; 0x04
    24c4:	29 81       	ldd	r18, Y+1	; 0x01
    24c6:	3a 81       	ldd	r19, Y+2	; 0x02
    24c8:	4b 81       	ldd	r20, Y+3	; 0x03
    24ca:	5c 81       	ldd	r21, Y+4	; 0x04
    24cc:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    24d0:	dc 01       	movw	r26, r24
    24d2:	cb 01       	movw	r24, r22
    24d4:	9c 01       	movw	r18, r24
    24d6:	ad 01       	movw	r20, r26
    24d8:	60 e0       	ldi	r22, 0x00	; 0
    24da:	70 e0       	ldi	r23, 0x00	; 0
    24dc:	80 e8       	ldi	r24, 0x80	; 128
    24de:	9f e3       	ldi	r25, 0x3F	; 63
    24e0:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	bc 01       	movw	r22, r24
    24ea:	cd 01       	movw	r24, r26
    24ec:	0e 94 7f 3d 	call	0x7afe	; 0x7afe <sqrt>
    24f0:	9b 01       	movw	r18, r22
    24f2:	ac 01       	movw	r20, r24
    24f4:	69 81       	ldd	r22, Y+1	; 0x01
    24f6:	7a 81       	ldd	r23, Y+2	; 0x02
    24f8:	8b 81       	ldd	r24, Y+3	; 0x03
    24fa:	9c 81       	ldd	r25, Y+4	; 0x04
    24fc:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    2500:	dc 01       	movw	r26, r24
    2502:	cb 01       	movw	r24, r22
    2504:	bc 01       	movw	r22, r24
    2506:	cd 01       	movw	r24, r26
    2508:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_atan>
    250c:	dc 01       	movw	r26, r24
    250e:	cb 01       	movw	r24, r22
}
    2510:	bc 01       	movw	r22, r24
    2512:	cd 01       	movw	r24, r26
    2514:	0f 90       	pop	r0
    2516:	0f 90       	pop	r0
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	cf 91       	pop	r28
    251e:	df 91       	pop	r29
    2520:	08 95       	ret

00002522 <_acos>:

double _acos(double x)
{
    2522:	df 93       	push	r29
    2524:	cf 93       	push	r28
    2526:	00 d0       	rcall	.+0      	; 0x2528 <_acos+0x6>
    2528:	00 d0       	rcall	.+0      	; 0x252a <_acos+0x8>
    252a:	cd b7       	in	r28, 0x3d	; 61
    252c:	de b7       	in	r29, 0x3e	; 62
    252e:	69 83       	std	Y+1, r22	; 0x01
    2530:	7a 83       	std	Y+2, r23	; 0x02
    2532:	8b 83       	std	Y+3, r24	; 0x03
    2534:	9c 83       	std	Y+4, r25	; 0x04
	return 180*0.5 - _asin(x);
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	9a 81       	ldd	r25, Y+2	; 0x02
    253a:	ab 81       	ldd	r26, Y+3	; 0x03
    253c:	bc 81       	ldd	r27, Y+4	; 0x04
    253e:	bc 01       	movw	r22, r24
    2540:	cd 01       	movw	r24, r26
    2542:	0e 94 54 12 	call	0x24a8	; 0x24a8 <_asin>
    2546:	9b 01       	movw	r18, r22
    2548:	ac 01       	movw	r20, r24
    254a:	60 e0       	ldi	r22, 0x00	; 0
    254c:	70 e0       	ldi	r23, 0x00	; 0
    254e:	84 eb       	ldi	r24, 0xB4	; 180
    2550:	92 e4       	ldi	r25, 0x42	; 66
    2552:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
}
    255a:	bc 01       	movw	r22, r24
    255c:	cd 01       	movw	r24, r26
    255e:	0f 90       	pop	r0
    2560:	0f 90       	pop	r0
    2562:	0f 90       	pop	r0
    2564:	0f 90       	pop	r0
    2566:	cf 91       	pop	r28
    2568:	df 91       	pop	r29
    256a:	08 95       	ret

0000256c <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void)
{
    256c:	df 93       	push	r29
    256e:	cf 93       	push	r28
    2570:	0f 92       	push	r0
    2572:	cd b7       	in	r28, 0x3d	; 61
    2574:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	89 83       	std	Y+1, r24	; 0x01

	DDRA = CONC(PA_PIN7_DIR, PA_PIN6_DIR, PA_PIN5_DIR, PA_PIN4_DIR, PA_PIN3_DIR, PA_PIN2_DIR, PA_PIN1_DIR, PA_PIN0_DIR);
    257a:	ea e3       	ldi	r30, 0x3A	; 58
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	8f ef       	ldi	r24, 0xFF	; 255
    2580:	80 83       	st	Z, r24
	DDRB = CONC(PB_PIN7_DIR, PB_PIN6_DIR, PB_PIN5_DIR, PB_PIN4_DIR, PB_PIN3_DIR, PB_PIN2_DIR, PB_PIN1_DIR, PB_PIN0_DIR);
    2582:	e7 e3       	ldi	r30, 0x37	; 55
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	8f ef       	ldi	r24, 0xFF	; 255
    2588:	80 83       	st	Z, r24
	DDRC = CONC(PC_PIN7_DIR, PC_PIN6_DIR, PC_PIN5_DIR, PC_PIN4_DIR, PC_PIN3_DIR, PC_PIN2_DIR, PC_PIN1_DIR, PC_PIN0_DIR);
    258a:	e4 e3       	ldi	r30, 0x34	; 52
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	8f ef       	ldi	r24, 0xFF	; 255
    2590:	80 83       	st	Z, r24
	DDRD = CONC(PD_PIN7_DIR, PD_PIN6_DIR, PD_PIN5_DIR, PD_PIN4_DIR, PD_PIN3_DIR, PD_PIN2_DIR, PD_PIN1_DIR, PD_PIN0_DIR);
    2592:	e1 e3       	ldi	r30, 0x31	; 49
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	8f ef       	ldi	r24, 0xFF	; 255
    2598:	80 83       	st	Z, r24

	PORTA = CONC(PA_PIN7_VAL, PA_PIN6_VAL, PA_PIN5_VAL, PA_PIN4_VAL, PA_PIN3_VAL, PA_PIN2_VAL, PA_PIN1_VAL, PA_PIN0_VAL);
    259a:	eb e3       	ldi	r30, 0x3B	; 59
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	10 82       	st	Z, r1
	PORTB = CONC(PB_PIN7_VAL, PB_PIN6_VAL, PB_PIN5_VAL, PB_PIN4_VAL, PB_PIN3_VAL, PB_PIN2_VAL, PB_PIN1_VAL, PB_PIN0_VAL);
    25a0:	e8 e3       	ldi	r30, 0x38	; 56
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	10 82       	st	Z, r1
	PORTC = CONC(PC_PIN7_VAL, PC_PIN6_VAL, PC_PIN5_VAL, PC_PIN4_VAL, PC_PIN3_VAL, PC_PIN2_VAL, PC_PIN1_VAL, PC_PIN0_VAL);
    25a6:	e5 e3       	ldi	r30, 0x35	; 53
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	84 e0       	ldi	r24, 0x04	; 4
    25ac:	80 83       	st	Z, r24
	PORTD = CONC(PD_PIN7_VAL, PD_PIN6_VAL, PD_PIN5_VAL, PD_PIN4_VAL, PD_PIN3_VAL, PD_PIN2_VAL, PD_PIN1_VAL, PD_PIN0_VAL);
    25ae:	e2 e3       	ldi	r30, 0x32	; 50
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	8f ef       	ldi	r24, 0xFF	; 255
    25b4:	80 83       	st	Z, r24

	Local_enuErrorState = ES_OK;
    25b6:	19 82       	std	Y+1, r1	; 0x01

	return Local_enuErrorState;
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
}
    25ba:	0f 90       	pop	r0
    25bc:	cf 91       	pop	r28
    25be:	df 91       	pop	r29
    25c0:	08 95       	ret

000025c2 <DIO_enuSetPinDirection>:



ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID, u8 Copy_u8PinID ,u8 Copy_u8Value)
{
    25c2:	df 93       	push	r29
    25c4:	cf 93       	push	r28
    25c6:	00 d0       	rcall	.+0      	; 0x25c8 <DIO_enuSetPinDirection+0x6>
    25c8:	00 d0       	rcall	.+0      	; 0x25ca <DIO_enuSetPinDirection+0x8>
    25ca:	00 d0       	rcall	.+0      	; 0x25cc <DIO_enuSetPinDirection+0xa>
    25cc:	cd b7       	in	r28, 0x3d	; 61
    25ce:	de b7       	in	r29, 0x3e	; 62
    25d0:	8a 83       	std	Y+2, r24	; 0x02
    25d2:	6b 83       	std	Y+3, r22	; 0x03
    25d4:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    25da:	8a 81       	ldd	r24, Y+2	; 0x02
    25dc:	84 30       	cpi	r24, 0x04	; 4
    25de:	08 f0       	brcs	.+2      	; 0x25e2 <DIO_enuSetPinDirection+0x20>
    25e0:	d0 c0       	rjmp	.+416    	; 0x2782 <DIO_enuSetPinDirection+0x1c0>
    25e2:	8b 81       	ldd	r24, Y+3	; 0x03
    25e4:	88 30       	cpi	r24, 0x08	; 8
    25e6:	08 f0       	brcs	.+2      	; 0x25ea <DIO_enuSetPinDirection+0x28>
    25e8:	cc c0       	rjmp	.+408    	; 0x2782 <DIO_enuSetPinDirection+0x1c0>
    25ea:	8c 81       	ldd	r24, Y+4	; 0x04
    25ec:	82 30       	cpi	r24, 0x02	; 2
    25ee:	08 f0       	brcs	.+2      	; 0x25f2 <DIO_enuSetPinDirection+0x30>
    25f0:	c8 c0       	rjmp	.+400    	; 0x2782 <DIO_enuSetPinDirection+0x1c0>
	{
		switch(Copy_u8PortID)
    25f2:	8a 81       	ldd	r24, Y+2	; 0x02
    25f4:	28 2f       	mov	r18, r24
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	3e 83       	std	Y+6, r19	; 0x06
    25fa:	2d 83       	std	Y+5, r18	; 0x05
    25fc:	6d 81       	ldd	r22, Y+5	; 0x05
    25fe:	7e 81       	ldd	r23, Y+6	; 0x06
    2600:	61 30       	cpi	r22, 0x01	; 1
    2602:	71 05       	cpc	r23, r1
    2604:	09 f4       	brne	.+2      	; 0x2608 <DIO_enuSetPinDirection+0x46>
    2606:	41 c0       	rjmp	.+130    	; 0x268a <DIO_enuSetPinDirection+0xc8>
    2608:	8d 81       	ldd	r24, Y+5	; 0x05
    260a:	9e 81       	ldd	r25, Y+6	; 0x06
    260c:	82 30       	cpi	r24, 0x02	; 2
    260e:	91 05       	cpc	r25, r1
    2610:	34 f4       	brge	.+12     	; 0x261e <DIO_enuSetPinDirection+0x5c>
    2612:	2d 81       	ldd	r18, Y+5	; 0x05
    2614:	3e 81       	ldd	r19, Y+6	; 0x06
    2616:	21 15       	cp	r18, r1
    2618:	31 05       	cpc	r19, r1
    261a:	71 f0       	breq	.+28     	; 0x2638 <DIO_enuSetPinDirection+0x76>
    261c:	b0 c0       	rjmp	.+352    	; 0x277e <DIO_enuSetPinDirection+0x1bc>
    261e:	6d 81       	ldd	r22, Y+5	; 0x05
    2620:	7e 81       	ldd	r23, Y+6	; 0x06
    2622:	62 30       	cpi	r22, 0x02	; 2
    2624:	71 05       	cpc	r23, r1
    2626:	09 f4       	brne	.+2      	; 0x262a <DIO_enuSetPinDirection+0x68>
    2628:	59 c0       	rjmp	.+178    	; 0x26dc <DIO_enuSetPinDirection+0x11a>
    262a:	8d 81       	ldd	r24, Y+5	; 0x05
    262c:	9e 81       	ldd	r25, Y+6	; 0x06
    262e:	83 30       	cpi	r24, 0x03	; 3
    2630:	91 05       	cpc	r25, r1
    2632:	09 f4       	brne	.+2      	; 0x2636 <DIO_enuSetPinDirection+0x74>
    2634:	7c c0       	rjmp	.+248    	; 0x272e <DIO_enuSetPinDirection+0x16c>
    2636:	a3 c0       	rjmp	.+326    	; 0x277e <DIO_enuSetPinDirection+0x1bc>
		{
		case DIO_PORTA:
			DDRA &=~(DIO_MASK_BIT << Copy_u8PinID);
    2638:	aa e3       	ldi	r26, 0x3A	; 58
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	ea e3       	ldi	r30, 0x3A	; 58
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	48 2f       	mov	r20, r24
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	28 2f       	mov	r18, r24
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	02 c0       	rjmp	.+4      	; 0x2654 <DIO_enuSetPinDirection+0x92>
    2650:	88 0f       	add	r24, r24
    2652:	99 1f       	adc	r25, r25
    2654:	2a 95       	dec	r18
    2656:	e2 f7       	brpl	.-8      	; 0x2650 <DIO_enuSetPinDirection+0x8e>
    2658:	80 95       	com	r24
    265a:	84 23       	and	r24, r20
    265c:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Value << Copy_u8PinID);
    265e:	aa e3       	ldi	r26, 0x3A	; 58
    2660:	b0 e0       	ldi	r27, 0x00	; 0
    2662:	ea e3       	ldi	r30, 0x3A	; 58
    2664:	f0 e0       	ldi	r31, 0x00	; 0
    2666:	80 81       	ld	r24, Z
    2668:	48 2f       	mov	r20, r24
    266a:	8c 81       	ldd	r24, Y+4	; 0x04
    266c:	28 2f       	mov	r18, r24
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	88 2f       	mov	r24, r24
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	b9 01       	movw	r22, r18
    2678:	02 c0       	rjmp	.+4      	; 0x267e <DIO_enuSetPinDirection+0xbc>
    267a:	66 0f       	add	r22, r22
    267c:	77 1f       	adc	r23, r23
    267e:	8a 95       	dec	r24
    2680:	e2 f7       	brpl	.-8      	; 0x267a <DIO_enuSetPinDirection+0xb8>
    2682:	cb 01       	movw	r24, r22
    2684:	84 2b       	or	r24, r20
    2686:	8c 93       	st	X, r24
    2688:	7a c0       	rjmp	.+244    	; 0x277e <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_PORTB:
			DDRB &=~(DIO_MASK_BIT << Copy_u8PinID);
    268a:	a7 e3       	ldi	r26, 0x37	; 55
    268c:	b0 e0       	ldi	r27, 0x00	; 0
    268e:	e7 e3       	ldi	r30, 0x37	; 55
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	80 81       	ld	r24, Z
    2694:	48 2f       	mov	r20, r24
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	28 2f       	mov	r18, r24
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	02 c0       	rjmp	.+4      	; 0x26a6 <DIO_enuSetPinDirection+0xe4>
    26a2:	88 0f       	add	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	2a 95       	dec	r18
    26a8:	e2 f7       	brpl	.-8      	; 0x26a2 <DIO_enuSetPinDirection+0xe0>
    26aa:	80 95       	com	r24
    26ac:	84 23       	and	r24, r20
    26ae:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Value << Copy_u8PinID);
    26b0:	a7 e3       	ldi	r26, 0x37	; 55
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	e7 e3       	ldi	r30, 0x37	; 55
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	48 2f       	mov	r20, r24
    26bc:	8c 81       	ldd	r24, Y+4	; 0x04
    26be:	28 2f       	mov	r18, r24
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	88 2f       	mov	r24, r24
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	b9 01       	movw	r22, r18
    26ca:	02 c0       	rjmp	.+4      	; 0x26d0 <DIO_enuSetPinDirection+0x10e>
    26cc:	66 0f       	add	r22, r22
    26ce:	77 1f       	adc	r23, r23
    26d0:	8a 95       	dec	r24
    26d2:	e2 f7       	brpl	.-8      	; 0x26cc <DIO_enuSetPinDirection+0x10a>
    26d4:	cb 01       	movw	r24, r22
    26d6:	84 2b       	or	r24, r20
    26d8:	8c 93       	st	X, r24
    26da:	51 c0       	rjmp	.+162    	; 0x277e <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_PORTC:
			DDRC &=~(DIO_MASK_BIT << Copy_u8PinID);
    26dc:	a4 e3       	ldi	r26, 0x34	; 52
    26de:	b0 e0       	ldi	r27, 0x00	; 0
    26e0:	e4 e3       	ldi	r30, 0x34	; 52
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	48 2f       	mov	r20, r24
    26e8:	8b 81       	ldd	r24, Y+3	; 0x03
    26ea:	28 2f       	mov	r18, r24
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	02 c0       	rjmp	.+4      	; 0x26f8 <DIO_enuSetPinDirection+0x136>
    26f4:	88 0f       	add	r24, r24
    26f6:	99 1f       	adc	r25, r25
    26f8:	2a 95       	dec	r18
    26fa:	e2 f7       	brpl	.-8      	; 0x26f4 <DIO_enuSetPinDirection+0x132>
    26fc:	80 95       	com	r24
    26fe:	84 23       	and	r24, r20
    2700:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Value << Copy_u8PinID);
    2702:	a4 e3       	ldi	r26, 0x34	; 52
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	e4 e3       	ldi	r30, 0x34	; 52
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	48 2f       	mov	r20, r24
    270e:	8c 81       	ldd	r24, Y+4	; 0x04
    2710:	28 2f       	mov	r18, r24
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	88 2f       	mov	r24, r24
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	b9 01       	movw	r22, r18
    271c:	02 c0       	rjmp	.+4      	; 0x2722 <DIO_enuSetPinDirection+0x160>
    271e:	66 0f       	add	r22, r22
    2720:	77 1f       	adc	r23, r23
    2722:	8a 95       	dec	r24
    2724:	e2 f7       	brpl	.-8      	; 0x271e <DIO_enuSetPinDirection+0x15c>
    2726:	cb 01       	movw	r24, r22
    2728:	84 2b       	or	r24, r20
    272a:	8c 93       	st	X, r24
    272c:	28 c0       	rjmp	.+80     	; 0x277e <DIO_enuSetPinDirection+0x1bc>
			break;
		case DIO_PORTD:
			DDRD &=~(DIO_MASK_BIT << Copy_u8PinID);
    272e:	a1 e3       	ldi	r26, 0x31	; 49
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	e1 e3       	ldi	r30, 0x31	; 49
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	48 2f       	mov	r20, r24
    273a:	8b 81       	ldd	r24, Y+3	; 0x03
    273c:	28 2f       	mov	r18, r24
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	90 e0       	ldi	r25, 0x00	; 0
    2744:	02 c0       	rjmp	.+4      	; 0x274a <DIO_enuSetPinDirection+0x188>
    2746:	88 0f       	add	r24, r24
    2748:	99 1f       	adc	r25, r25
    274a:	2a 95       	dec	r18
    274c:	e2 f7       	brpl	.-8      	; 0x2746 <DIO_enuSetPinDirection+0x184>
    274e:	80 95       	com	r24
    2750:	84 23       	and	r24, r20
    2752:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Value << Copy_u8PinID);
    2754:	a1 e3       	ldi	r26, 0x31	; 49
    2756:	b0 e0       	ldi	r27, 0x00	; 0
    2758:	e1 e3       	ldi	r30, 0x31	; 49
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	80 81       	ld	r24, Z
    275e:	48 2f       	mov	r20, r24
    2760:	8c 81       	ldd	r24, Y+4	; 0x04
    2762:	28 2f       	mov	r18, r24
    2764:	30 e0       	ldi	r19, 0x00	; 0
    2766:	8b 81       	ldd	r24, Y+3	; 0x03
    2768:	88 2f       	mov	r24, r24
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	b9 01       	movw	r22, r18
    276e:	02 c0       	rjmp	.+4      	; 0x2774 <DIO_enuSetPinDirection+0x1b2>
    2770:	66 0f       	add	r22, r22
    2772:	77 1f       	adc	r23, r23
    2774:	8a 95       	dec	r24
    2776:	e2 f7       	brpl	.-8      	; 0x2770 <DIO_enuSetPinDirection+0x1ae>
    2778:	cb 01       	movw	r24, r22
    277a:	84 2b       	or	r24, r20
    277c:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    277e:	19 82       	std	Y+1, r1	; 0x01
    2780:	02 c0       	rjmp	.+4      	; 0x2786 <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2782:	83 e0       	ldi	r24, 0x03	; 3
    2784:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    2786:	89 81       	ldd	r24, Y+1	; 0x01
}
    2788:	26 96       	adiw	r28, 0x06	; 6
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	de bf       	out	0x3e, r29	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	cd bf       	out	0x3d, r28	; 61
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8Value)
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	00 d0       	rcall	.+0      	; 0x27a0 <DIO_enuSetPinValue+0x6>
    27a0:	00 d0       	rcall	.+0      	; 0x27a2 <DIO_enuSetPinValue+0x8>
    27a2:	00 d0       	rcall	.+0      	; 0x27a4 <DIO_enuSetPinValue+0xa>
    27a4:	cd b7       	in	r28, 0x3d	; 61
    27a6:	de b7       	in	r29, 0x3e	; 62
    27a8:	8a 83       	std	Y+2, r24	; 0x02
    27aa:	6b 83       	std	Y+3, r22	; 0x03
    27ac:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7 && Copy_u8Value <= OUTPUT)
    27b2:	8a 81       	ldd	r24, Y+2	; 0x02
    27b4:	84 30       	cpi	r24, 0x04	; 4
    27b6:	08 f0       	brcs	.+2      	; 0x27ba <DIO_enuSetPinValue+0x20>
    27b8:	d0 c0       	rjmp	.+416    	; 0x295a <DIO_enuSetPinValue+0x1c0>
    27ba:	8b 81       	ldd	r24, Y+3	; 0x03
    27bc:	88 30       	cpi	r24, 0x08	; 8
    27be:	08 f0       	brcs	.+2      	; 0x27c2 <DIO_enuSetPinValue+0x28>
    27c0:	cc c0       	rjmp	.+408    	; 0x295a <DIO_enuSetPinValue+0x1c0>
    27c2:	8c 81       	ldd	r24, Y+4	; 0x04
    27c4:	82 30       	cpi	r24, 0x02	; 2
    27c6:	08 f0       	brcs	.+2      	; 0x27ca <DIO_enuSetPinValue+0x30>
    27c8:	c8 c0       	rjmp	.+400    	; 0x295a <DIO_enuSetPinValue+0x1c0>
	{
		switch(Copy_u8PortID)
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	28 2f       	mov	r18, r24
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	3e 83       	std	Y+6, r19	; 0x06
    27d2:	2d 83       	std	Y+5, r18	; 0x05
    27d4:	6d 81       	ldd	r22, Y+5	; 0x05
    27d6:	7e 81       	ldd	r23, Y+6	; 0x06
    27d8:	61 30       	cpi	r22, 0x01	; 1
    27da:	71 05       	cpc	r23, r1
    27dc:	09 f4       	brne	.+2      	; 0x27e0 <DIO_enuSetPinValue+0x46>
    27de:	41 c0       	rjmp	.+130    	; 0x2862 <DIO_enuSetPinValue+0xc8>
    27e0:	8d 81       	ldd	r24, Y+5	; 0x05
    27e2:	9e 81       	ldd	r25, Y+6	; 0x06
    27e4:	82 30       	cpi	r24, 0x02	; 2
    27e6:	91 05       	cpc	r25, r1
    27e8:	34 f4       	brge	.+12     	; 0x27f6 <DIO_enuSetPinValue+0x5c>
    27ea:	2d 81       	ldd	r18, Y+5	; 0x05
    27ec:	3e 81       	ldd	r19, Y+6	; 0x06
    27ee:	21 15       	cp	r18, r1
    27f0:	31 05       	cpc	r19, r1
    27f2:	71 f0       	breq	.+28     	; 0x2810 <DIO_enuSetPinValue+0x76>
    27f4:	b0 c0       	rjmp	.+352    	; 0x2956 <DIO_enuSetPinValue+0x1bc>
    27f6:	6d 81       	ldd	r22, Y+5	; 0x05
    27f8:	7e 81       	ldd	r23, Y+6	; 0x06
    27fa:	62 30       	cpi	r22, 0x02	; 2
    27fc:	71 05       	cpc	r23, r1
    27fe:	09 f4       	brne	.+2      	; 0x2802 <DIO_enuSetPinValue+0x68>
    2800:	59 c0       	rjmp	.+178    	; 0x28b4 <DIO_enuSetPinValue+0x11a>
    2802:	8d 81       	ldd	r24, Y+5	; 0x05
    2804:	9e 81       	ldd	r25, Y+6	; 0x06
    2806:	83 30       	cpi	r24, 0x03	; 3
    2808:	91 05       	cpc	r25, r1
    280a:	09 f4       	brne	.+2      	; 0x280e <DIO_enuSetPinValue+0x74>
    280c:	7c c0       	rjmp	.+248    	; 0x2906 <DIO_enuSetPinValue+0x16c>
    280e:	a3 c0       	rjmp	.+326    	; 0x2956 <DIO_enuSetPinValue+0x1bc>
		{
		case DIO_PORTA:
			PORTA &=~ (DIO_MASK_BIT << Copy_u8PinID);
    2810:	ab e3       	ldi	r26, 0x3B	; 59
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	eb e3       	ldi	r30, 0x3B	; 59
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	48 2f       	mov	r20, r24
    281c:	8b 81       	ldd	r24, Y+3	; 0x03
    281e:	28 2f       	mov	r18, r24
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	02 c0       	rjmp	.+4      	; 0x282c <DIO_enuSetPinValue+0x92>
    2828:	88 0f       	add	r24, r24
    282a:	99 1f       	adc	r25, r25
    282c:	2a 95       	dec	r18
    282e:	e2 f7       	brpl	.-8      	; 0x2828 <DIO_enuSetPinValue+0x8e>
    2830:	80 95       	com	r24
    2832:	84 23       	and	r24, r20
    2834:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value << Copy_u8PinID);
    2836:	ab e3       	ldi	r26, 0x3B	; 59
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	eb e3       	ldi	r30, 0x3B	; 59
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	48 2f       	mov	r20, r24
    2842:	8c 81       	ldd	r24, Y+4	; 0x04
    2844:	28 2f       	mov	r18, r24
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	88 2f       	mov	r24, r24
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	b9 01       	movw	r22, r18
    2850:	02 c0       	rjmp	.+4      	; 0x2856 <DIO_enuSetPinValue+0xbc>
    2852:	66 0f       	add	r22, r22
    2854:	77 1f       	adc	r23, r23
    2856:	8a 95       	dec	r24
    2858:	e2 f7       	brpl	.-8      	; 0x2852 <DIO_enuSetPinValue+0xb8>
    285a:	cb 01       	movw	r24, r22
    285c:	84 2b       	or	r24, r20
    285e:	8c 93       	st	X, r24
    2860:	7a c0       	rjmp	.+244    	; 0x2956 <DIO_enuSetPinValue+0x1bc>
			break;
		case DIO_PORTB:
			PORTB &=~(DIO_MASK_BIT << Copy_u8PinID);
    2862:	a8 e3       	ldi	r26, 0x38	; 56
    2864:	b0 e0       	ldi	r27, 0x00	; 0
    2866:	e8 e3       	ldi	r30, 0x38	; 56
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	48 2f       	mov	r20, r24
    286e:	8b 81       	ldd	r24, Y+3	; 0x03
    2870:	28 2f       	mov	r18, r24
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	02 c0       	rjmp	.+4      	; 0x287e <DIO_enuSetPinValue+0xe4>
    287a:	88 0f       	add	r24, r24
    287c:	99 1f       	adc	r25, r25
    287e:	2a 95       	dec	r18
    2880:	e2 f7       	brpl	.-8      	; 0x287a <DIO_enuSetPinValue+0xe0>
    2882:	80 95       	com	r24
    2884:	84 23       	and	r24, r20
    2886:	8c 93       	st	X, r24
			PORTB |= (Copy_u8Value << Copy_u8PinID);
    2888:	a8 e3       	ldi	r26, 0x38	; 56
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	e8 e3       	ldi	r30, 0x38	; 56
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	80 81       	ld	r24, Z
    2892:	48 2f       	mov	r20, r24
    2894:	8c 81       	ldd	r24, Y+4	; 0x04
    2896:	28 2f       	mov	r18, r24
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	8b 81       	ldd	r24, Y+3	; 0x03
    289c:	88 2f       	mov	r24, r24
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	b9 01       	movw	r22, r18
    28a2:	02 c0       	rjmp	.+4      	; 0x28a8 <DIO_enuSetPinValue+0x10e>
    28a4:	66 0f       	add	r22, r22
    28a6:	77 1f       	adc	r23, r23
    28a8:	8a 95       	dec	r24
    28aa:	e2 f7       	brpl	.-8      	; 0x28a4 <DIO_enuSetPinValue+0x10a>
    28ac:	cb 01       	movw	r24, r22
    28ae:	84 2b       	or	r24, r20
    28b0:	8c 93       	st	X, r24
    28b2:	51 c0       	rjmp	.+162    	; 0x2956 <DIO_enuSetPinValue+0x1bc>
			break;
		case DIO_PORTC:
			PORTC &=~(DIO_MASK_BIT << Copy_u8PinID);
    28b4:	a5 e3       	ldi	r26, 0x35	; 53
    28b6:	b0 e0       	ldi	r27, 0x00	; 0
    28b8:	e5 e3       	ldi	r30, 0x35	; 53
    28ba:	f0 e0       	ldi	r31, 0x00	; 0
    28bc:	80 81       	ld	r24, Z
    28be:	48 2f       	mov	r20, r24
    28c0:	8b 81       	ldd	r24, Y+3	; 0x03
    28c2:	28 2f       	mov	r18, r24
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	90 e0       	ldi	r25, 0x00	; 0
    28ca:	02 c0       	rjmp	.+4      	; 0x28d0 <DIO_enuSetPinValue+0x136>
    28cc:	88 0f       	add	r24, r24
    28ce:	99 1f       	adc	r25, r25
    28d0:	2a 95       	dec	r18
    28d2:	e2 f7       	brpl	.-8      	; 0x28cc <DIO_enuSetPinValue+0x132>
    28d4:	80 95       	com	r24
    28d6:	84 23       	and	r24, r20
    28d8:	8c 93       	st	X, r24
			PORTC |= (Copy_u8Value << Copy_u8PinID);
    28da:	a5 e3       	ldi	r26, 0x35	; 53
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	e5 e3       	ldi	r30, 0x35	; 53
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	48 2f       	mov	r20, r24
    28e6:	8c 81       	ldd	r24, Y+4	; 0x04
    28e8:	28 2f       	mov	r18, r24
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	8b 81       	ldd	r24, Y+3	; 0x03
    28ee:	88 2f       	mov	r24, r24
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	b9 01       	movw	r22, r18
    28f4:	02 c0       	rjmp	.+4      	; 0x28fa <DIO_enuSetPinValue+0x160>
    28f6:	66 0f       	add	r22, r22
    28f8:	77 1f       	adc	r23, r23
    28fa:	8a 95       	dec	r24
    28fc:	e2 f7       	brpl	.-8      	; 0x28f6 <DIO_enuSetPinValue+0x15c>
    28fe:	cb 01       	movw	r24, r22
    2900:	84 2b       	or	r24, r20
    2902:	8c 93       	st	X, r24
    2904:	28 c0       	rjmp	.+80     	; 0x2956 <DIO_enuSetPinValue+0x1bc>
			break;
		case DIO_PORTD:
			PORTD &=~(DIO_MASK_BIT << Copy_u8PinID);
    2906:	a2 e3       	ldi	r26, 0x32	; 50
    2908:	b0 e0       	ldi	r27, 0x00	; 0
    290a:	e2 e3       	ldi	r30, 0x32	; 50
    290c:	f0 e0       	ldi	r31, 0x00	; 0
    290e:	80 81       	ld	r24, Z
    2910:	48 2f       	mov	r20, r24
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	28 2f       	mov	r18, r24
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	81 e0       	ldi	r24, 0x01	; 1
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	02 c0       	rjmp	.+4      	; 0x2922 <DIO_enuSetPinValue+0x188>
    291e:	88 0f       	add	r24, r24
    2920:	99 1f       	adc	r25, r25
    2922:	2a 95       	dec	r18
    2924:	e2 f7       	brpl	.-8      	; 0x291e <DIO_enuSetPinValue+0x184>
    2926:	80 95       	com	r24
    2928:	84 23       	and	r24, r20
    292a:	8c 93       	st	X, r24
			PORTD |= (Copy_u8Value << Copy_u8PinID);
    292c:	a2 e3       	ldi	r26, 0x32	; 50
    292e:	b0 e0       	ldi	r27, 0x00	; 0
    2930:	e2 e3       	ldi	r30, 0x32	; 50
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	80 81       	ld	r24, Z
    2936:	48 2f       	mov	r20, r24
    2938:	8c 81       	ldd	r24, Y+4	; 0x04
    293a:	28 2f       	mov	r18, r24
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	8b 81       	ldd	r24, Y+3	; 0x03
    2940:	88 2f       	mov	r24, r24
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	b9 01       	movw	r22, r18
    2946:	02 c0       	rjmp	.+4      	; 0x294c <DIO_enuSetPinValue+0x1b2>
    2948:	66 0f       	add	r22, r22
    294a:	77 1f       	adc	r23, r23
    294c:	8a 95       	dec	r24
    294e:	e2 f7       	brpl	.-8      	; 0x2948 <DIO_enuSetPinValue+0x1ae>
    2950:	cb 01       	movw	r24, r22
    2952:	84 2b       	or	r24, r20
    2954:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    2956:	19 82       	std	Y+1, r1	; 0x01
    2958:	02 c0       	rjmp	.+4      	; 0x295e <DIO_enuSetPinValue+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    295a:	83 e0       	ldi	r24, 0x03	; 3
    295c:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorState;
    295e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2960:	26 96       	adiw	r28, 0x06	; 6
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	f8 94       	cli
    2966:	de bf       	out	0x3e, r29	; 62
    2968:	0f be       	out	0x3f, r0	; 63
    296a:	cd bf       	out	0x3d, r28	; 61
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_u8Value)
{
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	27 97       	sbiw	r28, 0x07	; 7
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	f8 94       	cli
    2980:	de bf       	out	0x3e, r29	; 62
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	cd bf       	out	0x3d, r28	; 61
    2986:	8a 83       	std	Y+2, r24	; 0x02
    2988:	6b 83       	std	Y+3, r22	; 0x03
    298a:	5d 83       	std	Y+5, r21	; 0x05
    298c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    298e:	81 e0       	ldi	r24, 0x01	; 1
    2990:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Value != NULL)
    2992:	8c 81       	ldd	r24, Y+4	; 0x04
    2994:	9d 81       	ldd	r25, Y+5	; 0x05
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	09 f4       	brne	.+2      	; 0x299c <DIO_enuGetPinValue+0x2a>
    299a:	7d c0       	rjmp	.+250    	; 0x2a96 <DIO_enuGetPinValue+0x124>
	{
		if(Copy_u8PortID <= DIO_PORTD && Copy_u8PinID <= DIO_PIN7)
    299c:	8a 81       	ldd	r24, Y+2	; 0x02
    299e:	84 30       	cpi	r24, 0x04	; 4
    29a0:	08 f0       	brcs	.+2      	; 0x29a4 <DIO_enuGetPinValue+0x32>
    29a2:	76 c0       	rjmp	.+236    	; 0x2a90 <DIO_enuGetPinValue+0x11e>
    29a4:	8b 81       	ldd	r24, Y+3	; 0x03
    29a6:	88 30       	cpi	r24, 0x08	; 8
    29a8:	08 f0       	brcs	.+2      	; 0x29ac <DIO_enuGetPinValue+0x3a>
    29aa:	72 c0       	rjmp	.+228    	; 0x2a90 <DIO_enuGetPinValue+0x11e>
		{
			switch(Copy_u8PortID)
    29ac:	8a 81       	ldd	r24, Y+2	; 0x02
    29ae:	28 2f       	mov	r18, r24
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	3f 83       	std	Y+7, r19	; 0x07
    29b4:	2e 83       	std	Y+6, r18	; 0x06
    29b6:	4e 81       	ldd	r20, Y+6	; 0x06
    29b8:	5f 81       	ldd	r21, Y+7	; 0x07
    29ba:	41 30       	cpi	r20, 0x01	; 1
    29bc:	51 05       	cpc	r21, r1
    29be:	59 f1       	breq	.+86     	; 0x2a16 <DIO_enuGetPinValue+0xa4>
    29c0:	8e 81       	ldd	r24, Y+6	; 0x06
    29c2:	9f 81       	ldd	r25, Y+7	; 0x07
    29c4:	82 30       	cpi	r24, 0x02	; 2
    29c6:	91 05       	cpc	r25, r1
    29c8:	34 f4       	brge	.+12     	; 0x29d6 <DIO_enuGetPinValue+0x64>
    29ca:	2e 81       	ldd	r18, Y+6	; 0x06
    29cc:	3f 81       	ldd	r19, Y+7	; 0x07
    29ce:	21 15       	cp	r18, r1
    29d0:	31 05       	cpc	r19, r1
    29d2:	69 f0       	breq	.+26     	; 0x29ee <DIO_enuGetPinValue+0x7c>
    29d4:	5b c0       	rjmp	.+182    	; 0x2a8c <DIO_enuGetPinValue+0x11a>
    29d6:	4e 81       	ldd	r20, Y+6	; 0x06
    29d8:	5f 81       	ldd	r21, Y+7	; 0x07
    29da:	42 30       	cpi	r20, 0x02	; 2
    29dc:	51 05       	cpc	r21, r1
    29de:	79 f1       	breq	.+94     	; 0x2a3e <DIO_enuGetPinValue+0xcc>
    29e0:	8e 81       	ldd	r24, Y+6	; 0x06
    29e2:	9f 81       	ldd	r25, Y+7	; 0x07
    29e4:	83 30       	cpi	r24, 0x03	; 3
    29e6:	91 05       	cpc	r25, r1
    29e8:	09 f4       	brne	.+2      	; 0x29ec <DIO_enuGetPinValue+0x7a>
    29ea:	3d c0       	rjmp	.+122    	; 0x2a66 <DIO_enuGetPinValue+0xf4>
    29ec:	4f c0       	rjmp	.+158    	; 0x2a8c <DIO_enuGetPinValue+0x11a>
			{
			case DIO_PORTA:
				*Copy_u8Value = ((PINA>>Copy_u8PinID) & DIO_MASK_BIT);
    29ee:	e9 e3       	ldi	r30, 0x39	; 57
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	80 81       	ld	r24, Z
    29f4:	28 2f       	mov	r18, r24
    29f6:	30 e0       	ldi	r19, 0x00	; 0
    29f8:	8b 81       	ldd	r24, Y+3	; 0x03
    29fa:	88 2f       	mov	r24, r24
    29fc:	90 e0       	ldi	r25, 0x00	; 0
    29fe:	a9 01       	movw	r20, r18
    2a00:	02 c0       	rjmp	.+4      	; 0x2a06 <DIO_enuGetPinValue+0x94>
    2a02:	55 95       	asr	r21
    2a04:	47 95       	ror	r20
    2a06:	8a 95       	dec	r24
    2a08:	e2 f7       	brpl	.-8      	; 0x2a02 <DIO_enuGetPinValue+0x90>
    2a0a:	ca 01       	movw	r24, r20
    2a0c:	81 70       	andi	r24, 0x01	; 1
    2a0e:	ec 81       	ldd	r30, Y+4	; 0x04
    2a10:	fd 81       	ldd	r31, Y+5	; 0x05
    2a12:	80 83       	st	Z, r24
    2a14:	3b c0       	rjmp	.+118    	; 0x2a8c <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_PORTB:
				*Copy_u8Value = ((PINB>>Copy_u8PinID) & DIO_MASK_BIT);
    2a16:	e6 e3       	ldi	r30, 0x36	; 54
    2a18:	f0 e0       	ldi	r31, 0x00	; 0
    2a1a:	80 81       	ld	r24, Z
    2a1c:	28 2f       	mov	r18, r24
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	8b 81       	ldd	r24, Y+3	; 0x03
    2a22:	88 2f       	mov	r24, r24
    2a24:	90 e0       	ldi	r25, 0x00	; 0
    2a26:	a9 01       	movw	r20, r18
    2a28:	02 c0       	rjmp	.+4      	; 0x2a2e <DIO_enuGetPinValue+0xbc>
    2a2a:	55 95       	asr	r21
    2a2c:	47 95       	ror	r20
    2a2e:	8a 95       	dec	r24
    2a30:	e2 f7       	brpl	.-8      	; 0x2a2a <DIO_enuGetPinValue+0xb8>
    2a32:	ca 01       	movw	r24, r20
    2a34:	81 70       	andi	r24, 0x01	; 1
    2a36:	ec 81       	ldd	r30, Y+4	; 0x04
    2a38:	fd 81       	ldd	r31, Y+5	; 0x05
    2a3a:	80 83       	st	Z, r24
    2a3c:	27 c0       	rjmp	.+78     	; 0x2a8c <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_PORTC:
				*Copy_u8Value = ((PINC>>Copy_u8PinID) & DIO_MASK_BIT);
    2a3e:	e3 e3       	ldi	r30, 0x33	; 51
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	80 81       	ld	r24, Z
    2a44:	28 2f       	mov	r18, r24
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4a:	88 2f       	mov	r24, r24
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	a9 01       	movw	r20, r18
    2a50:	02 c0       	rjmp	.+4      	; 0x2a56 <DIO_enuGetPinValue+0xe4>
    2a52:	55 95       	asr	r21
    2a54:	47 95       	ror	r20
    2a56:	8a 95       	dec	r24
    2a58:	e2 f7       	brpl	.-8      	; 0x2a52 <DIO_enuGetPinValue+0xe0>
    2a5a:	ca 01       	movw	r24, r20
    2a5c:	81 70       	andi	r24, 0x01	; 1
    2a5e:	ec 81       	ldd	r30, Y+4	; 0x04
    2a60:	fd 81       	ldd	r31, Y+5	; 0x05
    2a62:	80 83       	st	Z, r24
    2a64:	13 c0       	rjmp	.+38     	; 0x2a8c <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_PORTD:
				*Copy_u8Value = ((PIND>>Copy_u8PinID) & DIO_MASK_BIT);
    2a66:	e0 e3       	ldi	r30, 0x30	; 48
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	80 81       	ld	r24, Z
    2a6c:	28 2f       	mov	r18, r24
    2a6e:	30 e0       	ldi	r19, 0x00	; 0
    2a70:	8b 81       	ldd	r24, Y+3	; 0x03
    2a72:	88 2f       	mov	r24, r24
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	a9 01       	movw	r20, r18
    2a78:	02 c0       	rjmp	.+4      	; 0x2a7e <DIO_enuGetPinValue+0x10c>
    2a7a:	55 95       	asr	r21
    2a7c:	47 95       	ror	r20
    2a7e:	8a 95       	dec	r24
    2a80:	e2 f7       	brpl	.-8      	; 0x2a7a <DIO_enuGetPinValue+0x108>
    2a82:	ca 01       	movw	r24, r20
    2a84:	81 70       	andi	r24, 0x01	; 1
    2a86:	ec 81       	ldd	r30, Y+4	; 0x04
    2a88:	fd 81       	ldd	r31, Y+5	; 0x05
    2a8a:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
    2a8c:	19 82       	std	Y+1, r1	; 0x01
    2a8e:	05 c0       	rjmp	.+10     	; 0x2a9a <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    2a90:	83 e0       	ldi	r24, 0x03	; 3
    2a92:	89 83       	std	Y+1, r24	; 0x01
    2a94:	02 c0       	rjmp	.+4      	; 0x2a9a <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    2a96:	82 e0       	ldi	r24, 0x02	; 2
    2a98:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorState;
    2a9a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a9c:	27 96       	adiw	r28, 0x07	; 7
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	08 95       	ret

00002aae <DIO_enuTogPin>:

ES_t DIO_enuTogPin(u8 Copy_u8PortID, u8 Copy_u8PinID)
{
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	00 d0       	rcall	.+0      	; 0x2ab4 <DIO_enuTogPin+0x6>
    2ab4:	00 d0       	rcall	.+0      	; 0x2ab6 <DIO_enuTogPin+0x8>
    2ab6:	0f 92       	push	r0
    2ab8:	cd b7       	in	r28, 0x3d	; 61
    2aba:	de b7       	in	r29, 0x3e	; 62
    2abc:	8a 83       	std	Y+2, r24	; 0x02
    2abe:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PortID <= DIO_PORTD)
    2ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac6:	84 30       	cpi	r24, 0x04	; 4
    2ac8:	08 f0       	brcs	.+2      	; 0x2acc <DIO_enuTogPin+0x1e>
    2aca:	70 c0       	rjmp	.+224    	; 0x2bac <DIO_enuTogPin+0xfe>
	{
		switch(Copy_u8PortID)
    2acc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ace:	28 2f       	mov	r18, r24
    2ad0:	30 e0       	ldi	r19, 0x00	; 0
    2ad2:	3d 83       	std	Y+5, r19	; 0x05
    2ad4:	2c 83       	std	Y+4, r18	; 0x04
    2ad6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ad8:	9d 81       	ldd	r25, Y+5	; 0x05
    2ada:	81 30       	cpi	r24, 0x01	; 1
    2adc:	91 05       	cpc	r25, r1
    2ade:	49 f1       	breq	.+82     	; 0x2b32 <DIO_enuTogPin+0x84>
    2ae0:	2c 81       	ldd	r18, Y+4	; 0x04
    2ae2:	3d 81       	ldd	r19, Y+5	; 0x05
    2ae4:	22 30       	cpi	r18, 0x02	; 2
    2ae6:	31 05       	cpc	r19, r1
    2ae8:	2c f4       	brge	.+10     	; 0x2af4 <DIO_enuTogPin+0x46>
    2aea:	8c 81       	ldd	r24, Y+4	; 0x04
    2aec:	9d 81       	ldd	r25, Y+5	; 0x05
    2aee:	00 97       	sbiw	r24, 0x00	; 0
    2af0:	61 f0       	breq	.+24     	; 0x2b0a <DIO_enuTogPin+0x5c>
    2af2:	5a c0       	rjmp	.+180    	; 0x2ba8 <DIO_enuTogPin+0xfa>
    2af4:	2c 81       	ldd	r18, Y+4	; 0x04
    2af6:	3d 81       	ldd	r19, Y+5	; 0x05
    2af8:	22 30       	cpi	r18, 0x02	; 2
    2afa:	31 05       	cpc	r19, r1
    2afc:	71 f1       	breq	.+92     	; 0x2b5a <DIO_enuTogPin+0xac>
    2afe:	8c 81       	ldd	r24, Y+4	; 0x04
    2b00:	9d 81       	ldd	r25, Y+5	; 0x05
    2b02:	83 30       	cpi	r24, 0x03	; 3
    2b04:	91 05       	cpc	r25, r1
    2b06:	e9 f1       	breq	.+122    	; 0x2b82 <DIO_enuTogPin+0xd4>
    2b08:	4f c0       	rjmp	.+158    	; 0x2ba8 <DIO_enuTogPin+0xfa>
		{
		case DIO_PORTA:
			PORTA ^= (DIO_MASK_BIT << Copy_u8PinID);
    2b0a:	ab e3       	ldi	r26, 0x3B	; 59
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	eb e3       	ldi	r30, 0x3B	; 59
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	80 81       	ld	r24, Z
    2b14:	48 2f       	mov	r20, r24
    2b16:	8b 81       	ldd	r24, Y+3	; 0x03
    2b18:	28 2f       	mov	r18, r24
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	81 e0       	ldi	r24, 0x01	; 1
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	02 2e       	mov	r0, r18
    2b22:	02 c0       	rjmp	.+4      	; 0x2b28 <DIO_enuTogPin+0x7a>
    2b24:	88 0f       	add	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	0a 94       	dec	r0
    2b2a:	e2 f7       	brpl	.-8      	; 0x2b24 <DIO_enuTogPin+0x76>
    2b2c:	84 27       	eor	r24, r20
    2b2e:	8c 93       	st	X, r24
    2b30:	3b c0       	rjmp	.+118    	; 0x2ba8 <DIO_enuTogPin+0xfa>
			break;
		case DIO_PORTB:
			PORTB ^= (DIO_MASK_BIT << Copy_u8PinID);
    2b32:	a8 e3       	ldi	r26, 0x38	; 56
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	e8 e3       	ldi	r30, 0x38	; 56
    2b38:	f0 e0       	ldi	r31, 0x00	; 0
    2b3a:	80 81       	ld	r24, Z
    2b3c:	48 2f       	mov	r20, r24
    2b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b40:	28 2f       	mov	r18, r24
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	02 2e       	mov	r0, r18
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <DIO_enuTogPin+0xa2>
    2b4c:	88 0f       	add	r24, r24
    2b4e:	99 1f       	adc	r25, r25
    2b50:	0a 94       	dec	r0
    2b52:	e2 f7       	brpl	.-8      	; 0x2b4c <DIO_enuTogPin+0x9e>
    2b54:	84 27       	eor	r24, r20
    2b56:	8c 93       	st	X, r24
    2b58:	27 c0       	rjmp	.+78     	; 0x2ba8 <DIO_enuTogPin+0xfa>
			break;
		case DIO_PORTC:
			PORTC ^= (DIO_MASK_BIT << Copy_u8PinID);
    2b5a:	a5 e3       	ldi	r26, 0x35	; 53
    2b5c:	b0 e0       	ldi	r27, 0x00	; 0
    2b5e:	e5 e3       	ldi	r30, 0x35	; 53
    2b60:	f0 e0       	ldi	r31, 0x00	; 0
    2b62:	80 81       	ld	r24, Z
    2b64:	48 2f       	mov	r20, r24
    2b66:	8b 81       	ldd	r24, Y+3	; 0x03
    2b68:	28 2f       	mov	r18, r24
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	02 2e       	mov	r0, r18
    2b72:	02 c0       	rjmp	.+4      	; 0x2b78 <DIO_enuTogPin+0xca>
    2b74:	88 0f       	add	r24, r24
    2b76:	99 1f       	adc	r25, r25
    2b78:	0a 94       	dec	r0
    2b7a:	e2 f7       	brpl	.-8      	; 0x2b74 <DIO_enuTogPin+0xc6>
    2b7c:	84 27       	eor	r24, r20
    2b7e:	8c 93       	st	X, r24
    2b80:	13 c0       	rjmp	.+38     	; 0x2ba8 <DIO_enuTogPin+0xfa>
			break;
		case DIO_PORTD:
			PORTD ^= (DIO_MASK_BIT << Copy_u8PinID);
    2b82:	a2 e3       	ldi	r26, 0x32	; 50
    2b84:	b0 e0       	ldi	r27, 0x00	; 0
    2b86:	e2 e3       	ldi	r30, 0x32	; 50
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	80 81       	ld	r24, Z
    2b8c:	48 2f       	mov	r20, r24
    2b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b90:	28 2f       	mov	r18, r24
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	81 e0       	ldi	r24, 0x01	; 1
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	02 2e       	mov	r0, r18
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <DIO_enuTogPin+0xf2>
    2b9c:	88 0f       	add	r24, r24
    2b9e:	99 1f       	adc	r25, r25
    2ba0:	0a 94       	dec	r0
    2ba2:	e2 f7       	brpl	.-8      	; 0x2b9c <DIO_enuTogPin+0xee>
    2ba4:	84 27       	eor	r24, r20
    2ba6:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
    2ba8:	19 82       	std	Y+1, r1	; 0x01
    2baa:	02 c0       	rjmp	.+4      	; 0x2bb0 <DIO_enuTogPin+0x102>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    2bac:	83 e0       	ldi	r24, 0x03	; 3
    2bae:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState;
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
    2bbc:	cf 91       	pop	r28
    2bbe:	df 91       	pop	r29
    2bc0:	08 95       	ret

00002bc2 <LCD_enuInit>:


u8 Global_u8Flag = 0;

ES_t LCD_enuInit(void)
{
    2bc2:	2f 92       	push	r2
    2bc4:	3f 92       	push	r3
    2bc6:	4f 92       	push	r4
    2bc8:	5f 92       	push	r5
    2bca:	6f 92       	push	r6
    2bcc:	7f 92       	push	r7
    2bce:	8f 92       	push	r8
    2bd0:	9f 92       	push	r9
    2bd2:	af 92       	push	r10
    2bd4:	bf 92       	push	r11
    2bd6:	cf 92       	push	r12
    2bd8:	df 92       	push	r13
    2bda:	ef 92       	push	r14
    2bdc:	ff 92       	push	r15
    2bde:	0f 93       	push	r16
    2be0:	1f 93       	push	r17
    2be2:	df 93       	push	r29
    2be4:	cf 93       	push	r28
    2be6:	cd b7       	in	r28, 0x3d	; 61
    2be8:	de b7       	in	r29, 0x3e	; 62
    2bea:	c3 54       	subi	r28, 0x43	; 67
    2bec:	d0 40       	sbci	r29, 0x00	; 0
    2bee:	0f b6       	in	r0, 0x3f	; 63
    2bf0:	f8 94       	cli
    2bf2:	de bf       	out	0x3e, r29	; 62
    2bf4:	0f be       	out	0x3f, r0	; 63
    2bf6:	cd bf       	out	0x3d, r28	; 61
	ES_t Local_ErrorState = ES_NOK;
    2bf8:	fe 01       	movw	r30, r28
    2bfa:	ee 5b       	subi	r30, 0xBE	; 190
    2bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	80 83       	st	Z, r24
    2c02:	80 e0       	ldi	r24, 0x00	; 0
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	a0 e2       	ldi	r26, 0x20	; 32
    2c08:	b2 e4       	ldi	r27, 0x42	; 66
    2c0a:	8d ab       	std	Y+53, r24	; 0x35
    2c0c:	9e ab       	std	Y+54, r25	; 0x36
    2c0e:	af ab       	std	Y+55, r26	; 0x37
    2c10:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c12:	6d a9       	ldd	r22, Y+53	; 0x35
    2c14:	7e a9       	ldd	r23, Y+54	; 0x36
    2c16:	8f a9       	ldd	r24, Y+55	; 0x37
    2c18:	98 ad       	ldd	r25, Y+56	; 0x38
    2c1a:	20 e0       	ldi	r18, 0x00	; 0
    2c1c:	30 e0       	ldi	r19, 0x00	; 0
    2c1e:	4a e7       	ldi	r20, 0x7A	; 122
    2c20:	53 e4       	ldi	r21, 0x43	; 67
    2c22:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	89 ab       	std	Y+49, r24	; 0x31
    2c2c:	9a ab       	std	Y+50, r25	; 0x32
    2c2e:	ab ab       	std	Y+51, r26	; 0x33
    2c30:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c32:	69 a9       	ldd	r22, Y+49	; 0x31
    2c34:	7a a9       	ldd	r23, Y+50	; 0x32
    2c36:	8b a9       	ldd	r24, Y+51	; 0x33
    2c38:	9c a9       	ldd	r25, Y+52	; 0x34
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	40 e8       	ldi	r20, 0x80	; 128
    2c40:	5f e3       	ldi	r21, 0x3F	; 63
    2c42:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    2c46:	88 23       	and	r24, r24
    2c48:	2c f4       	brge	.+10     	; 0x2c54 <LCD_enuInit+0x92>
		__ticks = 1;
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	98 ab       	std	Y+48, r25	; 0x30
    2c50:	8f a7       	std	Y+47, r24	; 0x2f
    2c52:	3f c0       	rjmp	.+126    	; 0x2cd2 <LCD_enuInit+0x110>
	else if (__tmp > 65535)
    2c54:	69 a9       	ldd	r22, Y+49	; 0x31
    2c56:	7a a9       	ldd	r23, Y+50	; 0x32
    2c58:	8b a9       	ldd	r24, Y+51	; 0x33
    2c5a:	9c a9       	ldd	r25, Y+52	; 0x34
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	3f ef       	ldi	r19, 0xFF	; 255
    2c60:	4f e7       	ldi	r20, 0x7F	; 127
    2c62:	57 e4       	ldi	r21, 0x47	; 71
    2c64:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    2c68:	18 16       	cp	r1, r24
    2c6a:	4c f5       	brge	.+82     	; 0x2cbe <LCD_enuInit+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c6c:	6d a9       	ldd	r22, Y+53	; 0x35
    2c6e:	7e a9       	ldd	r23, Y+54	; 0x36
    2c70:	8f a9       	ldd	r24, Y+55	; 0x37
    2c72:	98 ad       	ldd	r25, Y+56	; 0x38
    2c74:	20 e0       	ldi	r18, 0x00	; 0
    2c76:	30 e0       	ldi	r19, 0x00	; 0
    2c78:	40 e2       	ldi	r20, 0x20	; 32
    2c7a:	51 e4       	ldi	r21, 0x41	; 65
    2c7c:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    2c80:	dc 01       	movw	r26, r24
    2c82:	cb 01       	movw	r24, r22
    2c84:	bc 01       	movw	r22, r24
    2c86:	cd 01       	movw	r24, r26
    2c88:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2c8c:	dc 01       	movw	r26, r24
    2c8e:	cb 01       	movw	r24, r22
    2c90:	98 ab       	std	Y+48, r25	; 0x30
    2c92:	8f a7       	std	Y+47, r24	; 0x2f
    2c94:	0f c0       	rjmp	.+30     	; 0x2cb4 <LCD_enuInit+0xf2>
    2c96:	89 e1       	ldi	r24, 0x19	; 25
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	9e a7       	std	Y+46, r25	; 0x2e
    2c9c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2c9e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ca0:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ca2:	01 97       	sbiw	r24, 0x01	; 1
    2ca4:	f1 f7       	brne	.-4      	; 0x2ca2 <LCD_enuInit+0xe0>
    2ca6:	9e a7       	std	Y+46, r25	; 0x2e
    2ca8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2caa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cac:	98 a9       	ldd	r25, Y+48	; 0x30
    2cae:	01 97       	sbiw	r24, 0x01	; 1
    2cb0:	98 ab       	std	Y+48, r25	; 0x30
    2cb2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cb4:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cb6:	98 a9       	ldd	r25, Y+48	; 0x30
    2cb8:	00 97       	sbiw	r24, 0x00	; 0
    2cba:	69 f7       	brne	.-38     	; 0x2c96 <LCD_enuInit+0xd4>
    2cbc:	14 c0       	rjmp	.+40     	; 0x2ce6 <LCD_enuInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cbe:	69 a9       	ldd	r22, Y+49	; 0x31
    2cc0:	7a a9       	ldd	r23, Y+50	; 0x32
    2cc2:	8b a9       	ldd	r24, Y+51	; 0x33
    2cc4:	9c a9       	ldd	r25, Y+52	; 0x34
    2cc6:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22
    2cce:	98 ab       	std	Y+48, r25	; 0x30
    2cd0:	8f a7       	std	Y+47, r24	; 0x2f
    2cd2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cd4:	98 a9       	ldd	r25, Y+48	; 0x30
    2cd6:	9c a7       	std	Y+44, r25	; 0x2c
    2cd8:	8b a7       	std	Y+43, r24	; 0x2b
    2cda:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cdc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cde:	01 97       	sbiw	r24, 0x01	; 1
    2ce0:	f1 f7       	brne	.-4      	; 0x2cde <LCD_enuInit+0x11c>
    2ce2:	9c a7       	std	Y+44, r25	; 0x2c
    2ce4:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);

	u64 Local_u64Check = 0;
    2ce6:	fe 01       	movw	r30, r28
    2ce8:	fa 96       	adiw	r30, 0x3a	; 58
    2cea:	10 82       	st	Z, r1
    2cec:	11 82       	std	Z+1, r1	; 0x01
    2cee:	12 82       	std	Z+2, r1	; 0x02
    2cf0:	13 82       	std	Z+3, r1	; 0x03
    2cf2:	14 82       	std	Z+4, r1	; 0x04
    2cf4:	15 82       	std	Z+5, r1	; 0x05
    2cf6:	16 82       	std	Z+6, r1	; 0x06
    2cf8:	17 82       	std	Z+7, r1	; 0x07

	Local_u64Check |= (DIO_enuSetPinDirection(RS_PORT, RS_PIN, DIO_u8OUTPUT) << 0);
    2cfa:	80 e0       	ldi	r24, 0x00	; 0
    2cfc:	60 e0       	ldi	r22, 0x00	; 0
    2cfe:	41 e0       	ldi	r20, 0x01	; 1
    2d00:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    2d04:	28 2f       	mov	r18, r24
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	40 e0       	ldi	r20, 0x00	; 0
    2d0a:	50 e0       	ldi	r21, 0x00	; 0
    2d0c:	60 e0       	ldi	r22, 0x00	; 0
    2d0e:	70 e0       	ldi	r23, 0x00	; 0
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	90 e0       	ldi	r25, 0x00	; 0
    2d14:	de 01       	movw	r26, r28
    2d16:	da 96       	adiw	r26, 0x3a	; 58
    2d18:	fe 01       	movw	r30, r28
    2d1a:	fa 96       	adiw	r30, 0x3a	; 58
    2d1c:	10 81       	ld	r17, Z
    2d1e:	12 2b       	or	r17, r18
    2d20:	1c 93       	st	X, r17
    2d22:	11 81       	ldd	r17, Z+1	; 0x01
    2d24:	13 2b       	or	r17, r19
    2d26:	11 96       	adiw	r26, 0x01	; 1
    2d28:	1c 93       	st	X, r17
    2d2a:	11 97       	sbiw	r26, 0x01	; 1
    2d2c:	12 81       	ldd	r17, Z+2	; 0x02
    2d2e:	14 2b       	or	r17, r20
    2d30:	12 96       	adiw	r26, 0x02	; 2
    2d32:	1c 93       	st	X, r17
    2d34:	12 97       	sbiw	r26, 0x02	; 2
    2d36:	13 81       	ldd	r17, Z+3	; 0x03
    2d38:	15 2b       	or	r17, r21
    2d3a:	13 96       	adiw	r26, 0x03	; 3
    2d3c:	1c 93       	st	X, r17
    2d3e:	13 97       	sbiw	r26, 0x03	; 3
    2d40:	14 81       	ldd	r17, Z+4	; 0x04
    2d42:	16 2b       	or	r17, r22
    2d44:	14 96       	adiw	r26, 0x04	; 4
    2d46:	1c 93       	st	X, r17
    2d48:	14 97       	sbiw	r26, 0x04	; 4
    2d4a:	15 81       	ldd	r17, Z+5	; 0x05
    2d4c:	17 2b       	or	r17, r23
    2d4e:	15 96       	adiw	r26, 0x05	; 5
    2d50:	1c 93       	st	X, r17
    2d52:	15 97       	sbiw	r26, 0x05	; 5
    2d54:	16 81       	ldd	r17, Z+6	; 0x06
    2d56:	18 2b       	or	r17, r24
    2d58:	16 96       	adiw	r26, 0x06	; 6
    2d5a:	1c 93       	st	X, r17
    2d5c:	16 97       	sbiw	r26, 0x06	; 6
    2d5e:	e7 81       	ldd	r30, Z+7	; 0x07
    2d60:	8e 2f       	mov	r24, r30
    2d62:	89 2b       	or	r24, r25
    2d64:	17 96       	adiw	r26, 0x07	; 7
    2d66:	8c 93       	st	X, r24
	Local_u64Check |= (DIO_enuSetPinDirection(RW_PORT, RW_PIN, DIO_u8OUTPUT) << 3);
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	61 e0       	ldi	r22, 0x01	; 1
    2d6c:	41 e0       	ldi	r20, 0x01	; 1
    2d6e:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    2d72:	88 2f       	mov	r24, r24
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	dc 01       	movw	r26, r24
    2d78:	aa 0f       	add	r26, r26
    2d7a:	bb 1f       	adc	r27, r27
    2d7c:	aa 0f       	add	r26, r26
    2d7e:	bb 1f       	adc	r27, r27
    2d80:	aa 0f       	add	r26, r26
    2d82:	bb 1f       	adc	r27, r27
    2d84:	fd 01       	movw	r30, r26
    2d86:	ff 0f       	add	r31, r31
    2d88:	ee 0b       	sbc	r30, r30
    2d8a:	fe 2f       	mov	r31, r30
    2d8c:	9d 01       	movw	r18, r26
    2d8e:	4e 2f       	mov	r20, r30
    2d90:	5e 2f       	mov	r21, r30
    2d92:	6e 2f       	mov	r22, r30
    2d94:	7e 2f       	mov	r23, r30
    2d96:	8e 2f       	mov	r24, r30
    2d98:	9e 2f       	mov	r25, r30
    2d9a:	de 01       	movw	r26, r28
    2d9c:	da 96       	adiw	r26, 0x3a	; 58
    2d9e:	fe 01       	movw	r30, r28
    2da0:	fa 96       	adiw	r30, 0x3a	; 58
    2da2:	10 81       	ld	r17, Z
    2da4:	12 2b       	or	r17, r18
    2da6:	1c 93       	st	X, r17
    2da8:	11 81       	ldd	r17, Z+1	; 0x01
    2daa:	13 2b       	or	r17, r19
    2dac:	11 96       	adiw	r26, 0x01	; 1
    2dae:	1c 93       	st	X, r17
    2db0:	11 97       	sbiw	r26, 0x01	; 1
    2db2:	12 81       	ldd	r17, Z+2	; 0x02
    2db4:	14 2b       	or	r17, r20
    2db6:	12 96       	adiw	r26, 0x02	; 2
    2db8:	1c 93       	st	X, r17
    2dba:	12 97       	sbiw	r26, 0x02	; 2
    2dbc:	13 81       	ldd	r17, Z+3	; 0x03
    2dbe:	15 2b       	or	r17, r21
    2dc0:	13 96       	adiw	r26, 0x03	; 3
    2dc2:	1c 93       	st	X, r17
    2dc4:	13 97       	sbiw	r26, 0x03	; 3
    2dc6:	14 81       	ldd	r17, Z+4	; 0x04
    2dc8:	16 2b       	or	r17, r22
    2dca:	14 96       	adiw	r26, 0x04	; 4
    2dcc:	1c 93       	st	X, r17
    2dce:	14 97       	sbiw	r26, 0x04	; 4
    2dd0:	15 81       	ldd	r17, Z+5	; 0x05
    2dd2:	17 2b       	or	r17, r23
    2dd4:	15 96       	adiw	r26, 0x05	; 5
    2dd6:	1c 93       	st	X, r17
    2dd8:	15 97       	sbiw	r26, 0x05	; 5
    2dda:	16 81       	ldd	r17, Z+6	; 0x06
    2ddc:	18 2b       	or	r17, r24
    2dde:	16 96       	adiw	r26, 0x06	; 6
    2de0:	1c 93       	st	X, r17
    2de2:	16 97       	sbiw	r26, 0x06	; 6
    2de4:	e7 81       	ldd	r30, Z+7	; 0x07
    2de6:	8e 2f       	mov	r24, r30
    2de8:	89 2b       	or	r24, r25
    2dea:	17 96       	adiw	r26, 0x07	; 7
    2dec:	8c 93       	st	X, r24
	Local_u64Check |= (DIO_enuSetPinDirection(EN_PORT, EN_PIN, DIO_u8OUTPUT) << 6);
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	62 e0       	ldi	r22, 0x02	; 2
    2df2:	41 e0       	ldi	r20, 0x01	; 1
    2df4:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    2df8:	88 2f       	mov	r24, r24
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	00 24       	eor	r0, r0
    2e00:	b6 95       	lsr	r27
    2e02:	a7 95       	ror	r26
    2e04:	07 94       	ror	r0
    2e06:	b6 95       	lsr	r27
    2e08:	a7 95       	ror	r26
    2e0a:	07 94       	ror	r0
    2e0c:	ba 2f       	mov	r27, r26
    2e0e:	a0 2d       	mov	r26, r0
    2e10:	fd 01       	movw	r30, r26
    2e12:	ff 0f       	add	r31, r31
    2e14:	ee 0b       	sbc	r30, r30
    2e16:	fe 2f       	mov	r31, r30
    2e18:	9d 01       	movw	r18, r26
    2e1a:	4e 2f       	mov	r20, r30
    2e1c:	5e 2f       	mov	r21, r30
    2e1e:	6e 2f       	mov	r22, r30
    2e20:	7e 2f       	mov	r23, r30
    2e22:	8e 2f       	mov	r24, r30
    2e24:	9e 2f       	mov	r25, r30
    2e26:	de 01       	movw	r26, r28
    2e28:	da 96       	adiw	r26, 0x3a	; 58
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	fa 96       	adiw	r30, 0x3a	; 58
    2e2e:	10 81       	ld	r17, Z
    2e30:	12 2b       	or	r17, r18
    2e32:	1c 93       	st	X, r17
    2e34:	11 81       	ldd	r17, Z+1	; 0x01
    2e36:	13 2b       	or	r17, r19
    2e38:	11 96       	adiw	r26, 0x01	; 1
    2e3a:	1c 93       	st	X, r17
    2e3c:	11 97       	sbiw	r26, 0x01	; 1
    2e3e:	12 81       	ldd	r17, Z+2	; 0x02
    2e40:	14 2b       	or	r17, r20
    2e42:	12 96       	adiw	r26, 0x02	; 2
    2e44:	1c 93       	st	X, r17
    2e46:	12 97       	sbiw	r26, 0x02	; 2
    2e48:	13 81       	ldd	r17, Z+3	; 0x03
    2e4a:	15 2b       	or	r17, r21
    2e4c:	13 96       	adiw	r26, 0x03	; 3
    2e4e:	1c 93       	st	X, r17
    2e50:	13 97       	sbiw	r26, 0x03	; 3
    2e52:	14 81       	ldd	r17, Z+4	; 0x04
    2e54:	16 2b       	or	r17, r22
    2e56:	14 96       	adiw	r26, 0x04	; 4
    2e58:	1c 93       	st	X, r17
    2e5a:	14 97       	sbiw	r26, 0x04	; 4
    2e5c:	15 81       	ldd	r17, Z+5	; 0x05
    2e5e:	17 2b       	or	r17, r23
    2e60:	15 96       	adiw	r26, 0x05	; 5
    2e62:	1c 93       	st	X, r17
    2e64:	15 97       	sbiw	r26, 0x05	; 5
    2e66:	16 81       	ldd	r17, Z+6	; 0x06
    2e68:	18 2b       	or	r17, r24
    2e6a:	16 96       	adiw	r26, 0x06	; 6
    2e6c:	1c 93       	st	X, r17
    2e6e:	16 97       	sbiw	r26, 0x06	; 6
    2e70:	e7 81       	ldd	r30, Z+7	; 0x07
    2e72:	8e 2f       	mov	r24, r30
    2e74:	89 2b       	or	r24, r25
    2e76:	17 96       	adiw	r26, 0x07	; 7
    2e78:	8c 93       	st	X, r24

	Local_u64Check |= ((u64)DIO_enuSetPinDirection(D4_PORT, D4_PIN, DIO_u8OUTPUT) << 9 );
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	63 e0       	ldi	r22, 0x03	; 3
    2e7e:	41 e0       	ldi	r20, 0x01	; 1
    2e80:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    2e84:	a8 2e       	mov	r10, r24
    2e86:	bb 24       	eor	r11, r11
    2e88:	cc 24       	eor	r12, r12
    2e8a:	dd 24       	eor	r13, r13
    2e8c:	ee 24       	eor	r14, r14
    2e8e:	ff 24       	eor	r15, r15
    2e90:	87 01       	movw	r16, r14
    2e92:	2a 2d       	mov	r18, r10
    2e94:	3b 2d       	mov	r19, r11
    2e96:	4c 2d       	mov	r20, r12
    2e98:	5d 2d       	mov	r21, r13
    2e9a:	6e 2d       	mov	r22, r14
    2e9c:	7f 2d       	mov	r23, r15
    2e9e:	80 2f       	mov	r24, r16
    2ea0:	91 2f       	mov	r25, r17
    2ea2:	09 e0       	ldi	r16, 0x09	; 9
    2ea4:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    2ea8:	a2 2e       	mov	r10, r18
    2eaa:	b3 2e       	mov	r11, r19
    2eac:	c4 2e       	mov	r12, r20
    2eae:	d5 2e       	mov	r13, r21
    2eb0:	e6 2e       	mov	r14, r22
    2eb2:	f7 2e       	mov	r15, r23
    2eb4:	08 2f       	mov	r16, r24
    2eb6:	19 2f       	mov	r17, r25
    2eb8:	2a 2d       	mov	r18, r10
    2eba:	3b 2d       	mov	r19, r11
    2ebc:	4c 2d       	mov	r20, r12
    2ebe:	5d 2d       	mov	r21, r13
    2ec0:	6e 2d       	mov	r22, r14
    2ec2:	7f 2d       	mov	r23, r15
    2ec4:	80 2f       	mov	r24, r16
    2ec6:	91 2f       	mov	r25, r17
    2ec8:	de 01       	movw	r26, r28
    2eca:	da 96       	adiw	r26, 0x3a	; 58
    2ecc:	fe 01       	movw	r30, r28
    2ece:	fa 96       	adiw	r30, 0x3a	; 58
    2ed0:	10 81       	ld	r17, Z
    2ed2:	12 2b       	or	r17, r18
    2ed4:	1c 93       	st	X, r17
    2ed6:	11 81       	ldd	r17, Z+1	; 0x01
    2ed8:	13 2b       	or	r17, r19
    2eda:	11 96       	adiw	r26, 0x01	; 1
    2edc:	1c 93       	st	X, r17
    2ede:	11 97       	sbiw	r26, 0x01	; 1
    2ee0:	12 81       	ldd	r17, Z+2	; 0x02
    2ee2:	14 2b       	or	r17, r20
    2ee4:	12 96       	adiw	r26, 0x02	; 2
    2ee6:	1c 93       	st	X, r17
    2ee8:	12 97       	sbiw	r26, 0x02	; 2
    2eea:	13 81       	ldd	r17, Z+3	; 0x03
    2eec:	15 2b       	or	r17, r21
    2eee:	13 96       	adiw	r26, 0x03	; 3
    2ef0:	1c 93       	st	X, r17
    2ef2:	13 97       	sbiw	r26, 0x03	; 3
    2ef4:	14 81       	ldd	r17, Z+4	; 0x04
    2ef6:	16 2b       	or	r17, r22
    2ef8:	14 96       	adiw	r26, 0x04	; 4
    2efa:	1c 93       	st	X, r17
    2efc:	14 97       	sbiw	r26, 0x04	; 4
    2efe:	15 81       	ldd	r17, Z+5	; 0x05
    2f00:	17 2b       	or	r17, r23
    2f02:	15 96       	adiw	r26, 0x05	; 5
    2f04:	1c 93       	st	X, r17
    2f06:	15 97       	sbiw	r26, 0x05	; 5
    2f08:	16 81       	ldd	r17, Z+6	; 0x06
    2f0a:	18 2b       	or	r17, r24
    2f0c:	16 96       	adiw	r26, 0x06	; 6
    2f0e:	1c 93       	st	X, r17
    2f10:	16 97       	sbiw	r26, 0x06	; 6
    2f12:	e7 81       	ldd	r30, Z+7	; 0x07
    2f14:	8e 2f       	mov	r24, r30
    2f16:	89 2b       	or	r24, r25
    2f18:	17 96       	adiw	r26, 0x07	; 7
    2f1a:	8c 93       	st	X, r24
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(D5_PORT, D5_PIN, DIO_u8OUTPUT) << 12);
    2f1c:	80 e0       	ldi	r24, 0x00	; 0
    2f1e:	64 e0       	ldi	r22, 0x04	; 4
    2f20:	41 e0       	ldi	r20, 0x01	; 1
    2f22:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    2f26:	a8 2e       	mov	r10, r24
    2f28:	bb 24       	eor	r11, r11
    2f2a:	cc 24       	eor	r12, r12
    2f2c:	dd 24       	eor	r13, r13
    2f2e:	ee 24       	eor	r14, r14
    2f30:	ff 24       	eor	r15, r15
    2f32:	87 01       	movw	r16, r14
    2f34:	2a 2d       	mov	r18, r10
    2f36:	3b 2d       	mov	r19, r11
    2f38:	4c 2d       	mov	r20, r12
    2f3a:	5d 2d       	mov	r21, r13
    2f3c:	6e 2d       	mov	r22, r14
    2f3e:	7f 2d       	mov	r23, r15
    2f40:	80 2f       	mov	r24, r16
    2f42:	91 2f       	mov	r25, r17
    2f44:	0c e0       	ldi	r16, 0x0C	; 12
    2f46:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    2f4a:	a2 2e       	mov	r10, r18
    2f4c:	b3 2e       	mov	r11, r19
    2f4e:	c4 2e       	mov	r12, r20
    2f50:	d5 2e       	mov	r13, r21
    2f52:	e6 2e       	mov	r14, r22
    2f54:	f7 2e       	mov	r15, r23
    2f56:	08 2f       	mov	r16, r24
    2f58:	19 2f       	mov	r17, r25
    2f5a:	2a 2d       	mov	r18, r10
    2f5c:	3b 2d       	mov	r19, r11
    2f5e:	4c 2d       	mov	r20, r12
    2f60:	5d 2d       	mov	r21, r13
    2f62:	6e 2d       	mov	r22, r14
    2f64:	7f 2d       	mov	r23, r15
    2f66:	80 2f       	mov	r24, r16
    2f68:	91 2f       	mov	r25, r17
    2f6a:	de 01       	movw	r26, r28
    2f6c:	da 96       	adiw	r26, 0x3a	; 58
    2f6e:	fe 01       	movw	r30, r28
    2f70:	fa 96       	adiw	r30, 0x3a	; 58
    2f72:	10 81       	ld	r17, Z
    2f74:	12 2b       	or	r17, r18
    2f76:	1c 93       	st	X, r17
    2f78:	11 81       	ldd	r17, Z+1	; 0x01
    2f7a:	13 2b       	or	r17, r19
    2f7c:	11 96       	adiw	r26, 0x01	; 1
    2f7e:	1c 93       	st	X, r17
    2f80:	11 97       	sbiw	r26, 0x01	; 1
    2f82:	12 81       	ldd	r17, Z+2	; 0x02
    2f84:	14 2b       	or	r17, r20
    2f86:	12 96       	adiw	r26, 0x02	; 2
    2f88:	1c 93       	st	X, r17
    2f8a:	12 97       	sbiw	r26, 0x02	; 2
    2f8c:	13 81       	ldd	r17, Z+3	; 0x03
    2f8e:	15 2b       	or	r17, r21
    2f90:	13 96       	adiw	r26, 0x03	; 3
    2f92:	1c 93       	st	X, r17
    2f94:	13 97       	sbiw	r26, 0x03	; 3
    2f96:	14 81       	ldd	r17, Z+4	; 0x04
    2f98:	16 2b       	or	r17, r22
    2f9a:	14 96       	adiw	r26, 0x04	; 4
    2f9c:	1c 93       	st	X, r17
    2f9e:	14 97       	sbiw	r26, 0x04	; 4
    2fa0:	15 81       	ldd	r17, Z+5	; 0x05
    2fa2:	17 2b       	or	r17, r23
    2fa4:	15 96       	adiw	r26, 0x05	; 5
    2fa6:	1c 93       	st	X, r17
    2fa8:	15 97       	sbiw	r26, 0x05	; 5
    2faa:	16 81       	ldd	r17, Z+6	; 0x06
    2fac:	18 2b       	or	r17, r24
    2fae:	16 96       	adiw	r26, 0x06	; 6
    2fb0:	1c 93       	st	X, r17
    2fb2:	16 97       	sbiw	r26, 0x06	; 6
    2fb4:	e7 81       	ldd	r30, Z+7	; 0x07
    2fb6:	8e 2f       	mov	r24, r30
    2fb8:	89 2b       	or	r24, r25
    2fba:	17 96       	adiw	r26, 0x07	; 7
    2fbc:	8c 93       	st	X, r24
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(D6_PORT, D6_PIN, DIO_u8OUTPUT) << 15);
    2fbe:	80 e0       	ldi	r24, 0x00	; 0
    2fc0:	65 e0       	ldi	r22, 0x05	; 5
    2fc2:	41 e0       	ldi	r20, 0x01	; 1
    2fc4:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    2fc8:	a8 2e       	mov	r10, r24
    2fca:	bb 24       	eor	r11, r11
    2fcc:	cc 24       	eor	r12, r12
    2fce:	dd 24       	eor	r13, r13
    2fd0:	ee 24       	eor	r14, r14
    2fd2:	ff 24       	eor	r15, r15
    2fd4:	87 01       	movw	r16, r14
    2fd6:	2a 2d       	mov	r18, r10
    2fd8:	3b 2d       	mov	r19, r11
    2fda:	4c 2d       	mov	r20, r12
    2fdc:	5d 2d       	mov	r21, r13
    2fde:	6e 2d       	mov	r22, r14
    2fe0:	7f 2d       	mov	r23, r15
    2fe2:	80 2f       	mov	r24, r16
    2fe4:	91 2f       	mov	r25, r17
    2fe6:	0f e0       	ldi	r16, 0x0F	; 15
    2fe8:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    2fec:	a2 2e       	mov	r10, r18
    2fee:	b3 2e       	mov	r11, r19
    2ff0:	c4 2e       	mov	r12, r20
    2ff2:	d5 2e       	mov	r13, r21
    2ff4:	e6 2e       	mov	r14, r22
    2ff6:	f7 2e       	mov	r15, r23
    2ff8:	08 2f       	mov	r16, r24
    2ffa:	19 2f       	mov	r17, r25
    2ffc:	2a 2d       	mov	r18, r10
    2ffe:	3b 2d       	mov	r19, r11
    3000:	4c 2d       	mov	r20, r12
    3002:	5d 2d       	mov	r21, r13
    3004:	6e 2d       	mov	r22, r14
    3006:	7f 2d       	mov	r23, r15
    3008:	80 2f       	mov	r24, r16
    300a:	91 2f       	mov	r25, r17
    300c:	de 01       	movw	r26, r28
    300e:	da 96       	adiw	r26, 0x3a	; 58
    3010:	fe 01       	movw	r30, r28
    3012:	fa 96       	adiw	r30, 0x3a	; 58
    3014:	10 81       	ld	r17, Z
    3016:	12 2b       	or	r17, r18
    3018:	1c 93       	st	X, r17
    301a:	11 81       	ldd	r17, Z+1	; 0x01
    301c:	13 2b       	or	r17, r19
    301e:	11 96       	adiw	r26, 0x01	; 1
    3020:	1c 93       	st	X, r17
    3022:	11 97       	sbiw	r26, 0x01	; 1
    3024:	12 81       	ldd	r17, Z+2	; 0x02
    3026:	14 2b       	or	r17, r20
    3028:	12 96       	adiw	r26, 0x02	; 2
    302a:	1c 93       	st	X, r17
    302c:	12 97       	sbiw	r26, 0x02	; 2
    302e:	13 81       	ldd	r17, Z+3	; 0x03
    3030:	15 2b       	or	r17, r21
    3032:	13 96       	adiw	r26, 0x03	; 3
    3034:	1c 93       	st	X, r17
    3036:	13 97       	sbiw	r26, 0x03	; 3
    3038:	14 81       	ldd	r17, Z+4	; 0x04
    303a:	16 2b       	or	r17, r22
    303c:	14 96       	adiw	r26, 0x04	; 4
    303e:	1c 93       	st	X, r17
    3040:	14 97       	sbiw	r26, 0x04	; 4
    3042:	15 81       	ldd	r17, Z+5	; 0x05
    3044:	17 2b       	or	r17, r23
    3046:	15 96       	adiw	r26, 0x05	; 5
    3048:	1c 93       	st	X, r17
    304a:	15 97       	sbiw	r26, 0x05	; 5
    304c:	16 81       	ldd	r17, Z+6	; 0x06
    304e:	18 2b       	or	r17, r24
    3050:	16 96       	adiw	r26, 0x06	; 6
    3052:	1c 93       	st	X, r17
    3054:	16 97       	sbiw	r26, 0x06	; 6
    3056:	e7 81       	ldd	r30, Z+7	; 0x07
    3058:	8e 2f       	mov	r24, r30
    305a:	89 2b       	or	r24, r25
    305c:	17 96       	adiw	r26, 0x07	; 7
    305e:	8c 93       	st	X, r24
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(D7_PORT, D7_PIN, DIO_u8OUTPUT) << 18);
    3060:	80 e0       	ldi	r24, 0x00	; 0
    3062:	66 e0       	ldi	r22, 0x06	; 6
    3064:	41 e0       	ldi	r20, 0x01	; 1
    3066:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    306a:	a8 2e       	mov	r10, r24
    306c:	bb 24       	eor	r11, r11
    306e:	cc 24       	eor	r12, r12
    3070:	dd 24       	eor	r13, r13
    3072:	ee 24       	eor	r14, r14
    3074:	ff 24       	eor	r15, r15
    3076:	87 01       	movw	r16, r14
    3078:	2a 2d       	mov	r18, r10
    307a:	3b 2d       	mov	r19, r11
    307c:	4c 2d       	mov	r20, r12
    307e:	5d 2d       	mov	r21, r13
    3080:	6e 2d       	mov	r22, r14
    3082:	7f 2d       	mov	r23, r15
    3084:	80 2f       	mov	r24, r16
    3086:	91 2f       	mov	r25, r17
    3088:	02 e1       	ldi	r16, 0x12	; 18
    308a:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    308e:	a2 2e       	mov	r10, r18
    3090:	b3 2e       	mov	r11, r19
    3092:	c4 2e       	mov	r12, r20
    3094:	d5 2e       	mov	r13, r21
    3096:	e6 2e       	mov	r14, r22
    3098:	f7 2e       	mov	r15, r23
    309a:	08 2f       	mov	r16, r24
    309c:	19 2f       	mov	r17, r25
    309e:	2a 2d       	mov	r18, r10
    30a0:	3b 2d       	mov	r19, r11
    30a2:	4c 2d       	mov	r20, r12
    30a4:	5d 2d       	mov	r21, r13
    30a6:	6e 2d       	mov	r22, r14
    30a8:	7f 2d       	mov	r23, r15
    30aa:	80 2f       	mov	r24, r16
    30ac:	91 2f       	mov	r25, r17
    30ae:	de 01       	movw	r26, r28
    30b0:	da 96       	adiw	r26, 0x3a	; 58
    30b2:	fe 01       	movw	r30, r28
    30b4:	fa 96       	adiw	r30, 0x3a	; 58
    30b6:	10 81       	ld	r17, Z
    30b8:	12 2b       	or	r17, r18
    30ba:	1c 93       	st	X, r17
    30bc:	11 81       	ldd	r17, Z+1	; 0x01
    30be:	13 2b       	or	r17, r19
    30c0:	11 96       	adiw	r26, 0x01	; 1
    30c2:	1c 93       	st	X, r17
    30c4:	11 97       	sbiw	r26, 0x01	; 1
    30c6:	12 81       	ldd	r17, Z+2	; 0x02
    30c8:	14 2b       	or	r17, r20
    30ca:	12 96       	adiw	r26, 0x02	; 2
    30cc:	1c 93       	st	X, r17
    30ce:	12 97       	sbiw	r26, 0x02	; 2
    30d0:	13 81       	ldd	r17, Z+3	; 0x03
    30d2:	15 2b       	or	r17, r21
    30d4:	13 96       	adiw	r26, 0x03	; 3
    30d6:	1c 93       	st	X, r17
    30d8:	13 97       	sbiw	r26, 0x03	; 3
    30da:	14 81       	ldd	r17, Z+4	; 0x04
    30dc:	16 2b       	or	r17, r22
    30de:	14 96       	adiw	r26, 0x04	; 4
    30e0:	1c 93       	st	X, r17
    30e2:	14 97       	sbiw	r26, 0x04	; 4
    30e4:	15 81       	ldd	r17, Z+5	; 0x05
    30e6:	17 2b       	or	r17, r23
    30e8:	15 96       	adiw	r26, 0x05	; 5
    30ea:	1c 93       	st	X, r17
    30ec:	15 97       	sbiw	r26, 0x05	; 5
    30ee:	16 81       	ldd	r17, Z+6	; 0x06
    30f0:	18 2b       	or	r17, r24
    30f2:	16 96       	adiw	r26, 0x06	; 6
    30f4:	1c 93       	st	X, r17
    30f6:	16 97       	sbiw	r26, 0x06	; 6
    30f8:	e7 81       	ldd	r30, Z+7	; 0x07
    30fa:	8e 2f       	mov	r24, r30
    30fc:	89 2b       	or	r24, r25
    30fe:	17 96       	adiw	r26, 0x07	; 7
    3100:	8c 93       	st	X, r24
	}

#elif  LCD_MODE == FOUR_BIT

	// Function Set
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0x20) << 21);
    3102:	80 e2       	ldi	r24, 0x20	; 32
    3104:	0e 94 a2 20 	call	0x4144	; 0x4144 <LCD_inenuSendCommand>
    3108:	a8 2e       	mov	r10, r24
    310a:	bb 24       	eor	r11, r11
    310c:	cc 24       	eor	r12, r12
    310e:	dd 24       	eor	r13, r13
    3110:	ee 24       	eor	r14, r14
    3112:	ff 24       	eor	r15, r15
    3114:	87 01       	movw	r16, r14
    3116:	2a 2d       	mov	r18, r10
    3118:	3b 2d       	mov	r19, r11
    311a:	4c 2d       	mov	r20, r12
    311c:	5d 2d       	mov	r21, r13
    311e:	6e 2d       	mov	r22, r14
    3120:	7f 2d       	mov	r23, r15
    3122:	80 2f       	mov	r24, r16
    3124:	91 2f       	mov	r25, r17
    3126:	05 e1       	ldi	r16, 0x15	; 21
    3128:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    312c:	a2 2e       	mov	r10, r18
    312e:	b3 2e       	mov	r11, r19
    3130:	c4 2e       	mov	r12, r20
    3132:	d5 2e       	mov	r13, r21
    3134:	e6 2e       	mov	r14, r22
    3136:	f7 2e       	mov	r15, r23
    3138:	08 2f       	mov	r16, r24
    313a:	19 2f       	mov	r17, r25
    313c:	2a 2d       	mov	r18, r10
    313e:	3b 2d       	mov	r19, r11
    3140:	4c 2d       	mov	r20, r12
    3142:	5d 2d       	mov	r21, r13
    3144:	6e 2d       	mov	r22, r14
    3146:	7f 2d       	mov	r23, r15
    3148:	80 2f       	mov	r24, r16
    314a:	91 2f       	mov	r25, r17
    314c:	de 01       	movw	r26, r28
    314e:	da 96       	adiw	r26, 0x3a	; 58
    3150:	fe 01       	movw	r30, r28
    3152:	fa 96       	adiw	r30, 0x3a	; 58
    3154:	10 81       	ld	r17, Z
    3156:	12 2b       	or	r17, r18
    3158:	1c 93       	st	X, r17
    315a:	11 81       	ldd	r17, Z+1	; 0x01
    315c:	13 2b       	or	r17, r19
    315e:	11 96       	adiw	r26, 0x01	; 1
    3160:	1c 93       	st	X, r17
    3162:	11 97       	sbiw	r26, 0x01	; 1
    3164:	12 81       	ldd	r17, Z+2	; 0x02
    3166:	14 2b       	or	r17, r20
    3168:	12 96       	adiw	r26, 0x02	; 2
    316a:	1c 93       	st	X, r17
    316c:	12 97       	sbiw	r26, 0x02	; 2
    316e:	13 81       	ldd	r17, Z+3	; 0x03
    3170:	15 2b       	or	r17, r21
    3172:	13 96       	adiw	r26, 0x03	; 3
    3174:	1c 93       	st	X, r17
    3176:	13 97       	sbiw	r26, 0x03	; 3
    3178:	14 81       	ldd	r17, Z+4	; 0x04
    317a:	16 2b       	or	r17, r22
    317c:	14 96       	adiw	r26, 0x04	; 4
    317e:	1c 93       	st	X, r17
    3180:	14 97       	sbiw	r26, 0x04	; 4
    3182:	15 81       	ldd	r17, Z+5	; 0x05
    3184:	17 2b       	or	r17, r23
    3186:	15 96       	adiw	r26, 0x05	; 5
    3188:	1c 93       	st	X, r17
    318a:	15 97       	sbiw	r26, 0x05	; 5
    318c:	16 81       	ldd	r17, Z+6	; 0x06
    318e:	18 2b       	or	r17, r24
    3190:	16 96       	adiw	r26, 0x06	; 6
    3192:	1c 93       	st	X, r17
    3194:	16 97       	sbiw	r26, 0x06	; 6
    3196:	e7 81       	ldd	r30, Z+7	; 0x07
    3198:	8e 2f       	mov	r24, r30
    319a:	89 2b       	or	r24, r25
    319c:	17 96       	adiw	r26, 0x07	; 7
    319e:	8c 93       	st	X, r24
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0x20) << 24);
    31a0:	80 e2       	ldi	r24, 0x20	; 32
    31a2:	0e 94 a2 20 	call	0x4144	; 0x4144 <LCD_inenuSendCommand>
    31a6:	a8 2e       	mov	r10, r24
    31a8:	bb 24       	eor	r11, r11
    31aa:	cc 24       	eor	r12, r12
    31ac:	dd 24       	eor	r13, r13
    31ae:	ee 24       	eor	r14, r14
    31b0:	ff 24       	eor	r15, r15
    31b2:	87 01       	movw	r16, r14
    31b4:	2a 2d       	mov	r18, r10
    31b6:	3b 2d       	mov	r19, r11
    31b8:	4c 2d       	mov	r20, r12
    31ba:	5d 2d       	mov	r21, r13
    31bc:	6e 2d       	mov	r22, r14
    31be:	7f 2d       	mov	r23, r15
    31c0:	80 2f       	mov	r24, r16
    31c2:	91 2f       	mov	r25, r17
    31c4:	08 e1       	ldi	r16, 0x18	; 24
    31c6:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    31ca:	a2 2e       	mov	r10, r18
    31cc:	b3 2e       	mov	r11, r19
    31ce:	c4 2e       	mov	r12, r20
    31d0:	d5 2e       	mov	r13, r21
    31d2:	e6 2e       	mov	r14, r22
    31d4:	f7 2e       	mov	r15, r23
    31d6:	08 2f       	mov	r16, r24
    31d8:	19 2f       	mov	r17, r25
    31da:	2a 2d       	mov	r18, r10
    31dc:	3b 2d       	mov	r19, r11
    31de:	4c 2d       	mov	r20, r12
    31e0:	5d 2d       	mov	r21, r13
    31e2:	6e 2d       	mov	r22, r14
    31e4:	7f 2d       	mov	r23, r15
    31e6:	80 2f       	mov	r24, r16
    31e8:	91 2f       	mov	r25, r17
    31ea:	de 01       	movw	r26, r28
    31ec:	da 96       	adiw	r26, 0x3a	; 58
    31ee:	fe 01       	movw	r30, r28
    31f0:	fa 96       	adiw	r30, 0x3a	; 58
    31f2:	10 81       	ld	r17, Z
    31f4:	12 2b       	or	r17, r18
    31f6:	1c 93       	st	X, r17
    31f8:	11 81       	ldd	r17, Z+1	; 0x01
    31fa:	13 2b       	or	r17, r19
    31fc:	11 96       	adiw	r26, 0x01	; 1
    31fe:	1c 93       	st	X, r17
    3200:	11 97       	sbiw	r26, 0x01	; 1
    3202:	12 81       	ldd	r17, Z+2	; 0x02
    3204:	14 2b       	or	r17, r20
    3206:	12 96       	adiw	r26, 0x02	; 2
    3208:	1c 93       	st	X, r17
    320a:	12 97       	sbiw	r26, 0x02	; 2
    320c:	13 81       	ldd	r17, Z+3	; 0x03
    320e:	15 2b       	or	r17, r21
    3210:	13 96       	adiw	r26, 0x03	; 3
    3212:	1c 93       	st	X, r17
    3214:	13 97       	sbiw	r26, 0x03	; 3
    3216:	14 81       	ldd	r17, Z+4	; 0x04
    3218:	16 2b       	or	r17, r22
    321a:	14 96       	adiw	r26, 0x04	; 4
    321c:	1c 93       	st	X, r17
    321e:	14 97       	sbiw	r26, 0x04	; 4
    3220:	15 81       	ldd	r17, Z+5	; 0x05
    3222:	17 2b       	or	r17, r23
    3224:	15 96       	adiw	r26, 0x05	; 5
    3226:	1c 93       	st	X, r17
    3228:	15 97       	sbiw	r26, 0x05	; 5
    322a:	16 81       	ldd	r17, Z+6	; 0x06
    322c:	18 2b       	or	r17, r24
    322e:	16 96       	adiw	r26, 0x06	; 6
    3230:	1c 93       	st	X, r17
    3232:	16 97       	sbiw	r26, 0x06	; 6
    3234:	e7 81       	ldd	r30, Z+7	; 0x07
    3236:	8e 2f       	mov	r24, r30
    3238:	89 2b       	or	r24, r25
    323a:	17 96       	adiw	r26, 0x07	; 7
    323c:	8c 93       	st	X, r24
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0x80) << 27); //2 lines, 5*7 ,4 bit mode
    323e:	80 e8       	ldi	r24, 0x80	; 128
    3240:	0e 94 a2 20 	call	0x4144	; 0x4144 <LCD_inenuSendCommand>
    3244:	a8 2e       	mov	r10, r24
    3246:	bb 24       	eor	r11, r11
    3248:	cc 24       	eor	r12, r12
    324a:	dd 24       	eor	r13, r13
    324c:	ee 24       	eor	r14, r14
    324e:	ff 24       	eor	r15, r15
    3250:	87 01       	movw	r16, r14
    3252:	2a 2d       	mov	r18, r10
    3254:	3b 2d       	mov	r19, r11
    3256:	4c 2d       	mov	r20, r12
    3258:	5d 2d       	mov	r21, r13
    325a:	6e 2d       	mov	r22, r14
    325c:	7f 2d       	mov	r23, r15
    325e:	80 2f       	mov	r24, r16
    3260:	91 2f       	mov	r25, r17
    3262:	0b e1       	ldi	r16, 0x1B	; 27
    3264:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    3268:	a2 2e       	mov	r10, r18
    326a:	b3 2e       	mov	r11, r19
    326c:	c4 2e       	mov	r12, r20
    326e:	d5 2e       	mov	r13, r21
    3270:	e6 2e       	mov	r14, r22
    3272:	f7 2e       	mov	r15, r23
    3274:	08 2f       	mov	r16, r24
    3276:	19 2f       	mov	r17, r25
    3278:	2a 2d       	mov	r18, r10
    327a:	3b 2d       	mov	r19, r11
    327c:	4c 2d       	mov	r20, r12
    327e:	5d 2d       	mov	r21, r13
    3280:	6e 2d       	mov	r22, r14
    3282:	7f 2d       	mov	r23, r15
    3284:	80 2f       	mov	r24, r16
    3286:	91 2f       	mov	r25, r17
    3288:	de 01       	movw	r26, r28
    328a:	da 96       	adiw	r26, 0x3a	; 58
    328c:	fe 01       	movw	r30, r28
    328e:	fa 96       	adiw	r30, 0x3a	; 58
    3290:	10 81       	ld	r17, Z
    3292:	12 2b       	or	r17, r18
    3294:	1c 93       	st	X, r17
    3296:	11 81       	ldd	r17, Z+1	; 0x01
    3298:	13 2b       	or	r17, r19
    329a:	11 96       	adiw	r26, 0x01	; 1
    329c:	1c 93       	st	X, r17
    329e:	11 97       	sbiw	r26, 0x01	; 1
    32a0:	12 81       	ldd	r17, Z+2	; 0x02
    32a2:	14 2b       	or	r17, r20
    32a4:	12 96       	adiw	r26, 0x02	; 2
    32a6:	1c 93       	st	X, r17
    32a8:	12 97       	sbiw	r26, 0x02	; 2
    32aa:	13 81       	ldd	r17, Z+3	; 0x03
    32ac:	15 2b       	or	r17, r21
    32ae:	13 96       	adiw	r26, 0x03	; 3
    32b0:	1c 93       	st	X, r17
    32b2:	13 97       	sbiw	r26, 0x03	; 3
    32b4:	14 81       	ldd	r17, Z+4	; 0x04
    32b6:	16 2b       	or	r17, r22
    32b8:	14 96       	adiw	r26, 0x04	; 4
    32ba:	1c 93       	st	X, r17
    32bc:	14 97       	sbiw	r26, 0x04	; 4
    32be:	15 81       	ldd	r17, Z+5	; 0x05
    32c0:	17 2b       	or	r17, r23
    32c2:	15 96       	adiw	r26, 0x05	; 5
    32c4:	1c 93       	st	X, r17
    32c6:	15 97       	sbiw	r26, 0x05	; 5
    32c8:	16 81       	ldd	r17, Z+6	; 0x06
    32ca:	18 2b       	or	r17, r24
    32cc:	16 96       	adiw	r26, 0x06	; 6
    32ce:	1c 93       	st	X, r17
    32d0:	16 97       	sbiw	r26, 0x06	; 6
    32d2:	e7 81       	ldd	r30, Z+7	; 0x07
    32d4:	8e 2f       	mov	r24, r30
    32d6:	89 2b       	or	r24, r25
    32d8:	17 96       	adiw	r26, 0x07	; 7
    32da:	8c 93       	st	X, r24
    32dc:	80 e0       	ldi	r24, 0x00	; 0
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	a0 e8       	ldi	r26, 0x80	; 128
    32e2:	bf e3       	ldi	r27, 0x3F	; 63
    32e4:	8f a3       	std	Y+39, r24	; 0x27
    32e6:	98 a7       	std	Y+40, r25	; 0x28
    32e8:	a9 a7       	std	Y+41, r26	; 0x29
    32ea:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ec:	6f a1       	ldd	r22, Y+39	; 0x27
    32ee:	78 a5       	ldd	r23, Y+40	; 0x28
    32f0:	89 a5       	ldd	r24, Y+41	; 0x29
    32f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	4a e7       	ldi	r20, 0x7A	; 122
    32fa:	53 e4       	ldi	r21, 0x43	; 67
    32fc:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3300:	dc 01       	movw	r26, r24
    3302:	cb 01       	movw	r24, r22
    3304:	8b a3       	std	Y+35, r24	; 0x23
    3306:	9c a3       	std	Y+36, r25	; 0x24
    3308:	ad a3       	std	Y+37, r26	; 0x25
    330a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    330c:	6b a1       	ldd	r22, Y+35	; 0x23
    330e:	7c a1       	ldd	r23, Y+36	; 0x24
    3310:	8d a1       	ldd	r24, Y+37	; 0x25
    3312:	9e a1       	ldd	r25, Y+38	; 0x26
    3314:	20 e0       	ldi	r18, 0x00	; 0
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	40 e8       	ldi	r20, 0x80	; 128
    331a:	5f e3       	ldi	r21, 0x3F	; 63
    331c:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    3320:	88 23       	and	r24, r24
    3322:	2c f4       	brge	.+10     	; 0x332e <LCD_enuInit+0x76c>
		__ticks = 1;
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	9a a3       	std	Y+34, r25	; 0x22
    332a:	89 a3       	std	Y+33, r24	; 0x21
    332c:	3f c0       	rjmp	.+126    	; 0x33ac <LCD_enuInit+0x7ea>
	else if (__tmp > 65535)
    332e:	6b a1       	ldd	r22, Y+35	; 0x23
    3330:	7c a1       	ldd	r23, Y+36	; 0x24
    3332:	8d a1       	ldd	r24, Y+37	; 0x25
    3334:	9e a1       	ldd	r25, Y+38	; 0x26
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	3f ef       	ldi	r19, 0xFF	; 255
    333a:	4f e7       	ldi	r20, 0x7F	; 127
    333c:	57 e4       	ldi	r21, 0x47	; 71
    333e:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    3342:	18 16       	cp	r1, r24
    3344:	4c f5       	brge	.+82     	; 0x3398 <LCD_enuInit+0x7d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3346:	6f a1       	ldd	r22, Y+39	; 0x27
    3348:	78 a5       	ldd	r23, Y+40	; 0x28
    334a:	89 a5       	ldd	r24, Y+41	; 0x29
    334c:	9a a5       	ldd	r25, Y+42	; 0x2a
    334e:	20 e0       	ldi	r18, 0x00	; 0
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	40 e2       	ldi	r20, 0x20	; 32
    3354:	51 e4       	ldi	r21, 0x41	; 65
    3356:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	bc 01       	movw	r22, r24
    3360:	cd 01       	movw	r24, r26
    3362:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3366:	dc 01       	movw	r26, r24
    3368:	cb 01       	movw	r24, r22
    336a:	9a a3       	std	Y+34, r25	; 0x22
    336c:	89 a3       	std	Y+33, r24	; 0x21
    336e:	0f c0       	rjmp	.+30     	; 0x338e <LCD_enuInit+0x7cc>
    3370:	89 e1       	ldi	r24, 0x19	; 25
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	98 a3       	std	Y+32, r25	; 0x20
    3376:	8f 8f       	std	Y+31, r24	; 0x1f
    3378:	8f 8d       	ldd	r24, Y+31	; 0x1f
    337a:	98 a1       	ldd	r25, Y+32	; 0x20
    337c:	01 97       	sbiw	r24, 0x01	; 1
    337e:	f1 f7       	brne	.-4      	; 0x337c <LCD_enuInit+0x7ba>
    3380:	98 a3       	std	Y+32, r25	; 0x20
    3382:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3384:	89 a1       	ldd	r24, Y+33	; 0x21
    3386:	9a a1       	ldd	r25, Y+34	; 0x22
    3388:	01 97       	sbiw	r24, 0x01	; 1
    338a:	9a a3       	std	Y+34, r25	; 0x22
    338c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    338e:	89 a1       	ldd	r24, Y+33	; 0x21
    3390:	9a a1       	ldd	r25, Y+34	; 0x22
    3392:	00 97       	sbiw	r24, 0x00	; 0
    3394:	69 f7       	brne	.-38     	; 0x3370 <LCD_enuInit+0x7ae>
    3396:	14 c0       	rjmp	.+40     	; 0x33c0 <LCD_enuInit+0x7fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3398:	6b a1       	ldd	r22, Y+35	; 0x23
    339a:	7c a1       	ldd	r23, Y+36	; 0x24
    339c:	8d a1       	ldd	r24, Y+37	; 0x25
    339e:	9e a1       	ldd	r25, Y+38	; 0x26
    33a0:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    33a4:	dc 01       	movw	r26, r24
    33a6:	cb 01       	movw	r24, r22
    33a8:	9a a3       	std	Y+34, r25	; 0x22
    33aa:	89 a3       	std	Y+33, r24	; 0x21
    33ac:	89 a1       	ldd	r24, Y+33	; 0x21
    33ae:	9a a1       	ldd	r25, Y+34	; 0x22
    33b0:	9e 8f       	std	Y+30, r25	; 0x1e
    33b2:	8d 8f       	std	Y+29, r24	; 0x1d
    33b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    33b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    33b8:	01 97       	sbiw	r24, 0x01	; 1
    33ba:	f1 f7       	brne	.-4      	; 0x33b8 <LCD_enuInit+0x7f6>
    33bc:	9e 8f       	std	Y+30, r25	; 0x1e
    33be:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	//Display ON
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0x00) << 30);
    33c0:	80 e0       	ldi	r24, 0x00	; 0
    33c2:	0e 94 a2 20 	call	0x4144	; 0x4144 <LCD_inenuSendCommand>
    33c6:	a8 2e       	mov	r10, r24
    33c8:	bb 24       	eor	r11, r11
    33ca:	cc 24       	eor	r12, r12
    33cc:	dd 24       	eor	r13, r13
    33ce:	ee 24       	eor	r14, r14
    33d0:	ff 24       	eor	r15, r15
    33d2:	87 01       	movw	r16, r14
    33d4:	2a 2d       	mov	r18, r10
    33d6:	3b 2d       	mov	r19, r11
    33d8:	4c 2d       	mov	r20, r12
    33da:	5d 2d       	mov	r21, r13
    33dc:	6e 2d       	mov	r22, r14
    33de:	7f 2d       	mov	r23, r15
    33e0:	80 2f       	mov	r24, r16
    33e2:	91 2f       	mov	r25, r17
    33e4:	0e e1       	ldi	r16, 0x1E	; 30
    33e6:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    33ea:	a2 2e       	mov	r10, r18
    33ec:	b3 2e       	mov	r11, r19
    33ee:	c4 2e       	mov	r12, r20
    33f0:	d5 2e       	mov	r13, r21
    33f2:	e6 2e       	mov	r14, r22
    33f4:	f7 2e       	mov	r15, r23
    33f6:	08 2f       	mov	r16, r24
    33f8:	19 2f       	mov	r17, r25
    33fa:	2a 2d       	mov	r18, r10
    33fc:	3b 2d       	mov	r19, r11
    33fe:	4c 2d       	mov	r20, r12
    3400:	5d 2d       	mov	r21, r13
    3402:	6e 2d       	mov	r22, r14
    3404:	7f 2d       	mov	r23, r15
    3406:	80 2f       	mov	r24, r16
    3408:	91 2f       	mov	r25, r17
    340a:	de 01       	movw	r26, r28
    340c:	da 96       	adiw	r26, 0x3a	; 58
    340e:	fe 01       	movw	r30, r28
    3410:	fa 96       	adiw	r30, 0x3a	; 58
    3412:	10 81       	ld	r17, Z
    3414:	12 2b       	or	r17, r18
    3416:	1c 93       	st	X, r17
    3418:	11 81       	ldd	r17, Z+1	; 0x01
    341a:	13 2b       	or	r17, r19
    341c:	11 96       	adiw	r26, 0x01	; 1
    341e:	1c 93       	st	X, r17
    3420:	11 97       	sbiw	r26, 0x01	; 1
    3422:	12 81       	ldd	r17, Z+2	; 0x02
    3424:	14 2b       	or	r17, r20
    3426:	12 96       	adiw	r26, 0x02	; 2
    3428:	1c 93       	st	X, r17
    342a:	12 97       	sbiw	r26, 0x02	; 2
    342c:	13 81       	ldd	r17, Z+3	; 0x03
    342e:	15 2b       	or	r17, r21
    3430:	13 96       	adiw	r26, 0x03	; 3
    3432:	1c 93       	st	X, r17
    3434:	13 97       	sbiw	r26, 0x03	; 3
    3436:	14 81       	ldd	r17, Z+4	; 0x04
    3438:	16 2b       	or	r17, r22
    343a:	14 96       	adiw	r26, 0x04	; 4
    343c:	1c 93       	st	X, r17
    343e:	14 97       	sbiw	r26, 0x04	; 4
    3440:	15 81       	ldd	r17, Z+5	; 0x05
    3442:	17 2b       	or	r17, r23
    3444:	15 96       	adiw	r26, 0x05	; 5
    3446:	1c 93       	st	X, r17
    3448:	15 97       	sbiw	r26, 0x05	; 5
    344a:	16 81       	ldd	r17, Z+6	; 0x06
    344c:	18 2b       	or	r17, r24
    344e:	16 96       	adiw	r26, 0x06	; 6
    3450:	1c 93       	st	X, r17
    3452:	16 97       	sbiw	r26, 0x06	; 6
    3454:	e7 81       	ldd	r30, Z+7	; 0x07
    3456:	8e 2f       	mov	r24, r30
    3458:	89 2b       	or	r24, r25
    345a:	17 96       	adiw	r26, 0x07	; 7
    345c:	8c 93       	st	X, r24
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0xf0) << 33); //cursor appear, blink, LCD ON
    345e:	80 ef       	ldi	r24, 0xF0	; 240
    3460:	0e 94 a2 20 	call	0x4144	; 0x4144 <LCD_inenuSendCommand>
    3464:	a8 2e       	mov	r10, r24
    3466:	bb 24       	eor	r11, r11
    3468:	cc 24       	eor	r12, r12
    346a:	dd 24       	eor	r13, r13
    346c:	ee 24       	eor	r14, r14
    346e:	ff 24       	eor	r15, r15
    3470:	87 01       	movw	r16, r14
    3472:	2a 2d       	mov	r18, r10
    3474:	3b 2d       	mov	r19, r11
    3476:	4c 2d       	mov	r20, r12
    3478:	5d 2d       	mov	r21, r13
    347a:	6e 2d       	mov	r22, r14
    347c:	7f 2d       	mov	r23, r15
    347e:	80 2f       	mov	r24, r16
    3480:	91 2f       	mov	r25, r17
    3482:	01 e2       	ldi	r16, 0x21	; 33
    3484:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    3488:	a2 2e       	mov	r10, r18
    348a:	b3 2e       	mov	r11, r19
    348c:	c4 2e       	mov	r12, r20
    348e:	d5 2e       	mov	r13, r21
    3490:	e6 2e       	mov	r14, r22
    3492:	f7 2e       	mov	r15, r23
    3494:	08 2f       	mov	r16, r24
    3496:	19 2f       	mov	r17, r25
    3498:	2a 2d       	mov	r18, r10
    349a:	3b 2d       	mov	r19, r11
    349c:	4c 2d       	mov	r20, r12
    349e:	5d 2d       	mov	r21, r13
    34a0:	6e 2d       	mov	r22, r14
    34a2:	7f 2d       	mov	r23, r15
    34a4:	80 2f       	mov	r24, r16
    34a6:	91 2f       	mov	r25, r17
    34a8:	de 01       	movw	r26, r28
    34aa:	da 96       	adiw	r26, 0x3a	; 58
    34ac:	fe 01       	movw	r30, r28
    34ae:	fa 96       	adiw	r30, 0x3a	; 58
    34b0:	10 81       	ld	r17, Z
    34b2:	12 2b       	or	r17, r18
    34b4:	1c 93       	st	X, r17
    34b6:	11 81       	ldd	r17, Z+1	; 0x01
    34b8:	13 2b       	or	r17, r19
    34ba:	11 96       	adiw	r26, 0x01	; 1
    34bc:	1c 93       	st	X, r17
    34be:	11 97       	sbiw	r26, 0x01	; 1
    34c0:	12 81       	ldd	r17, Z+2	; 0x02
    34c2:	14 2b       	or	r17, r20
    34c4:	12 96       	adiw	r26, 0x02	; 2
    34c6:	1c 93       	st	X, r17
    34c8:	12 97       	sbiw	r26, 0x02	; 2
    34ca:	13 81       	ldd	r17, Z+3	; 0x03
    34cc:	15 2b       	or	r17, r21
    34ce:	13 96       	adiw	r26, 0x03	; 3
    34d0:	1c 93       	st	X, r17
    34d2:	13 97       	sbiw	r26, 0x03	; 3
    34d4:	14 81       	ldd	r17, Z+4	; 0x04
    34d6:	16 2b       	or	r17, r22
    34d8:	14 96       	adiw	r26, 0x04	; 4
    34da:	1c 93       	st	X, r17
    34dc:	14 97       	sbiw	r26, 0x04	; 4
    34de:	15 81       	ldd	r17, Z+5	; 0x05
    34e0:	17 2b       	or	r17, r23
    34e2:	15 96       	adiw	r26, 0x05	; 5
    34e4:	1c 93       	st	X, r17
    34e6:	15 97       	sbiw	r26, 0x05	; 5
    34e8:	16 81       	ldd	r17, Z+6	; 0x06
    34ea:	18 2b       	or	r17, r24
    34ec:	16 96       	adiw	r26, 0x06	; 6
    34ee:	1c 93       	st	X, r17
    34f0:	16 97       	sbiw	r26, 0x06	; 6
    34f2:	e7 81       	ldd	r30, Z+7	; 0x07
    34f4:	8e 2f       	mov	r24, r30
    34f6:	89 2b       	or	r24, r25
    34f8:	17 96       	adiw	r26, 0x07	; 7
    34fa:	8c 93       	st	X, r24
    34fc:	80 e0       	ldi	r24, 0x00	; 0
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	a0 e8       	ldi	r26, 0x80	; 128
    3502:	bf e3       	ldi	r27, 0x3F	; 63
    3504:	89 8f       	std	Y+25, r24	; 0x19
    3506:	9a 8f       	std	Y+26, r25	; 0x1a
    3508:	ab 8f       	std	Y+27, r26	; 0x1b
    350a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    350c:	69 8d       	ldd	r22, Y+25	; 0x19
    350e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3510:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3512:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	4a e7       	ldi	r20, 0x7A	; 122
    351a:	53 e4       	ldi	r21, 0x43	; 67
    351c:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3520:	dc 01       	movw	r26, r24
    3522:	cb 01       	movw	r24, r22
    3524:	8d 8b       	std	Y+21, r24	; 0x15
    3526:	9e 8b       	std	Y+22, r25	; 0x16
    3528:	af 8b       	std	Y+23, r26	; 0x17
    352a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    352c:	6d 89       	ldd	r22, Y+21	; 0x15
    352e:	7e 89       	ldd	r23, Y+22	; 0x16
    3530:	8f 89       	ldd	r24, Y+23	; 0x17
    3532:	98 8d       	ldd	r25, Y+24	; 0x18
    3534:	20 e0       	ldi	r18, 0x00	; 0
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	40 e8       	ldi	r20, 0x80	; 128
    353a:	5f e3       	ldi	r21, 0x3F	; 63
    353c:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    3540:	88 23       	and	r24, r24
    3542:	2c f4       	brge	.+10     	; 0x354e <LCD_enuInit+0x98c>
		__ticks = 1;
    3544:	81 e0       	ldi	r24, 0x01	; 1
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	9c 8b       	std	Y+20, r25	; 0x14
    354a:	8b 8b       	std	Y+19, r24	; 0x13
    354c:	3f c0       	rjmp	.+126    	; 0x35cc <LCD_enuInit+0xa0a>
	else if (__tmp > 65535)
    354e:	6d 89       	ldd	r22, Y+21	; 0x15
    3550:	7e 89       	ldd	r23, Y+22	; 0x16
    3552:	8f 89       	ldd	r24, Y+23	; 0x17
    3554:	98 8d       	ldd	r25, Y+24	; 0x18
    3556:	20 e0       	ldi	r18, 0x00	; 0
    3558:	3f ef       	ldi	r19, 0xFF	; 255
    355a:	4f e7       	ldi	r20, 0x7F	; 127
    355c:	57 e4       	ldi	r21, 0x47	; 71
    355e:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    3562:	18 16       	cp	r1, r24
    3564:	4c f5       	brge	.+82     	; 0x35b8 <LCD_enuInit+0x9f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3566:	69 8d       	ldd	r22, Y+25	; 0x19
    3568:	7a 8d       	ldd	r23, Y+26	; 0x1a
    356a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    356c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    356e:	20 e0       	ldi	r18, 0x00	; 0
    3570:	30 e0       	ldi	r19, 0x00	; 0
    3572:	40 e2       	ldi	r20, 0x20	; 32
    3574:	51 e4       	ldi	r21, 0x41	; 65
    3576:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	bc 01       	movw	r22, r24
    3580:	cd 01       	movw	r24, r26
    3582:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3586:	dc 01       	movw	r26, r24
    3588:	cb 01       	movw	r24, r22
    358a:	9c 8b       	std	Y+20, r25	; 0x14
    358c:	8b 8b       	std	Y+19, r24	; 0x13
    358e:	0f c0       	rjmp	.+30     	; 0x35ae <LCD_enuInit+0x9ec>
    3590:	89 e1       	ldi	r24, 0x19	; 25
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	9a 8b       	std	Y+18, r25	; 0x12
    3596:	89 8b       	std	Y+17, r24	; 0x11
    3598:	89 89       	ldd	r24, Y+17	; 0x11
    359a:	9a 89       	ldd	r25, Y+18	; 0x12
    359c:	01 97       	sbiw	r24, 0x01	; 1
    359e:	f1 f7       	brne	.-4      	; 0x359c <LCD_enuInit+0x9da>
    35a0:	9a 8b       	std	Y+18, r25	; 0x12
    35a2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35a4:	8b 89       	ldd	r24, Y+19	; 0x13
    35a6:	9c 89       	ldd	r25, Y+20	; 0x14
    35a8:	01 97       	sbiw	r24, 0x01	; 1
    35aa:	9c 8b       	std	Y+20, r25	; 0x14
    35ac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35ae:	8b 89       	ldd	r24, Y+19	; 0x13
    35b0:	9c 89       	ldd	r25, Y+20	; 0x14
    35b2:	00 97       	sbiw	r24, 0x00	; 0
    35b4:	69 f7       	brne	.-38     	; 0x3590 <LCD_enuInit+0x9ce>
    35b6:	14 c0       	rjmp	.+40     	; 0x35e0 <LCD_enuInit+0xa1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35b8:	6d 89       	ldd	r22, Y+21	; 0x15
    35ba:	7e 89       	ldd	r23, Y+22	; 0x16
    35bc:	8f 89       	ldd	r24, Y+23	; 0x17
    35be:	98 8d       	ldd	r25, Y+24	; 0x18
    35c0:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    35c4:	dc 01       	movw	r26, r24
    35c6:	cb 01       	movw	r24, r22
    35c8:	9c 8b       	std	Y+20, r25	; 0x14
    35ca:	8b 8b       	std	Y+19, r24	; 0x13
    35cc:	8b 89       	ldd	r24, Y+19	; 0x13
    35ce:	9c 89       	ldd	r25, Y+20	; 0x14
    35d0:	98 8b       	std	Y+16, r25	; 0x10
    35d2:	8f 87       	std	Y+15, r24	; 0x0f
    35d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    35d6:	98 89       	ldd	r25, Y+16	; 0x10
    35d8:	01 97       	sbiw	r24, 0x01	; 1
    35da:	f1 f7       	brne	.-4      	; 0x35d8 <LCD_enuInit+0xa16>
    35dc:	98 8b       	std	Y+16, r25	; 0x10
    35de:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	//Display clear
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0x00) << 36);
    35e0:	80 e0       	ldi	r24, 0x00	; 0
    35e2:	0e 94 a2 20 	call	0x4144	; 0x4144 <LCD_inenuSendCommand>
    35e6:	a8 2e       	mov	r10, r24
    35e8:	bb 24       	eor	r11, r11
    35ea:	cc 24       	eor	r12, r12
    35ec:	dd 24       	eor	r13, r13
    35ee:	ee 24       	eor	r14, r14
    35f0:	ff 24       	eor	r15, r15
    35f2:	87 01       	movw	r16, r14
    35f4:	2a 2d       	mov	r18, r10
    35f6:	3b 2d       	mov	r19, r11
    35f8:	4c 2d       	mov	r20, r12
    35fa:	5d 2d       	mov	r21, r13
    35fc:	6e 2d       	mov	r22, r14
    35fe:	7f 2d       	mov	r23, r15
    3600:	80 2f       	mov	r24, r16
    3602:	91 2f       	mov	r25, r17
    3604:	04 e2       	ldi	r16, 0x24	; 36
    3606:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    360a:	a2 2e       	mov	r10, r18
    360c:	b3 2e       	mov	r11, r19
    360e:	c4 2e       	mov	r12, r20
    3610:	d5 2e       	mov	r13, r21
    3612:	e6 2e       	mov	r14, r22
    3614:	f7 2e       	mov	r15, r23
    3616:	08 2f       	mov	r16, r24
    3618:	19 2f       	mov	r17, r25
    361a:	2a 2d       	mov	r18, r10
    361c:	3b 2d       	mov	r19, r11
    361e:	4c 2d       	mov	r20, r12
    3620:	5d 2d       	mov	r21, r13
    3622:	6e 2d       	mov	r22, r14
    3624:	7f 2d       	mov	r23, r15
    3626:	80 2f       	mov	r24, r16
    3628:	91 2f       	mov	r25, r17
    362a:	de 01       	movw	r26, r28
    362c:	da 96       	adiw	r26, 0x3a	; 58
    362e:	fe 01       	movw	r30, r28
    3630:	fa 96       	adiw	r30, 0x3a	; 58
    3632:	10 81       	ld	r17, Z
    3634:	12 2b       	or	r17, r18
    3636:	1c 93       	st	X, r17
    3638:	11 81       	ldd	r17, Z+1	; 0x01
    363a:	13 2b       	or	r17, r19
    363c:	11 96       	adiw	r26, 0x01	; 1
    363e:	1c 93       	st	X, r17
    3640:	11 97       	sbiw	r26, 0x01	; 1
    3642:	12 81       	ldd	r17, Z+2	; 0x02
    3644:	14 2b       	or	r17, r20
    3646:	12 96       	adiw	r26, 0x02	; 2
    3648:	1c 93       	st	X, r17
    364a:	12 97       	sbiw	r26, 0x02	; 2
    364c:	13 81       	ldd	r17, Z+3	; 0x03
    364e:	15 2b       	or	r17, r21
    3650:	13 96       	adiw	r26, 0x03	; 3
    3652:	1c 93       	st	X, r17
    3654:	13 97       	sbiw	r26, 0x03	; 3
    3656:	14 81       	ldd	r17, Z+4	; 0x04
    3658:	16 2b       	or	r17, r22
    365a:	14 96       	adiw	r26, 0x04	; 4
    365c:	1c 93       	st	X, r17
    365e:	14 97       	sbiw	r26, 0x04	; 4
    3660:	15 81       	ldd	r17, Z+5	; 0x05
    3662:	17 2b       	or	r17, r23
    3664:	15 96       	adiw	r26, 0x05	; 5
    3666:	1c 93       	st	X, r17
    3668:	15 97       	sbiw	r26, 0x05	; 5
    366a:	16 81       	ldd	r17, Z+6	; 0x06
    366c:	18 2b       	or	r17, r24
    366e:	16 96       	adiw	r26, 0x06	; 6
    3670:	1c 93       	st	X, r17
    3672:	16 97       	sbiw	r26, 0x06	; 6
    3674:	e7 81       	ldd	r30, Z+7	; 0x07
    3676:	8e 2f       	mov	r24, r30
    3678:	89 2b       	or	r24, r25
    367a:	17 96       	adiw	r26, 0x07	; 7
    367c:	8c 93       	st	X, r24
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0x10) << 39);
    367e:	80 e1       	ldi	r24, 0x10	; 16
    3680:	0e 94 a2 20 	call	0x4144	; 0x4144 <LCD_inenuSendCommand>
    3684:	a8 2e       	mov	r10, r24
    3686:	bb 24       	eor	r11, r11
    3688:	cc 24       	eor	r12, r12
    368a:	dd 24       	eor	r13, r13
    368c:	ee 24       	eor	r14, r14
    368e:	ff 24       	eor	r15, r15
    3690:	87 01       	movw	r16, r14
    3692:	2a 2d       	mov	r18, r10
    3694:	3b 2d       	mov	r19, r11
    3696:	4c 2d       	mov	r20, r12
    3698:	5d 2d       	mov	r21, r13
    369a:	6e 2d       	mov	r22, r14
    369c:	7f 2d       	mov	r23, r15
    369e:	80 2f       	mov	r24, r16
    36a0:	91 2f       	mov	r25, r17
    36a2:	07 e2       	ldi	r16, 0x27	; 39
    36a4:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    36a8:	a2 2e       	mov	r10, r18
    36aa:	b3 2e       	mov	r11, r19
    36ac:	c4 2e       	mov	r12, r20
    36ae:	d5 2e       	mov	r13, r21
    36b0:	e6 2e       	mov	r14, r22
    36b2:	f7 2e       	mov	r15, r23
    36b4:	08 2f       	mov	r16, r24
    36b6:	19 2f       	mov	r17, r25
    36b8:	2a 2d       	mov	r18, r10
    36ba:	3b 2d       	mov	r19, r11
    36bc:	4c 2d       	mov	r20, r12
    36be:	5d 2d       	mov	r21, r13
    36c0:	6e 2d       	mov	r22, r14
    36c2:	7f 2d       	mov	r23, r15
    36c4:	80 2f       	mov	r24, r16
    36c6:	91 2f       	mov	r25, r17
    36c8:	de 01       	movw	r26, r28
    36ca:	da 96       	adiw	r26, 0x3a	; 58
    36cc:	fe 01       	movw	r30, r28
    36ce:	fa 96       	adiw	r30, 0x3a	; 58
    36d0:	10 81       	ld	r17, Z
    36d2:	12 2b       	or	r17, r18
    36d4:	1c 93       	st	X, r17
    36d6:	11 81       	ldd	r17, Z+1	; 0x01
    36d8:	13 2b       	or	r17, r19
    36da:	11 96       	adiw	r26, 0x01	; 1
    36dc:	1c 93       	st	X, r17
    36de:	11 97       	sbiw	r26, 0x01	; 1
    36e0:	12 81       	ldd	r17, Z+2	; 0x02
    36e2:	14 2b       	or	r17, r20
    36e4:	12 96       	adiw	r26, 0x02	; 2
    36e6:	1c 93       	st	X, r17
    36e8:	12 97       	sbiw	r26, 0x02	; 2
    36ea:	13 81       	ldd	r17, Z+3	; 0x03
    36ec:	15 2b       	or	r17, r21
    36ee:	13 96       	adiw	r26, 0x03	; 3
    36f0:	1c 93       	st	X, r17
    36f2:	13 97       	sbiw	r26, 0x03	; 3
    36f4:	14 81       	ldd	r17, Z+4	; 0x04
    36f6:	16 2b       	or	r17, r22
    36f8:	14 96       	adiw	r26, 0x04	; 4
    36fa:	1c 93       	st	X, r17
    36fc:	14 97       	sbiw	r26, 0x04	; 4
    36fe:	15 81       	ldd	r17, Z+5	; 0x05
    3700:	17 2b       	or	r17, r23
    3702:	15 96       	adiw	r26, 0x05	; 5
    3704:	1c 93       	st	X, r17
    3706:	15 97       	sbiw	r26, 0x05	; 5
    3708:	16 81       	ldd	r17, Z+6	; 0x06
    370a:	18 2b       	or	r17, r24
    370c:	16 96       	adiw	r26, 0x06	; 6
    370e:	1c 93       	st	X, r17
    3710:	16 97       	sbiw	r26, 0x06	; 6
    3712:	e7 81       	ldd	r30, Z+7	; 0x07
    3714:	8e 2f       	mov	r24, r30
    3716:	89 2b       	or	r24, r25
    3718:	17 96       	adiw	r26, 0x07	; 7
    371a:	8c 93       	st	X, r24
    371c:	80 e0       	ldi	r24, 0x00	; 0
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	a0 e0       	ldi	r26, 0x00	; 0
    3722:	b0 e4       	ldi	r27, 0x40	; 64
    3724:	8b 87       	std	Y+11, r24	; 0x0b
    3726:	9c 87       	std	Y+12, r25	; 0x0c
    3728:	ad 87       	std	Y+13, r26	; 0x0d
    372a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    372c:	6b 85       	ldd	r22, Y+11	; 0x0b
    372e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3730:	8d 85       	ldd	r24, Y+13	; 0x0d
    3732:	9e 85       	ldd	r25, Y+14	; 0x0e
    3734:	20 e0       	ldi	r18, 0x00	; 0
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	4a e7       	ldi	r20, 0x7A	; 122
    373a:	53 e4       	ldi	r21, 0x43	; 67
    373c:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3740:	dc 01       	movw	r26, r24
    3742:	cb 01       	movw	r24, r22
    3744:	8f 83       	std	Y+7, r24	; 0x07
    3746:	98 87       	std	Y+8, r25	; 0x08
    3748:	a9 87       	std	Y+9, r26	; 0x09
    374a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    374c:	6f 81       	ldd	r22, Y+7	; 0x07
    374e:	78 85       	ldd	r23, Y+8	; 0x08
    3750:	89 85       	ldd	r24, Y+9	; 0x09
    3752:	9a 85       	ldd	r25, Y+10	; 0x0a
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	30 e0       	ldi	r19, 0x00	; 0
    3758:	40 e8       	ldi	r20, 0x80	; 128
    375a:	5f e3       	ldi	r21, 0x3F	; 63
    375c:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    3760:	88 23       	and	r24, r24
    3762:	2c f4       	brge	.+10     	; 0x376e <LCD_enuInit+0xbac>
		__ticks = 1;
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	9e 83       	std	Y+6, r25	; 0x06
    376a:	8d 83       	std	Y+5, r24	; 0x05
    376c:	3f c0       	rjmp	.+126    	; 0x37ec <LCD_enuInit+0xc2a>
	else if (__tmp > 65535)
    376e:	6f 81       	ldd	r22, Y+7	; 0x07
    3770:	78 85       	ldd	r23, Y+8	; 0x08
    3772:	89 85       	ldd	r24, Y+9	; 0x09
    3774:	9a 85       	ldd	r25, Y+10	; 0x0a
    3776:	20 e0       	ldi	r18, 0x00	; 0
    3778:	3f ef       	ldi	r19, 0xFF	; 255
    377a:	4f e7       	ldi	r20, 0x7F	; 127
    377c:	57 e4       	ldi	r21, 0x47	; 71
    377e:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    3782:	18 16       	cp	r1, r24
    3784:	4c f5       	brge	.+82     	; 0x37d8 <LCD_enuInit+0xc16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3786:	6b 85       	ldd	r22, Y+11	; 0x0b
    3788:	7c 85       	ldd	r23, Y+12	; 0x0c
    378a:	8d 85       	ldd	r24, Y+13	; 0x0d
    378c:	9e 85       	ldd	r25, Y+14	; 0x0e
    378e:	20 e0       	ldi	r18, 0x00	; 0
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	40 e2       	ldi	r20, 0x20	; 32
    3794:	51 e4       	ldi	r21, 0x41	; 65
    3796:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    379a:	dc 01       	movw	r26, r24
    379c:	cb 01       	movw	r24, r22
    379e:	bc 01       	movw	r22, r24
    37a0:	cd 01       	movw	r24, r26
    37a2:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	9e 83       	std	Y+6, r25	; 0x06
    37ac:	8d 83       	std	Y+5, r24	; 0x05
    37ae:	0f c0       	rjmp	.+30     	; 0x37ce <LCD_enuInit+0xc0c>
    37b0:	89 e1       	ldi	r24, 0x19	; 25
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	9c 83       	std	Y+4, r25	; 0x04
    37b6:	8b 83       	std	Y+3, r24	; 0x03
    37b8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ba:	9c 81       	ldd	r25, Y+4	; 0x04
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	f1 f7       	brne	.-4      	; 0x37bc <LCD_enuInit+0xbfa>
    37c0:	9c 83       	std	Y+4, r25	; 0x04
    37c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37c4:	8d 81       	ldd	r24, Y+5	; 0x05
    37c6:	9e 81       	ldd	r25, Y+6	; 0x06
    37c8:	01 97       	sbiw	r24, 0x01	; 1
    37ca:	9e 83       	std	Y+6, r25	; 0x06
    37cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ce:	8d 81       	ldd	r24, Y+5	; 0x05
    37d0:	9e 81       	ldd	r25, Y+6	; 0x06
    37d2:	00 97       	sbiw	r24, 0x00	; 0
    37d4:	69 f7       	brne	.-38     	; 0x37b0 <LCD_enuInit+0xbee>
    37d6:	14 c0       	rjmp	.+40     	; 0x3800 <LCD_enuInit+0xc3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37d8:	6f 81       	ldd	r22, Y+7	; 0x07
    37da:	78 85       	ldd	r23, Y+8	; 0x08
    37dc:	89 85       	ldd	r24, Y+9	; 0x09
    37de:	9a 85       	ldd	r25, Y+10	; 0x0a
    37e0:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    37e4:	dc 01       	movw	r26, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	9e 83       	std	Y+6, r25	; 0x06
    37ea:	8d 83       	std	Y+5, r24	; 0x05
    37ec:	8d 81       	ldd	r24, Y+5	; 0x05
    37ee:	9e 81       	ldd	r25, Y+6	; 0x06
    37f0:	9a 83       	std	Y+2, r25	; 0x02
    37f2:	89 83       	std	Y+1, r24	; 0x01
    37f4:	89 81       	ldd	r24, Y+1	; 0x01
    37f6:	9a 81       	ldd	r25, Y+2	; 0x02
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	f1 f7       	brne	.-4      	; 0x37f8 <LCD_enuInit+0xc36>
    37fc:	9a 83       	std	Y+2, r25	; 0x02
    37fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	//Set Entry mode
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0x00) << 42);
    3800:	80 e0       	ldi	r24, 0x00	; 0
    3802:	0e 94 a2 20 	call	0x4144	; 0x4144 <LCD_inenuSendCommand>
    3806:	a8 2e       	mov	r10, r24
    3808:	bb 24       	eor	r11, r11
    380a:	cc 24       	eor	r12, r12
    380c:	dd 24       	eor	r13, r13
    380e:	ee 24       	eor	r14, r14
    3810:	ff 24       	eor	r15, r15
    3812:	87 01       	movw	r16, r14
    3814:	2a 2d       	mov	r18, r10
    3816:	3b 2d       	mov	r19, r11
    3818:	4c 2d       	mov	r20, r12
    381a:	5d 2d       	mov	r21, r13
    381c:	6e 2d       	mov	r22, r14
    381e:	7f 2d       	mov	r23, r15
    3820:	80 2f       	mov	r24, r16
    3822:	91 2f       	mov	r25, r17
    3824:	0a e2       	ldi	r16, 0x2A	; 42
    3826:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    382a:	a2 2e       	mov	r10, r18
    382c:	b3 2e       	mov	r11, r19
    382e:	c4 2e       	mov	r12, r20
    3830:	d5 2e       	mov	r13, r21
    3832:	e6 2e       	mov	r14, r22
    3834:	f7 2e       	mov	r15, r23
    3836:	08 2f       	mov	r16, r24
    3838:	19 2f       	mov	r17, r25
    383a:	2a 2d       	mov	r18, r10
    383c:	3b 2d       	mov	r19, r11
    383e:	4c 2d       	mov	r20, r12
    3840:	5d 2d       	mov	r21, r13
    3842:	6e 2d       	mov	r22, r14
    3844:	7f 2d       	mov	r23, r15
    3846:	80 2f       	mov	r24, r16
    3848:	91 2f       	mov	r25, r17
    384a:	de 01       	movw	r26, r28
    384c:	da 96       	adiw	r26, 0x3a	; 58
    384e:	fe 01       	movw	r30, r28
    3850:	fa 96       	adiw	r30, 0x3a	; 58
    3852:	10 81       	ld	r17, Z
    3854:	12 2b       	or	r17, r18
    3856:	1c 93       	st	X, r17
    3858:	11 81       	ldd	r17, Z+1	; 0x01
    385a:	13 2b       	or	r17, r19
    385c:	11 96       	adiw	r26, 0x01	; 1
    385e:	1c 93       	st	X, r17
    3860:	11 97       	sbiw	r26, 0x01	; 1
    3862:	12 81       	ldd	r17, Z+2	; 0x02
    3864:	14 2b       	or	r17, r20
    3866:	12 96       	adiw	r26, 0x02	; 2
    3868:	1c 93       	st	X, r17
    386a:	12 97       	sbiw	r26, 0x02	; 2
    386c:	13 81       	ldd	r17, Z+3	; 0x03
    386e:	15 2b       	or	r17, r21
    3870:	13 96       	adiw	r26, 0x03	; 3
    3872:	1c 93       	st	X, r17
    3874:	13 97       	sbiw	r26, 0x03	; 3
    3876:	14 81       	ldd	r17, Z+4	; 0x04
    3878:	16 2b       	or	r17, r22
    387a:	14 96       	adiw	r26, 0x04	; 4
    387c:	1c 93       	st	X, r17
    387e:	14 97       	sbiw	r26, 0x04	; 4
    3880:	15 81       	ldd	r17, Z+5	; 0x05
    3882:	17 2b       	or	r17, r23
    3884:	15 96       	adiw	r26, 0x05	; 5
    3886:	1c 93       	st	X, r17
    3888:	15 97       	sbiw	r26, 0x05	; 5
    388a:	16 81       	ldd	r17, Z+6	; 0x06
    388c:	18 2b       	or	r17, r24
    388e:	16 96       	adiw	r26, 0x06	; 6
    3890:	1c 93       	st	X, r17
    3892:	16 97       	sbiw	r26, 0x06	; 6
    3894:	e7 81       	ldd	r30, Z+7	; 0x07
    3896:	8e 2f       	mov	r24, r30
    3898:	89 2b       	or	r24, r25
    389a:	17 96       	adiw	r26, 0x07	; 7
    389c:	8c 93       	st	X, r24
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0x60) << 45); // shift disabled , DDRAM address increase
    389e:	80 e6       	ldi	r24, 0x60	; 96
    38a0:	0e 94 a2 20 	call	0x4144	; 0x4144 <LCD_inenuSendCommand>
    38a4:	a8 2e       	mov	r10, r24
    38a6:	bb 24       	eor	r11, r11
    38a8:	cc 24       	eor	r12, r12
    38aa:	dd 24       	eor	r13, r13
    38ac:	ee 24       	eor	r14, r14
    38ae:	ff 24       	eor	r15, r15
    38b0:	87 01       	movw	r16, r14
    38b2:	2a 2d       	mov	r18, r10
    38b4:	3b 2d       	mov	r19, r11
    38b6:	4c 2d       	mov	r20, r12
    38b8:	5d 2d       	mov	r21, r13
    38ba:	6e 2d       	mov	r22, r14
    38bc:	7f 2d       	mov	r23, r15
    38be:	80 2f       	mov	r24, r16
    38c0:	91 2f       	mov	r25, r17
    38c2:	0d e2       	ldi	r16, 0x2D	; 45
    38c4:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    38c8:	a2 2e       	mov	r10, r18
    38ca:	b3 2e       	mov	r11, r19
    38cc:	c4 2e       	mov	r12, r20
    38ce:	d5 2e       	mov	r13, r21
    38d0:	e6 2e       	mov	r14, r22
    38d2:	f7 2e       	mov	r15, r23
    38d4:	08 2f       	mov	r16, r24
    38d6:	19 2f       	mov	r17, r25
    38d8:	2a 2d       	mov	r18, r10
    38da:	3b 2d       	mov	r19, r11
    38dc:	4c 2d       	mov	r20, r12
    38de:	5d 2d       	mov	r21, r13
    38e0:	6e 2d       	mov	r22, r14
    38e2:	7f 2d       	mov	r23, r15
    38e4:	80 2f       	mov	r24, r16
    38e6:	91 2f       	mov	r25, r17
    38e8:	de 01       	movw	r26, r28
    38ea:	da 96       	adiw	r26, 0x3a	; 58
    38ec:	fe 01       	movw	r30, r28
    38ee:	fa 96       	adiw	r30, 0x3a	; 58
    38f0:	10 81       	ld	r17, Z
    38f2:	12 2b       	or	r17, r18
    38f4:	1c 93       	st	X, r17
    38f6:	11 81       	ldd	r17, Z+1	; 0x01
    38f8:	13 2b       	or	r17, r19
    38fa:	11 96       	adiw	r26, 0x01	; 1
    38fc:	1c 93       	st	X, r17
    38fe:	11 97       	sbiw	r26, 0x01	; 1
    3900:	12 81       	ldd	r17, Z+2	; 0x02
    3902:	14 2b       	or	r17, r20
    3904:	12 96       	adiw	r26, 0x02	; 2
    3906:	1c 93       	st	X, r17
    3908:	12 97       	sbiw	r26, 0x02	; 2
    390a:	13 81       	ldd	r17, Z+3	; 0x03
    390c:	15 2b       	or	r17, r21
    390e:	13 96       	adiw	r26, 0x03	; 3
    3910:	1c 93       	st	X, r17
    3912:	13 97       	sbiw	r26, 0x03	; 3
    3914:	14 81       	ldd	r17, Z+4	; 0x04
    3916:	16 2b       	or	r17, r22
    3918:	14 96       	adiw	r26, 0x04	; 4
    391a:	1c 93       	st	X, r17
    391c:	14 97       	sbiw	r26, 0x04	; 4
    391e:	15 81       	ldd	r17, Z+5	; 0x05
    3920:	17 2b       	or	r17, r23
    3922:	15 96       	adiw	r26, 0x05	; 5
    3924:	1c 93       	st	X, r17
    3926:	15 97       	sbiw	r26, 0x05	; 5
    3928:	16 81       	ldd	r17, Z+6	; 0x06
    392a:	18 2b       	or	r17, r24
    392c:	16 96       	adiw	r26, 0x06	; 6
    392e:	1c 93       	st	X, r17
    3930:	16 97       	sbiw	r26, 0x06	; 6
    3932:	e7 81       	ldd	r30, Z+7	; 0x07
    3934:	8e 2f       	mov	r24, r30
    3936:	89 2b       	or	r24, r25
    3938:	17 96       	adiw	r26, 0x07	; 7
    393a:	8c 93       	st	X, r24
    393c:	17 97       	sbiw	r26, 0x07	; 7

	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0; Local_u8Iterator <= 45; Local_u8Iterator+=3)
    393e:	19 ae       	std	Y+57, r1	; 0x39
    3940:	42 c0       	rjmp	.+132    	; 0x39c6 <LCD_enuInit+0xe04>
	{
		if(((Local_u64Check >> Local_u8Iterator) & (0b111)) != ES_OK)
    3942:	89 ad       	ldd	r24, Y+57	; 0x39
    3944:	a8 2f       	mov	r26, r24
    3946:	b0 e0       	ldi	r27, 0x00	; 0
    3948:	fe 01       	movw	r30, r28
    394a:	fa 96       	adiw	r30, 0x3a	; 58
    394c:	20 81       	ld	r18, Z
    394e:	31 81       	ldd	r19, Z+1	; 0x01
    3950:	42 81       	ldd	r20, Z+2	; 0x02
    3952:	53 81       	ldd	r21, Z+3	; 0x03
    3954:	64 81       	ldd	r22, Z+4	; 0x04
    3956:	75 81       	ldd	r23, Z+5	; 0x05
    3958:	86 81       	ldd	r24, Z+6	; 0x06
    395a:	97 81       	ldd	r25, Z+7	; 0x07
    395c:	0a 2f       	mov	r16, r26
    395e:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
    3962:	a2 2e       	mov	r10, r18
    3964:	b3 2e       	mov	r11, r19
    3966:	c4 2e       	mov	r12, r20
    3968:	d5 2e       	mov	r13, r21
    396a:	e6 2e       	mov	r14, r22
    396c:	f7 2e       	mov	r15, r23
    396e:	08 2f       	mov	r16, r24
    3970:	19 2f       	mov	r17, r25
    3972:	2a 2c       	mov	r2, r10
    3974:	3b 2c       	mov	r3, r11
    3976:	4c 2c       	mov	r4, r12
    3978:	5d 2c       	mov	r5, r13
    397a:	6e 2c       	mov	r6, r14
    397c:	7f 2c       	mov	r7, r15
    397e:	80 2e       	mov	r8, r16
    3980:	91 2e       	mov	r9, r17
    3982:	22 2d       	mov	r18, r2
    3984:	27 70       	andi	r18, 0x07	; 7
    3986:	33 2d       	mov	r19, r3
    3988:	30 70       	andi	r19, 0x00	; 0
    398a:	44 2d       	mov	r20, r4
    398c:	40 70       	andi	r20, 0x00	; 0
    398e:	55 2d       	mov	r21, r5
    3990:	50 70       	andi	r21, 0x00	; 0
    3992:	66 2d       	mov	r22, r6
    3994:	60 70       	andi	r22, 0x00	; 0
    3996:	77 2d       	mov	r23, r7
    3998:	70 70       	andi	r23, 0x00	; 0
    399a:	88 2d       	mov	r24, r8
    399c:	80 70       	andi	r24, 0x00	; 0
    399e:	99 2d       	mov	r25, r9
    39a0:	90 70       	andi	r25, 0x00	; 0
    39a2:	e2 2f       	mov	r30, r18
    39a4:	e3 2b       	or	r30, r19
    39a6:	e4 2b       	or	r30, r20
    39a8:	e5 2b       	or	r30, r21
    39aa:	e6 2b       	or	r30, r22
    39ac:	e7 2b       	or	r30, r23
    39ae:	e8 2b       	or	r30, r24
    39b0:	e9 2b       	or	r30, r25
    39b2:	ee 23       	and	r30, r30
    39b4:	29 f0       	breq	.+10     	; 0x39c0 <LCD_enuInit+0xdfe>
		{
			return ES_NOK;
    39b6:	81 e0       	ldi	r24, 0x01	; 1
    39b8:	24 96       	adiw	r28, 0x04	; 4
    39ba:	8f af       	std	Y+63, r24	; 0x3f
    39bc:	24 97       	sbiw	r28, 0x04	; 4
    39be:	15 c0       	rjmp	.+42     	; 0x39ea <LCD_enuInit+0xe28>
	//Set Entry mode
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0x00) << 42);
	Local_u64Check |= ((u64)LCD_inenuSendCommand(0x60) << 45); // shift disabled , DDRAM address increase

	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0; Local_u8Iterator <= 45; Local_u8Iterator+=3)
    39c0:	89 ad       	ldd	r24, Y+57	; 0x39
    39c2:	8d 5f       	subi	r24, 0xFD	; 253
    39c4:	89 af       	std	Y+57, r24	; 0x39
    39c6:	89 ad       	ldd	r24, Y+57	; 0x39
    39c8:	8e 32       	cpi	r24, 0x2E	; 46
    39ca:	08 f4       	brcc	.+2      	; 0x39ce <LCD_enuInit+0xe0c>
    39cc:	ba cf       	rjmp	.-140    	; 0x3942 <LCD_enuInit+0xd80>
		if(((Local_u64Check >> Local_u8Iterator) & (0b111)) != ES_OK)
		{
			return ES_NOK;
		}
	}
	Global_u8Flag = 1;
    39ce:	81 e0       	ldi	r24, 0x01	; 1
    39d0:	80 93 32 02 	sts	0x0232, r24

#else
#error "Your LCD_Mode has wrong selection"
#endif

	Local_ErrorState = ES_OK;
    39d4:	fe 01       	movw	r30, r28
    39d6:	ee 5b       	subi	r30, 0xBE	; 190
    39d8:	ff 4f       	sbci	r31, 0xFF	; 255
    39da:	10 82       	st	Z, r1
	return Local_ErrorState;
    39dc:	fe 01       	movw	r30, r28
    39de:	ee 5b       	subi	r30, 0xBE	; 190
    39e0:	ff 4f       	sbci	r31, 0xFF	; 255
    39e2:	80 81       	ld	r24, Z
    39e4:	24 96       	adiw	r28, 0x04	; 4
    39e6:	8f af       	std	Y+63, r24	; 0x3f
    39e8:	24 97       	sbiw	r28, 0x04	; 4
    39ea:	24 96       	adiw	r28, 0x04	; 4
    39ec:	8f ad       	ldd	r24, Y+63	; 0x3f
    39ee:	24 97       	sbiw	r28, 0x04	; 4
}
    39f0:	cd 5b       	subi	r28, 0xBD	; 189
    39f2:	df 4f       	sbci	r29, 0xFF	; 255
    39f4:	0f b6       	in	r0, 0x3f	; 63
    39f6:	f8 94       	cli
    39f8:	de bf       	out	0x3e, r29	; 62
    39fa:	0f be       	out	0x3f, r0	; 63
    39fc:	cd bf       	out	0x3d, r28	; 61
    39fe:	cf 91       	pop	r28
    3a00:	df 91       	pop	r29
    3a02:	1f 91       	pop	r17
    3a04:	0f 91       	pop	r16
    3a06:	ff 90       	pop	r15
    3a08:	ef 90       	pop	r14
    3a0a:	df 90       	pop	r13
    3a0c:	cf 90       	pop	r12
    3a0e:	bf 90       	pop	r11
    3a10:	af 90       	pop	r10
    3a12:	9f 90       	pop	r9
    3a14:	8f 90       	pop	r8
    3a16:	7f 90       	pop	r7
    3a18:	6f 90       	pop	r6
    3a1a:	5f 90       	pop	r5
    3a1c:	4f 90       	pop	r4
    3a1e:	3f 90       	pop	r3
    3a20:	2f 90       	pop	r2
    3a22:	08 95       	ret

00003a24 <LCD_enuLatch>:




static ES_t LCD_enuLatch(u8 Copy_u8Data)
{
    3a24:	df 93       	push	r29
    3a26:	cf 93       	push	r28
    3a28:	cd b7       	in	r28, 0x3d	; 61
    3a2a:	de b7       	in	r29, 0x3e	; 62
    3a2c:	e2 97       	sbiw	r28, 0x32	; 50
    3a2e:	0f b6       	in	r0, 0x3f	; 63
    3a30:	f8 94       	cli
    3a32:	de bf       	out	0x3e, r29	; 62
    3a34:	0f be       	out	0x3f, r0	; 63
    3a36:	cd bf       	out	0x3d, r28	; 61
    3a38:	89 ab       	std	Y+49, r24	; 0x31
	ES_t Local_ErrorState = ES_NOK;
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	88 ab       	std	Y+48, r24	; 0x30

	u32 Local_u32Check = 0;
    3a3e:	1c a6       	std	Y+44, r1	; 0x2c
    3a40:	1d a6       	std	Y+45, r1	; 0x2d
    3a42:	1e a6       	std	Y+46, r1	; 0x2e
    3a44:	1f a6       	std	Y+47, r1	; 0x2f

	// Set RW as a write operation
	Local_u32Check |= (DIO_enuSetPinValue(RW_PORT, RW_PIN, DIO_u8LOW) << 0);
    3a46:	80 e0       	ldi	r24, 0x00	; 0
    3a48:	61 e0       	ldi	r22, 0x01	; 1
    3a4a:	40 e0       	ldi	r20, 0x00	; 0
    3a4c:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
    3a50:	28 2f       	mov	r18, r24
    3a52:	30 e0       	ldi	r19, 0x00	; 0
    3a54:	40 e0       	ldi	r20, 0x00	; 0
    3a56:	50 e0       	ldi	r21, 0x00	; 0
    3a58:	8c a5       	ldd	r24, Y+44	; 0x2c
    3a5a:	9d a5       	ldd	r25, Y+45	; 0x2d
    3a5c:	ae a5       	ldd	r26, Y+46	; 0x2e
    3a5e:	bf a5       	ldd	r27, Y+47	; 0x2f
    3a60:	82 2b       	or	r24, r18
    3a62:	93 2b       	or	r25, r19
    3a64:	a4 2b       	or	r26, r20
    3a66:	b5 2b       	or	r27, r21
    3a68:	8c a7       	std	Y+44, r24	; 0x2c
    3a6a:	9d a7       	std	Y+45, r25	; 0x2d
    3a6c:	ae a7       	std	Y+46, r26	; 0x2e
    3a6e:	bf a7       	std	Y+47, r27	; 0x2f

	//Enable is low
	Local_u32Check |= (DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW) << 3);
    3a70:	80 e0       	ldi	r24, 0x00	; 0
    3a72:	62 e0       	ldi	r22, 0x02	; 2
    3a74:	40 e0       	ldi	r20, 0x00	; 0
    3a76:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
    3a7a:	88 2f       	mov	r24, r24
    3a7c:	90 e0       	ldi	r25, 0x00	; 0
    3a7e:	88 0f       	add	r24, r24
    3a80:	99 1f       	adc	r25, r25
    3a82:	88 0f       	add	r24, r24
    3a84:	99 1f       	adc	r25, r25
    3a86:	88 0f       	add	r24, r24
    3a88:	99 1f       	adc	r25, r25
    3a8a:	9c 01       	movw	r18, r24
    3a8c:	44 27       	eor	r20, r20
    3a8e:	37 fd       	sbrc	r19, 7
    3a90:	40 95       	com	r20
    3a92:	54 2f       	mov	r21, r20
    3a94:	8c a5       	ldd	r24, Y+44	; 0x2c
    3a96:	9d a5       	ldd	r25, Y+45	; 0x2d
    3a98:	ae a5       	ldd	r26, Y+46	; 0x2e
    3a9a:	bf a5       	ldd	r27, Y+47	; 0x2f
    3a9c:	82 2b       	or	r24, r18
    3a9e:	93 2b       	or	r25, r19
    3aa0:	a4 2b       	or	r26, r20
    3aa2:	b5 2b       	or	r27, r21
    3aa4:	8c a7       	std	Y+44, r24	; 0x2c
    3aa6:	9d a7       	std	Y+45, r25	; 0x2d
    3aa8:	ae a7       	std	Y+46, r26	; 0x2e
    3aaa:	bf a7       	std	Y+47, r27	; 0x2f

	// write command
	Local_u32Check |= (     DIO_enuSetPinValue(D4_PORT, D4_PIN, (Copy_u8Data >> D4) & MASK_BIT) << 6 );
    3aac:	89 a9       	ldd	r24, Y+49	; 0x31
    3aae:	82 95       	swap	r24
    3ab0:	8f 70       	andi	r24, 0x0F	; 15
    3ab2:	98 2f       	mov	r25, r24
    3ab4:	91 70       	andi	r25, 0x01	; 1
    3ab6:	80 e0       	ldi	r24, 0x00	; 0
    3ab8:	63 e0       	ldi	r22, 0x03	; 3
    3aba:	49 2f       	mov	r20, r25
    3abc:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
    3ac0:	88 2f       	mov	r24, r24
    3ac2:	90 e0       	ldi	r25, 0x00	; 0
    3ac4:	00 24       	eor	r0, r0
    3ac6:	96 95       	lsr	r25
    3ac8:	87 95       	ror	r24
    3aca:	07 94       	ror	r0
    3acc:	96 95       	lsr	r25
    3ace:	87 95       	ror	r24
    3ad0:	07 94       	ror	r0
    3ad2:	98 2f       	mov	r25, r24
    3ad4:	80 2d       	mov	r24, r0
    3ad6:	9c 01       	movw	r18, r24
    3ad8:	44 27       	eor	r20, r20
    3ada:	37 fd       	sbrc	r19, 7
    3adc:	40 95       	com	r20
    3ade:	54 2f       	mov	r21, r20
    3ae0:	8c a5       	ldd	r24, Y+44	; 0x2c
    3ae2:	9d a5       	ldd	r25, Y+45	; 0x2d
    3ae4:	ae a5       	ldd	r26, Y+46	; 0x2e
    3ae6:	bf a5       	ldd	r27, Y+47	; 0x2f
    3ae8:	82 2b       	or	r24, r18
    3aea:	93 2b       	or	r25, r19
    3aec:	a4 2b       	or	r26, r20
    3aee:	b5 2b       	or	r27, r21
    3af0:	8c a7       	std	Y+44, r24	; 0x2c
    3af2:	9d a7       	std	Y+45, r25	; 0x2d
    3af4:	ae a7       	std	Y+46, r26	; 0x2e
    3af6:	bf a7       	std	Y+47, r27	; 0x2f
	Local_u32Check |= ((u32)DIO_enuSetPinValue(D5_PORT, D5_PIN, (Copy_u8Data >> D5) & MASK_BIT) << 9 );
    3af8:	89 a9       	ldd	r24, Y+49	; 0x31
    3afa:	82 95       	swap	r24
    3afc:	86 95       	lsr	r24
    3afe:	87 70       	andi	r24, 0x07	; 7
    3b00:	98 2f       	mov	r25, r24
    3b02:	91 70       	andi	r25, 0x01	; 1
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	64 e0       	ldi	r22, 0x04	; 4
    3b08:	49 2f       	mov	r20, r25
    3b0a:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
    3b0e:	88 2f       	mov	r24, r24
    3b10:	90 e0       	ldi	r25, 0x00	; 0
    3b12:	a0 e0       	ldi	r26, 0x00	; 0
    3b14:	b0 e0       	ldi	r27, 0x00	; 0
    3b16:	9c 01       	movw	r18, r24
    3b18:	ad 01       	movw	r20, r26
    3b1a:	01 2e       	mov	r0, r17
    3b1c:	19 e0       	ldi	r17, 0x09	; 9
    3b1e:	22 0f       	add	r18, r18
    3b20:	33 1f       	adc	r19, r19
    3b22:	44 1f       	adc	r20, r20
    3b24:	55 1f       	adc	r21, r21
    3b26:	1a 95       	dec	r17
    3b28:	d1 f7       	brne	.-12     	; 0x3b1e <LCD_enuLatch+0xfa>
    3b2a:	10 2d       	mov	r17, r0
    3b2c:	8c a5       	ldd	r24, Y+44	; 0x2c
    3b2e:	9d a5       	ldd	r25, Y+45	; 0x2d
    3b30:	ae a5       	ldd	r26, Y+46	; 0x2e
    3b32:	bf a5       	ldd	r27, Y+47	; 0x2f
    3b34:	82 2b       	or	r24, r18
    3b36:	93 2b       	or	r25, r19
    3b38:	a4 2b       	or	r26, r20
    3b3a:	b5 2b       	or	r27, r21
    3b3c:	8c a7       	std	Y+44, r24	; 0x2c
    3b3e:	9d a7       	std	Y+45, r25	; 0x2d
    3b40:	ae a7       	std	Y+46, r26	; 0x2e
    3b42:	bf a7       	std	Y+47, r27	; 0x2f
	Local_u32Check |= ((u32)DIO_enuSetPinValue(D6_PORT, D6_PIN, (Copy_u8Data >> D6) & MASK_BIT) << 12);
    3b44:	89 a9       	ldd	r24, Y+49	; 0x31
    3b46:	82 95       	swap	r24
    3b48:	86 95       	lsr	r24
    3b4a:	86 95       	lsr	r24
    3b4c:	83 70       	andi	r24, 0x03	; 3
    3b4e:	98 2f       	mov	r25, r24
    3b50:	91 70       	andi	r25, 0x01	; 1
    3b52:	80 e0       	ldi	r24, 0x00	; 0
    3b54:	65 e0       	ldi	r22, 0x05	; 5
    3b56:	49 2f       	mov	r20, r25
    3b58:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
    3b5c:	88 2f       	mov	r24, r24
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	a0 e0       	ldi	r26, 0x00	; 0
    3b62:	b0 e0       	ldi	r27, 0x00	; 0
    3b64:	9c 01       	movw	r18, r24
    3b66:	ad 01       	movw	r20, r26
    3b68:	01 2e       	mov	r0, r17
    3b6a:	1c e0       	ldi	r17, 0x0C	; 12
    3b6c:	22 0f       	add	r18, r18
    3b6e:	33 1f       	adc	r19, r19
    3b70:	44 1f       	adc	r20, r20
    3b72:	55 1f       	adc	r21, r21
    3b74:	1a 95       	dec	r17
    3b76:	d1 f7       	brne	.-12     	; 0x3b6c <LCD_enuLatch+0x148>
    3b78:	10 2d       	mov	r17, r0
    3b7a:	8c a5       	ldd	r24, Y+44	; 0x2c
    3b7c:	9d a5       	ldd	r25, Y+45	; 0x2d
    3b7e:	ae a5       	ldd	r26, Y+46	; 0x2e
    3b80:	bf a5       	ldd	r27, Y+47	; 0x2f
    3b82:	82 2b       	or	r24, r18
    3b84:	93 2b       	or	r25, r19
    3b86:	a4 2b       	or	r26, r20
    3b88:	b5 2b       	or	r27, r21
    3b8a:	8c a7       	std	Y+44, r24	; 0x2c
    3b8c:	9d a7       	std	Y+45, r25	; 0x2d
    3b8e:	ae a7       	std	Y+46, r26	; 0x2e
    3b90:	bf a7       	std	Y+47, r27	; 0x2f
	Local_u32Check |= ((u32)DIO_enuSetPinValue(D7_PORT, D7_PIN, (Copy_u8Data >> D7) & MASK_BIT) << 15);
    3b92:	89 a9       	ldd	r24, Y+49	; 0x31
    3b94:	98 2f       	mov	r25, r24
    3b96:	99 1f       	adc	r25, r25
    3b98:	99 27       	eor	r25, r25
    3b9a:	99 1f       	adc	r25, r25
    3b9c:	80 e0       	ldi	r24, 0x00	; 0
    3b9e:	66 e0       	ldi	r22, 0x06	; 6
    3ba0:	49 2f       	mov	r20, r25
    3ba2:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
    3ba6:	88 2f       	mov	r24, r24
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	a0 e0       	ldi	r26, 0x00	; 0
    3bac:	b0 e0       	ldi	r27, 0x00	; 0
    3bae:	9c 01       	movw	r18, r24
    3bb0:	ad 01       	movw	r20, r26
    3bb2:	01 2e       	mov	r0, r17
    3bb4:	1f e0       	ldi	r17, 0x0F	; 15
    3bb6:	22 0f       	add	r18, r18
    3bb8:	33 1f       	adc	r19, r19
    3bba:	44 1f       	adc	r20, r20
    3bbc:	55 1f       	adc	r21, r21
    3bbe:	1a 95       	dec	r17
    3bc0:	d1 f7       	brne	.-12     	; 0x3bb6 <LCD_enuLatch+0x192>
    3bc2:	10 2d       	mov	r17, r0
    3bc4:	8c a5       	ldd	r24, Y+44	; 0x2c
    3bc6:	9d a5       	ldd	r25, Y+45	; 0x2d
    3bc8:	ae a5       	ldd	r26, Y+46	; 0x2e
    3bca:	bf a5       	ldd	r27, Y+47	; 0x2f
    3bcc:	82 2b       	or	r24, r18
    3bce:	93 2b       	or	r25, r19
    3bd0:	a4 2b       	or	r26, r20
    3bd2:	b5 2b       	or	r27, r21
    3bd4:	8c a7       	std	Y+44, r24	; 0x2c
    3bd6:	9d a7       	std	Y+45, r25	; 0x2d
    3bd8:	ae a7       	std	Y+46, r26	; 0x2e
    3bda:	bf a7       	std	Y+47, r27	; 0x2f
	}
	Local_ErrorState = ES_OK;

#elif LCD_MODE == FOUR_BIT

	if(Global_u8Flag)
    3bdc:	80 91 32 02 	lds	r24, 0x0232
    3be0:	88 23       	and	r24, r24
    3be2:	09 f4       	brne	.+2      	; 0x3be6 <LCD_enuLatch+0x1c2>
    3be4:	81 c1       	rjmp	.+770    	; 0x3ee8 <LCD_enuLatch+0x4c4>
	{
		// Enable latch
		DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    3be6:	80 e0       	ldi	r24, 0x00	; 0
    3be8:	62 e0       	ldi	r22, 0x02	; 2
    3bea:	41 e0       	ldi	r20, 0x01	; 1
    3bec:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
    3bf0:	80 e0       	ldi	r24, 0x00	; 0
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	a0 e8       	ldi	r26, 0x80	; 128
    3bf6:	bf e3       	ldi	r27, 0x3F	; 63
    3bf8:	8f a3       	std	Y+39, r24	; 0x27
    3bfa:	98 a7       	std	Y+40, r25	; 0x28
    3bfc:	a9 a7       	std	Y+41, r26	; 0x29
    3bfe:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c00:	6f a1       	ldd	r22, Y+39	; 0x27
    3c02:	78 a5       	ldd	r23, Y+40	; 0x28
    3c04:	89 a5       	ldd	r24, Y+41	; 0x29
    3c06:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c08:	20 e0       	ldi	r18, 0x00	; 0
    3c0a:	30 e0       	ldi	r19, 0x00	; 0
    3c0c:	4a e7       	ldi	r20, 0x7A	; 122
    3c0e:	53 e4       	ldi	r21, 0x43	; 67
    3c10:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3c14:	dc 01       	movw	r26, r24
    3c16:	cb 01       	movw	r24, r22
    3c18:	8b a3       	std	Y+35, r24	; 0x23
    3c1a:	9c a3       	std	Y+36, r25	; 0x24
    3c1c:	ad a3       	std	Y+37, r26	; 0x25
    3c1e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3c20:	6b a1       	ldd	r22, Y+35	; 0x23
    3c22:	7c a1       	ldd	r23, Y+36	; 0x24
    3c24:	8d a1       	ldd	r24, Y+37	; 0x25
    3c26:	9e a1       	ldd	r25, Y+38	; 0x26
    3c28:	20 e0       	ldi	r18, 0x00	; 0
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	40 e8       	ldi	r20, 0x80	; 128
    3c2e:	5f e3       	ldi	r21, 0x3F	; 63
    3c30:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    3c34:	88 23       	and	r24, r24
    3c36:	2c f4       	brge	.+10     	; 0x3c42 <LCD_enuLatch+0x21e>
		__ticks = 1;
    3c38:	81 e0       	ldi	r24, 0x01	; 1
    3c3a:	90 e0       	ldi	r25, 0x00	; 0
    3c3c:	9a a3       	std	Y+34, r25	; 0x22
    3c3e:	89 a3       	std	Y+33, r24	; 0x21
    3c40:	3f c0       	rjmp	.+126    	; 0x3cc0 <LCD_enuLatch+0x29c>
	else if (__tmp > 65535)
    3c42:	6b a1       	ldd	r22, Y+35	; 0x23
    3c44:	7c a1       	ldd	r23, Y+36	; 0x24
    3c46:	8d a1       	ldd	r24, Y+37	; 0x25
    3c48:	9e a1       	ldd	r25, Y+38	; 0x26
    3c4a:	20 e0       	ldi	r18, 0x00	; 0
    3c4c:	3f ef       	ldi	r19, 0xFF	; 255
    3c4e:	4f e7       	ldi	r20, 0x7F	; 127
    3c50:	57 e4       	ldi	r21, 0x47	; 71
    3c52:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    3c56:	18 16       	cp	r1, r24
    3c58:	4c f5       	brge	.+82     	; 0x3cac <LCD_enuLatch+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c5a:	6f a1       	ldd	r22, Y+39	; 0x27
    3c5c:	78 a5       	ldd	r23, Y+40	; 0x28
    3c5e:	89 a5       	ldd	r24, Y+41	; 0x29
    3c60:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c62:	20 e0       	ldi	r18, 0x00	; 0
    3c64:	30 e0       	ldi	r19, 0x00	; 0
    3c66:	40 e2       	ldi	r20, 0x20	; 32
    3c68:	51 e4       	ldi	r21, 0x41	; 65
    3c6a:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3c6e:	dc 01       	movw	r26, r24
    3c70:	cb 01       	movw	r24, r22
    3c72:	bc 01       	movw	r22, r24
    3c74:	cd 01       	movw	r24, r26
    3c76:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3c7a:	dc 01       	movw	r26, r24
    3c7c:	cb 01       	movw	r24, r22
    3c7e:	9a a3       	std	Y+34, r25	; 0x22
    3c80:	89 a3       	std	Y+33, r24	; 0x21
    3c82:	0f c0       	rjmp	.+30     	; 0x3ca2 <LCD_enuLatch+0x27e>
    3c84:	89 e1       	ldi	r24, 0x19	; 25
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	98 a3       	std	Y+32, r25	; 0x20
    3c8a:	8f 8f       	std	Y+31, r24	; 0x1f
    3c8c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c8e:	98 a1       	ldd	r25, Y+32	; 0x20
    3c90:	01 97       	sbiw	r24, 0x01	; 1
    3c92:	f1 f7       	brne	.-4      	; 0x3c90 <LCD_enuLatch+0x26c>
    3c94:	98 a3       	std	Y+32, r25	; 0x20
    3c96:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c98:	89 a1       	ldd	r24, Y+33	; 0x21
    3c9a:	9a a1       	ldd	r25, Y+34	; 0x22
    3c9c:	01 97       	sbiw	r24, 0x01	; 1
    3c9e:	9a a3       	std	Y+34, r25	; 0x22
    3ca0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ca2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ca4:	9a a1       	ldd	r25, Y+34	; 0x22
    3ca6:	00 97       	sbiw	r24, 0x00	; 0
    3ca8:	69 f7       	brne	.-38     	; 0x3c84 <LCD_enuLatch+0x260>
    3caa:	14 c0       	rjmp	.+40     	; 0x3cd4 <LCD_enuLatch+0x2b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cac:	6b a1       	ldd	r22, Y+35	; 0x23
    3cae:	7c a1       	ldd	r23, Y+36	; 0x24
    3cb0:	8d a1       	ldd	r24, Y+37	; 0x25
    3cb2:	9e a1       	ldd	r25, Y+38	; 0x26
    3cb4:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3cb8:	dc 01       	movw	r26, r24
    3cba:	cb 01       	movw	r24, r22
    3cbc:	9a a3       	std	Y+34, r25	; 0x22
    3cbe:	89 a3       	std	Y+33, r24	; 0x21
    3cc0:	89 a1       	ldd	r24, Y+33	; 0x21
    3cc2:	9a a1       	ldd	r25, Y+34	; 0x22
    3cc4:	9e 8f       	std	Y+30, r25	; 0x1e
    3cc6:	8d 8f       	std	Y+29, r24	; 0x1d
    3cc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3cca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3ccc:	01 97       	sbiw	r24, 0x01	; 1
    3cce:	f1 f7       	brne	.-4      	; 0x3ccc <LCD_enuLatch+0x2a8>
    3cd0:	9e 8f       	std	Y+30, r25	; 0x1e
    3cd2:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    3cd4:	80 e0       	ldi	r24, 0x00	; 0
    3cd6:	62 e0       	ldi	r22, 0x02	; 2
    3cd8:	40 e0       	ldi	r20, 0x00	; 0
    3cda:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
    3cde:	80 e0       	ldi	r24, 0x00	; 0
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	a0 e8       	ldi	r26, 0x80	; 128
    3ce4:	bf e3       	ldi	r27, 0x3F	; 63
    3ce6:	89 8f       	std	Y+25, r24	; 0x19
    3ce8:	9a 8f       	std	Y+26, r25	; 0x1a
    3cea:	ab 8f       	std	Y+27, r26	; 0x1b
    3cec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cee:	69 8d       	ldd	r22, Y+25	; 0x19
    3cf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cf6:	20 e0       	ldi	r18, 0x00	; 0
    3cf8:	30 e0       	ldi	r19, 0x00	; 0
    3cfa:	4a e7       	ldi	r20, 0x7A	; 122
    3cfc:	53 e4       	ldi	r21, 0x43	; 67
    3cfe:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3d02:	dc 01       	movw	r26, r24
    3d04:	cb 01       	movw	r24, r22
    3d06:	8d 8b       	std	Y+21, r24	; 0x15
    3d08:	9e 8b       	std	Y+22, r25	; 0x16
    3d0a:	af 8b       	std	Y+23, r26	; 0x17
    3d0c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d0e:	6d 89       	ldd	r22, Y+21	; 0x15
    3d10:	7e 89       	ldd	r23, Y+22	; 0x16
    3d12:	8f 89       	ldd	r24, Y+23	; 0x17
    3d14:	98 8d       	ldd	r25, Y+24	; 0x18
    3d16:	20 e0       	ldi	r18, 0x00	; 0
    3d18:	30 e0       	ldi	r19, 0x00	; 0
    3d1a:	40 e8       	ldi	r20, 0x80	; 128
    3d1c:	5f e3       	ldi	r21, 0x3F	; 63
    3d1e:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    3d22:	88 23       	and	r24, r24
    3d24:	2c f4       	brge	.+10     	; 0x3d30 <LCD_enuLatch+0x30c>
		__ticks = 1;
    3d26:	81 e0       	ldi	r24, 0x01	; 1
    3d28:	90 e0       	ldi	r25, 0x00	; 0
    3d2a:	9c 8b       	std	Y+20, r25	; 0x14
    3d2c:	8b 8b       	std	Y+19, r24	; 0x13
    3d2e:	3f c0       	rjmp	.+126    	; 0x3dae <LCD_enuLatch+0x38a>
	else if (__tmp > 65535)
    3d30:	6d 89       	ldd	r22, Y+21	; 0x15
    3d32:	7e 89       	ldd	r23, Y+22	; 0x16
    3d34:	8f 89       	ldd	r24, Y+23	; 0x17
    3d36:	98 8d       	ldd	r25, Y+24	; 0x18
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	3f ef       	ldi	r19, 0xFF	; 255
    3d3c:	4f e7       	ldi	r20, 0x7F	; 127
    3d3e:	57 e4       	ldi	r21, 0x47	; 71
    3d40:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    3d44:	18 16       	cp	r1, r24
    3d46:	4c f5       	brge	.+82     	; 0x3d9a <LCD_enuLatch+0x376>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d48:	69 8d       	ldd	r22, Y+25	; 0x19
    3d4a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d4c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d4e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d50:	20 e0       	ldi	r18, 0x00	; 0
    3d52:	30 e0       	ldi	r19, 0x00	; 0
    3d54:	40 e2       	ldi	r20, 0x20	; 32
    3d56:	51 e4       	ldi	r21, 0x41	; 65
    3d58:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3d5c:	dc 01       	movw	r26, r24
    3d5e:	cb 01       	movw	r24, r22
    3d60:	bc 01       	movw	r22, r24
    3d62:	cd 01       	movw	r24, r26
    3d64:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3d68:	dc 01       	movw	r26, r24
    3d6a:	cb 01       	movw	r24, r22
    3d6c:	9c 8b       	std	Y+20, r25	; 0x14
    3d6e:	8b 8b       	std	Y+19, r24	; 0x13
    3d70:	0f c0       	rjmp	.+30     	; 0x3d90 <LCD_enuLatch+0x36c>
    3d72:	89 e1       	ldi	r24, 0x19	; 25
    3d74:	90 e0       	ldi	r25, 0x00	; 0
    3d76:	9a 8b       	std	Y+18, r25	; 0x12
    3d78:	89 8b       	std	Y+17, r24	; 0x11
    3d7a:	89 89       	ldd	r24, Y+17	; 0x11
    3d7c:	9a 89       	ldd	r25, Y+18	; 0x12
    3d7e:	01 97       	sbiw	r24, 0x01	; 1
    3d80:	f1 f7       	brne	.-4      	; 0x3d7e <LCD_enuLatch+0x35a>
    3d82:	9a 8b       	std	Y+18, r25	; 0x12
    3d84:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d86:	8b 89       	ldd	r24, Y+19	; 0x13
    3d88:	9c 89       	ldd	r25, Y+20	; 0x14
    3d8a:	01 97       	sbiw	r24, 0x01	; 1
    3d8c:	9c 8b       	std	Y+20, r25	; 0x14
    3d8e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d90:	8b 89       	ldd	r24, Y+19	; 0x13
    3d92:	9c 89       	ldd	r25, Y+20	; 0x14
    3d94:	00 97       	sbiw	r24, 0x00	; 0
    3d96:	69 f7       	brne	.-38     	; 0x3d72 <LCD_enuLatch+0x34e>
    3d98:	14 c0       	rjmp	.+40     	; 0x3dc2 <LCD_enuLatch+0x39e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d9a:	6d 89       	ldd	r22, Y+21	; 0x15
    3d9c:	7e 89       	ldd	r23, Y+22	; 0x16
    3d9e:	8f 89       	ldd	r24, Y+23	; 0x17
    3da0:	98 8d       	ldd	r25, Y+24	; 0x18
    3da2:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3da6:	dc 01       	movw	r26, r24
    3da8:	cb 01       	movw	r24, r22
    3daa:	9c 8b       	std	Y+20, r25	; 0x14
    3dac:	8b 8b       	std	Y+19, r24	; 0x13
    3dae:	8b 89       	ldd	r24, Y+19	; 0x13
    3db0:	9c 89       	ldd	r25, Y+20	; 0x14
    3db2:	98 8b       	std	Y+16, r25	; 0x10
    3db4:	8f 87       	std	Y+15, r24	; 0x0f
    3db6:	8f 85       	ldd	r24, Y+15	; 0x0f
    3db8:	98 89       	ldd	r25, Y+16	; 0x10
    3dba:	01 97       	sbiw	r24, 0x01	; 1
    3dbc:	f1 f7       	brne	.-4      	; 0x3dba <LCD_enuLatch+0x396>
    3dbe:	98 8b       	std	Y+16, r25	; 0x10
    3dc0:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);

		Local_u32Check |= (     DIO_enuSetPinValue(D4_PORT, D4_PIN, (Copy_u8Data >> D0) & MASK_BIT) << 6 );
    3dc2:	89 a9       	ldd	r24, Y+49	; 0x31
    3dc4:	98 2f       	mov	r25, r24
    3dc6:	91 70       	andi	r25, 0x01	; 1
    3dc8:	80 e0       	ldi	r24, 0x00	; 0
    3dca:	63 e0       	ldi	r22, 0x03	; 3
    3dcc:	49 2f       	mov	r20, r25
    3dce:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
    3dd2:	88 2f       	mov	r24, r24
    3dd4:	90 e0       	ldi	r25, 0x00	; 0
    3dd6:	00 24       	eor	r0, r0
    3dd8:	96 95       	lsr	r25
    3dda:	87 95       	ror	r24
    3ddc:	07 94       	ror	r0
    3dde:	96 95       	lsr	r25
    3de0:	87 95       	ror	r24
    3de2:	07 94       	ror	r0
    3de4:	98 2f       	mov	r25, r24
    3de6:	80 2d       	mov	r24, r0
    3de8:	9c 01       	movw	r18, r24
    3dea:	44 27       	eor	r20, r20
    3dec:	37 fd       	sbrc	r19, 7
    3dee:	40 95       	com	r20
    3df0:	54 2f       	mov	r21, r20
    3df2:	8c a5       	ldd	r24, Y+44	; 0x2c
    3df4:	9d a5       	ldd	r25, Y+45	; 0x2d
    3df6:	ae a5       	ldd	r26, Y+46	; 0x2e
    3df8:	bf a5       	ldd	r27, Y+47	; 0x2f
    3dfa:	82 2b       	or	r24, r18
    3dfc:	93 2b       	or	r25, r19
    3dfe:	a4 2b       	or	r26, r20
    3e00:	b5 2b       	or	r27, r21
    3e02:	8c a7       	std	Y+44, r24	; 0x2c
    3e04:	9d a7       	std	Y+45, r25	; 0x2d
    3e06:	ae a7       	std	Y+46, r26	; 0x2e
    3e08:	bf a7       	std	Y+47, r27	; 0x2f
		Local_u32Check |= ((u32)DIO_enuSetPinValue(D5_PORT, D5_PIN, (Copy_u8Data >> D1) & MASK_BIT) << 9 );
    3e0a:	89 a9       	ldd	r24, Y+49	; 0x31
    3e0c:	86 95       	lsr	r24
    3e0e:	98 2f       	mov	r25, r24
    3e10:	91 70       	andi	r25, 0x01	; 1
    3e12:	80 e0       	ldi	r24, 0x00	; 0
    3e14:	64 e0       	ldi	r22, 0x04	; 4
    3e16:	49 2f       	mov	r20, r25
    3e18:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
    3e1c:	88 2f       	mov	r24, r24
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	a0 e0       	ldi	r26, 0x00	; 0
    3e22:	b0 e0       	ldi	r27, 0x00	; 0
    3e24:	9c 01       	movw	r18, r24
    3e26:	ad 01       	movw	r20, r26
    3e28:	01 2e       	mov	r0, r17
    3e2a:	19 e0       	ldi	r17, 0x09	; 9
    3e2c:	22 0f       	add	r18, r18
    3e2e:	33 1f       	adc	r19, r19
    3e30:	44 1f       	adc	r20, r20
    3e32:	55 1f       	adc	r21, r21
    3e34:	1a 95       	dec	r17
    3e36:	d1 f7       	brne	.-12     	; 0x3e2c <LCD_enuLatch+0x408>
    3e38:	10 2d       	mov	r17, r0
    3e3a:	8c a5       	ldd	r24, Y+44	; 0x2c
    3e3c:	9d a5       	ldd	r25, Y+45	; 0x2d
    3e3e:	ae a5       	ldd	r26, Y+46	; 0x2e
    3e40:	bf a5       	ldd	r27, Y+47	; 0x2f
    3e42:	82 2b       	or	r24, r18
    3e44:	93 2b       	or	r25, r19
    3e46:	a4 2b       	or	r26, r20
    3e48:	b5 2b       	or	r27, r21
    3e4a:	8c a7       	std	Y+44, r24	; 0x2c
    3e4c:	9d a7       	std	Y+45, r25	; 0x2d
    3e4e:	ae a7       	std	Y+46, r26	; 0x2e
    3e50:	bf a7       	std	Y+47, r27	; 0x2f
		Local_u32Check |= ((u32)DIO_enuSetPinValue(D6_PORT, D6_PIN, (Copy_u8Data >> D2) & MASK_BIT) << 12);
    3e52:	89 a9       	ldd	r24, Y+49	; 0x31
    3e54:	86 95       	lsr	r24
    3e56:	86 95       	lsr	r24
    3e58:	98 2f       	mov	r25, r24
    3e5a:	91 70       	andi	r25, 0x01	; 1
    3e5c:	80 e0       	ldi	r24, 0x00	; 0
    3e5e:	65 e0       	ldi	r22, 0x05	; 5
    3e60:	49 2f       	mov	r20, r25
    3e62:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
    3e66:	88 2f       	mov	r24, r24
    3e68:	90 e0       	ldi	r25, 0x00	; 0
    3e6a:	a0 e0       	ldi	r26, 0x00	; 0
    3e6c:	b0 e0       	ldi	r27, 0x00	; 0
    3e6e:	9c 01       	movw	r18, r24
    3e70:	ad 01       	movw	r20, r26
    3e72:	01 2e       	mov	r0, r17
    3e74:	1c e0       	ldi	r17, 0x0C	; 12
    3e76:	22 0f       	add	r18, r18
    3e78:	33 1f       	adc	r19, r19
    3e7a:	44 1f       	adc	r20, r20
    3e7c:	55 1f       	adc	r21, r21
    3e7e:	1a 95       	dec	r17
    3e80:	d1 f7       	brne	.-12     	; 0x3e76 <LCD_enuLatch+0x452>
    3e82:	10 2d       	mov	r17, r0
    3e84:	8c a5       	ldd	r24, Y+44	; 0x2c
    3e86:	9d a5       	ldd	r25, Y+45	; 0x2d
    3e88:	ae a5       	ldd	r26, Y+46	; 0x2e
    3e8a:	bf a5       	ldd	r27, Y+47	; 0x2f
    3e8c:	82 2b       	or	r24, r18
    3e8e:	93 2b       	or	r25, r19
    3e90:	a4 2b       	or	r26, r20
    3e92:	b5 2b       	or	r27, r21
    3e94:	8c a7       	std	Y+44, r24	; 0x2c
    3e96:	9d a7       	std	Y+45, r25	; 0x2d
    3e98:	ae a7       	std	Y+46, r26	; 0x2e
    3e9a:	bf a7       	std	Y+47, r27	; 0x2f
		Local_u32Check |= ((u32)DIO_enuSetPinValue(D7_PORT, D7_PIN, (Copy_u8Data >> D3) & MASK_BIT) << 15);
    3e9c:	89 a9       	ldd	r24, Y+49	; 0x31
    3e9e:	86 95       	lsr	r24
    3ea0:	86 95       	lsr	r24
    3ea2:	86 95       	lsr	r24
    3ea4:	98 2f       	mov	r25, r24
    3ea6:	91 70       	andi	r25, 0x01	; 1
    3ea8:	80 e0       	ldi	r24, 0x00	; 0
    3eaa:	66 e0       	ldi	r22, 0x06	; 6
    3eac:	49 2f       	mov	r20, r25
    3eae:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
    3eb2:	88 2f       	mov	r24, r24
    3eb4:	90 e0       	ldi	r25, 0x00	; 0
    3eb6:	a0 e0       	ldi	r26, 0x00	; 0
    3eb8:	b0 e0       	ldi	r27, 0x00	; 0
    3eba:	9c 01       	movw	r18, r24
    3ebc:	ad 01       	movw	r20, r26
    3ebe:	01 2e       	mov	r0, r17
    3ec0:	1f e0       	ldi	r17, 0x0F	; 15
    3ec2:	22 0f       	add	r18, r18
    3ec4:	33 1f       	adc	r19, r19
    3ec6:	44 1f       	adc	r20, r20
    3ec8:	55 1f       	adc	r21, r21
    3eca:	1a 95       	dec	r17
    3ecc:	d1 f7       	brne	.-12     	; 0x3ec2 <LCD_enuLatch+0x49e>
    3ece:	10 2d       	mov	r17, r0
    3ed0:	8c a5       	ldd	r24, Y+44	; 0x2c
    3ed2:	9d a5       	ldd	r25, Y+45	; 0x2d
    3ed4:	ae a5       	ldd	r26, Y+46	; 0x2e
    3ed6:	bf a5       	ldd	r27, Y+47	; 0x2f
    3ed8:	82 2b       	or	r24, r18
    3eda:	93 2b       	or	r25, r19
    3edc:	a4 2b       	or	r26, r20
    3ede:	b5 2b       	or	r27, r21
    3ee0:	8c a7       	std	Y+44, r24	; 0x2c
    3ee2:	9d a7       	std	Y+45, r25	; 0x2d
    3ee4:	ae a7       	std	Y+46, r26	; 0x2e
    3ee6:	bf a7       	std	Y+47, r27	; 0x2f
	}

	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0; Local_u8Iterator <= 15; Local_u8Iterator+=3)
    3ee8:	1b a6       	std	Y+43, r1	; 0x2b
    3eea:	1d c0       	rjmp	.+58     	; 0x3f26 <LCD_enuLatch+0x502>
	{
		if(( (Local_u32Check >> Local_u8Iterator) & (0b111) ) != ES_OK)
    3eec:	8b a5       	ldd	r24, Y+43	; 0x2b
    3eee:	28 2f       	mov	r18, r24
    3ef0:	30 e0       	ldi	r19, 0x00	; 0
    3ef2:	8c a5       	ldd	r24, Y+44	; 0x2c
    3ef4:	9d a5       	ldd	r25, Y+45	; 0x2d
    3ef6:	ae a5       	ldd	r26, Y+46	; 0x2e
    3ef8:	bf a5       	ldd	r27, Y+47	; 0x2f
    3efa:	02 2e       	mov	r0, r18
    3efc:	04 c0       	rjmp	.+8      	; 0x3f06 <LCD_enuLatch+0x4e2>
    3efe:	b6 95       	lsr	r27
    3f00:	a7 95       	ror	r26
    3f02:	97 95       	ror	r25
    3f04:	87 95       	ror	r24
    3f06:	0a 94       	dec	r0
    3f08:	d2 f7       	brpl	.-12     	; 0x3efe <LCD_enuLatch+0x4da>
    3f0a:	87 70       	andi	r24, 0x07	; 7
    3f0c:	90 70       	andi	r25, 0x00	; 0
    3f0e:	a0 70       	andi	r26, 0x00	; 0
    3f10:	b0 70       	andi	r27, 0x00	; 0
    3f12:	00 97       	sbiw	r24, 0x00	; 0
    3f14:	a1 05       	cpc	r26, r1
    3f16:	b1 05       	cpc	r27, r1
    3f18:	19 f0       	breq	.+6      	; 0x3f20 <LCD_enuLatch+0x4fc>
		{
			return ES_NOK;
    3f1a:	81 e0       	ldi	r24, 0x01	; 1
    3f1c:	8a ab       	std	Y+50, r24	; 0x32
    3f1e:	85 c0       	rjmp	.+266    	; 0x402a <LCD_enuLatch+0x606>
		Local_u32Check |= ((u32)DIO_enuSetPinValue(D6_PORT, D6_PIN, (Copy_u8Data >> D2) & MASK_BIT) << 12);
		Local_u32Check |= ((u32)DIO_enuSetPinValue(D7_PORT, D7_PIN, (Copy_u8Data >> D3) & MASK_BIT) << 15);
	}

	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0; Local_u8Iterator <= 15; Local_u8Iterator+=3)
    3f20:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f22:	8d 5f       	subi	r24, 0xFD	; 253
    3f24:	8b a7       	std	Y+43, r24	; 0x2b
    3f26:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f28:	80 31       	cpi	r24, 0x10	; 16
    3f2a:	00 f3       	brcs	.-64     	; 0x3eec <LCD_enuLatch+0x4c8>
#else
#error "Your LCD_Mode has wrong selection"
#endif

	// Enable latch
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8HIGH);
    3f2c:	80 e0       	ldi	r24, 0x00	; 0
    3f2e:	62 e0       	ldi	r22, 0x02	; 2
    3f30:	41 e0       	ldi	r20, 0x01	; 1
    3f32:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
    3f36:	80 e0       	ldi	r24, 0x00	; 0
    3f38:	90 e0       	ldi	r25, 0x00	; 0
    3f3a:	a0 e2       	ldi	r26, 0x20	; 32
    3f3c:	b1 e4       	ldi	r27, 0x41	; 65
    3f3e:	8b 87       	std	Y+11, r24	; 0x0b
    3f40:	9c 87       	std	Y+12, r25	; 0x0c
    3f42:	ad 87       	std	Y+13, r26	; 0x0d
    3f44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f46:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f48:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f4e:	20 e0       	ldi	r18, 0x00	; 0
    3f50:	30 e0       	ldi	r19, 0x00	; 0
    3f52:	4a e7       	ldi	r20, 0x7A	; 122
    3f54:	53 e4       	ldi	r21, 0x43	; 67
    3f56:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3f5a:	dc 01       	movw	r26, r24
    3f5c:	cb 01       	movw	r24, r22
    3f5e:	8f 83       	std	Y+7, r24	; 0x07
    3f60:	98 87       	std	Y+8, r25	; 0x08
    3f62:	a9 87       	std	Y+9, r26	; 0x09
    3f64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f66:	6f 81       	ldd	r22, Y+7	; 0x07
    3f68:	78 85       	ldd	r23, Y+8	; 0x08
    3f6a:	89 85       	ldd	r24, Y+9	; 0x09
    3f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f6e:	20 e0       	ldi	r18, 0x00	; 0
    3f70:	30 e0       	ldi	r19, 0x00	; 0
    3f72:	40 e8       	ldi	r20, 0x80	; 128
    3f74:	5f e3       	ldi	r21, 0x3F	; 63
    3f76:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    3f7a:	88 23       	and	r24, r24
    3f7c:	2c f4       	brge	.+10     	; 0x3f88 <LCD_enuLatch+0x564>
		__ticks = 1;
    3f7e:	81 e0       	ldi	r24, 0x01	; 1
    3f80:	90 e0       	ldi	r25, 0x00	; 0
    3f82:	9e 83       	std	Y+6, r25	; 0x06
    3f84:	8d 83       	std	Y+5, r24	; 0x05
    3f86:	3f c0       	rjmp	.+126    	; 0x4006 <LCD_enuLatch+0x5e2>
	else if (__tmp > 65535)
    3f88:	6f 81       	ldd	r22, Y+7	; 0x07
    3f8a:	78 85       	ldd	r23, Y+8	; 0x08
    3f8c:	89 85       	ldd	r24, Y+9	; 0x09
    3f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	3f ef       	ldi	r19, 0xFF	; 255
    3f94:	4f e7       	ldi	r20, 0x7F	; 127
    3f96:	57 e4       	ldi	r21, 0x47	; 71
    3f98:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    3f9c:	18 16       	cp	r1, r24
    3f9e:	4c f5       	brge	.+82     	; 0x3ff2 <LCD_enuLatch+0x5ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fa0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fa2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fa4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fa6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fa8:	20 e0       	ldi	r18, 0x00	; 0
    3faa:	30 e0       	ldi	r19, 0x00	; 0
    3fac:	40 e2       	ldi	r20, 0x20	; 32
    3fae:	51 e4       	ldi	r21, 0x41	; 65
    3fb0:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    3fb4:	dc 01       	movw	r26, r24
    3fb6:	cb 01       	movw	r24, r22
    3fb8:	bc 01       	movw	r22, r24
    3fba:	cd 01       	movw	r24, r26
    3fbc:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3fc0:	dc 01       	movw	r26, r24
    3fc2:	cb 01       	movw	r24, r22
    3fc4:	9e 83       	std	Y+6, r25	; 0x06
    3fc6:	8d 83       	std	Y+5, r24	; 0x05
    3fc8:	0f c0       	rjmp	.+30     	; 0x3fe8 <LCD_enuLatch+0x5c4>
    3fca:	89 e1       	ldi	r24, 0x19	; 25
    3fcc:	90 e0       	ldi	r25, 0x00	; 0
    3fce:	9c 83       	std	Y+4, r25	; 0x04
    3fd0:	8b 83       	std	Y+3, r24	; 0x03
    3fd2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fd4:	9c 81       	ldd	r25, Y+4	; 0x04
    3fd6:	01 97       	sbiw	r24, 0x01	; 1
    3fd8:	f1 f7       	brne	.-4      	; 0x3fd6 <LCD_enuLatch+0x5b2>
    3fda:	9c 83       	std	Y+4, r25	; 0x04
    3fdc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fde:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    3fe2:	01 97       	sbiw	r24, 0x01	; 1
    3fe4:	9e 83       	std	Y+6, r25	; 0x06
    3fe6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fea:	9e 81       	ldd	r25, Y+6	; 0x06
    3fec:	00 97       	sbiw	r24, 0x00	; 0
    3fee:	69 f7       	brne	.-38     	; 0x3fca <LCD_enuLatch+0x5a6>
    3ff0:	14 c0       	rjmp	.+40     	; 0x401a <LCD_enuLatch+0x5f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ff2:	6f 81       	ldd	r22, Y+7	; 0x07
    3ff4:	78 85       	ldd	r23, Y+8	; 0x08
    3ff6:	89 85       	ldd	r24, Y+9	; 0x09
    3ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ffa:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    3ffe:	dc 01       	movw	r26, r24
    4000:	cb 01       	movw	r24, r22
    4002:	9e 83       	std	Y+6, r25	; 0x06
    4004:	8d 83       	std	Y+5, r24	; 0x05
    4006:	8d 81       	ldd	r24, Y+5	; 0x05
    4008:	9e 81       	ldd	r25, Y+6	; 0x06
    400a:	9a 83       	std	Y+2, r25	; 0x02
    400c:	89 83       	std	Y+1, r24	; 0x01
    400e:	89 81       	ldd	r24, Y+1	; 0x01
    4010:	9a 81       	ldd	r25, Y+2	; 0x02
    4012:	01 97       	sbiw	r24, 0x01	; 1
    4014:	f1 f7       	brne	.-4      	; 0x4012 <LCD_enuLatch+0x5ee>
    4016:	9a 83       	std	Y+2, r25	; 0x02
    4018:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	DIO_enuSetPinValue(EN_PORT, EN_PIN, DIO_u8LOW);
    401a:	80 e0       	ldi	r24, 0x00	; 0
    401c:	62 e0       	ldi	r22, 0x02	; 2
    401e:	40 e0       	ldi	r20, 0x00	; 0
    4020:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>

	Local_ErrorState = ES_OK;
    4024:	18 aa       	std	Y+48, r1	; 0x30
	return Local_ErrorState;
    4026:	88 a9       	ldd	r24, Y+48	; 0x30
    4028:	8a ab       	std	Y+50, r24	; 0x32
    402a:	8a a9       	ldd	r24, Y+50	; 0x32
}
    402c:	e2 96       	adiw	r28, 0x32	; 50
    402e:	0f b6       	in	r0, 0x3f	; 63
    4030:	f8 94       	cli
    4032:	de bf       	out	0x3e, r29	; 62
    4034:	0f be       	out	0x3f, r0	; 63
    4036:	cd bf       	out	0x3d, r28	; 61
    4038:	cf 91       	pop	r28
    403a:	df 91       	pop	r29
    403c:	08 95       	ret

0000403e <LCD_enuDisplayString>:




ES_t LCD_enuDisplayString(u8 *Copy_Pu8Data)
{
    403e:	0f 93       	push	r16
    4040:	1f 93       	push	r17
    4042:	df 93       	push	r29
    4044:	cf 93       	push	r28
    4046:	00 d0       	rcall	.+0      	; 0x4048 <LCD_enuDisplayString+0xa>
    4048:	00 d0       	rcall	.+0      	; 0x404a <LCD_enuDisplayString+0xc>
    404a:	0f 92       	push	r0
    404c:	cd b7       	in	r28, 0x3d	; 61
    404e:	de b7       	in	r29, 0x3e	; 62
    4050:	9c 83       	std	Y+4, r25	; 0x04
    4052:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_ErrorState = ES_NOK;
    4054:	81 e0       	ldi	r24, 0x01	; 1
    4056:	8a 83       	std	Y+2, r24	; 0x02

	// Set RS as a Data Selection
	if(DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH) == ES_OK)
    4058:	80 e0       	ldi	r24, 0x00	; 0
    405a:	60 e0       	ldi	r22, 0x00	; 0
    405c:	41 e0       	ldi	r20, 0x01	; 1
    405e:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
    4062:	88 23       	and	r24, r24
    4064:	f9 f4       	brne	.+62     	; 0x40a4 <LCD_enuDisplayString+0x66>
	{
		u8 Local_Iterator;
		for(Local_Iterator = 0; Local_Iterator < strlen(Copy_Pu8Data); ++Local_Iterator)
    4066:	19 82       	std	Y+1, r1	; 0x01
    4068:	13 c0       	rjmp	.+38     	; 0x4090 <LCD_enuDisplayString+0x52>
		{
			if(LCD_enuLatch((u8)Copy_Pu8Data[Local_Iterator]) != ES_OK)
    406a:	89 81       	ldd	r24, Y+1	; 0x01
    406c:	28 2f       	mov	r18, r24
    406e:	30 e0       	ldi	r19, 0x00	; 0
    4070:	8b 81       	ldd	r24, Y+3	; 0x03
    4072:	9c 81       	ldd	r25, Y+4	; 0x04
    4074:	fc 01       	movw	r30, r24
    4076:	e2 0f       	add	r30, r18
    4078:	f3 1f       	adc	r31, r19
    407a:	80 81       	ld	r24, Z
    407c:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <LCD_enuLatch>
    4080:	88 23       	and	r24, r24
    4082:	19 f0       	breq	.+6      	; 0x408a <LCD_enuDisplayString+0x4c>
			{
				return Local_ErrorState;
    4084:	8a 81       	ldd	r24, Y+2	; 0x02
    4086:	8d 83       	std	Y+5, r24	; 0x05
    4088:	10 c0       	rjmp	.+32     	; 0x40aa <LCD_enuDisplayString+0x6c>

	// Set RS as a Data Selection
	if(DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH) == ES_OK)
	{
		u8 Local_Iterator;
		for(Local_Iterator = 0; Local_Iterator < strlen(Copy_Pu8Data); ++Local_Iterator)
    408a:	89 81       	ldd	r24, Y+1	; 0x01
    408c:	8f 5f       	subi	r24, 0xFF	; 255
    408e:	89 83       	std	Y+1, r24	; 0x01
    4090:	89 81       	ldd	r24, Y+1	; 0x01
    4092:	08 2f       	mov	r16, r24
    4094:	10 e0       	ldi	r17, 0x00	; 0
    4096:	8b 81       	ldd	r24, Y+3	; 0x03
    4098:	9c 81       	ldd	r25, Y+4	; 0x04
    409a:	0e 94 fa 3c 	call	0x79f4	; 0x79f4 <strlen>
    409e:	08 17       	cp	r16, r24
    40a0:	19 07       	cpc	r17, r25
    40a2:	18 f3       	brcs	.-58     	; 0x406a <LCD_enuDisplayString+0x2c>
			{
				return Local_ErrorState;
			}
		}
	}
	Local_ErrorState = ES_OK;
    40a4:	1a 82       	std	Y+2, r1	; 0x02
	return Local_ErrorState;
    40a6:	8a 81       	ldd	r24, Y+2	; 0x02
    40a8:	8d 83       	std	Y+5, r24	; 0x05
    40aa:	8d 81       	ldd	r24, Y+5	; 0x05
}
    40ac:	0f 90       	pop	r0
    40ae:	0f 90       	pop	r0
    40b0:	0f 90       	pop	r0
    40b2:	0f 90       	pop	r0
    40b4:	0f 90       	pop	r0
    40b6:	cf 91       	pop	r28
    40b8:	df 91       	pop	r29
    40ba:	1f 91       	pop	r17
    40bc:	0f 91       	pop	r16
    40be:	08 95       	ret

000040c0 <LCD_enuDisplayChar>:




ES_t LCD_enuDisplayChar(u8  Copy_u8Char)
{
    40c0:	df 93       	push	r29
    40c2:	cf 93       	push	r28
    40c4:	00 d0       	rcall	.+0      	; 0x40c6 <LCD_enuDisplayChar+0x6>
    40c6:	cd b7       	in	r28, 0x3d	; 61
    40c8:	de b7       	in	r29, 0x3e	; 62
    40ca:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_ErrorState = ES_NOK;
    40cc:	81 e0       	ldi	r24, 0x01	; 1
    40ce:	89 83       	std	Y+1, r24	; 0x01

	// Set RS as a command
	if(DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH) == ES_OK)
    40d0:	80 e0       	ldi	r24, 0x00	; 0
    40d2:	60 e0       	ldi	r22, 0x00	; 0
    40d4:	41 e0       	ldi	r20, 0x01	; 1
    40d6:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
    40da:	88 23       	and	r24, r24
    40dc:	21 f4       	brne	.+8      	; 0x40e6 <LCD_enuDisplayChar+0x26>
	{
		Local_ErrorState = LCD_enuLatch(Copy_u8Char);
    40de:	8a 81       	ldd	r24, Y+2	; 0x02
    40e0:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <LCD_enuLatch>
    40e4:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
    40e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    40e8:	0f 90       	pop	r0
    40ea:	0f 90       	pop	r0
    40ec:	cf 91       	pop	r28
    40ee:	df 91       	pop	r29
    40f0:	08 95       	ret

000040f2 <LCD_enuClearDisplay>:




ES_t LCD_enuClearDisplay(void)
{
    40f2:	df 93       	push	r29
    40f4:	cf 93       	push	r28
    40f6:	0f 92       	push	r0
    40f8:	cd b7       	in	r28, 0x3d	; 61
    40fa:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_ErrorState = ES_NOK;
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	89 83       	std	Y+1, r24	; 0x01

	Local_ErrorState = LCD_inenuSendCommand(0x01);
    4100:	81 e0       	ldi	r24, 0x01	; 1
    4102:	0e 94 a2 20 	call	0x4144	; 0x4144 <LCD_inenuSendCommand>
    4106:	89 83       	std	Y+1, r24	; 0x01

	return Local_ErrorState;
    4108:	89 81       	ldd	r24, Y+1	; 0x01
}
    410a:	0f 90       	pop	r0
    410c:	cf 91       	pop	r28
    410e:	df 91       	pop	r29
    4110:	08 95       	ret

00004112 <LCD_enuSendCommand>:




ES_t LCD_enuSendCommand(u8 Copy_u8Command)
{
    4112:	df 93       	push	r29
    4114:	cf 93       	push	r28
    4116:	00 d0       	rcall	.+0      	; 0x4118 <LCD_enuSendCommand+0x6>
    4118:	cd b7       	in	r28, 0x3d	; 61
    411a:	de b7       	in	r29, 0x3e	; 62
    411c:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_ErrorState = ES_NOK;
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	89 83       	std	Y+1, r24	; 0x01

	// Set RS as a command
	if(DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW) == ES_OK)
    4122:	80 e0       	ldi	r24, 0x00	; 0
    4124:	60 e0       	ldi	r22, 0x00	; 0
    4126:	40 e0       	ldi	r20, 0x00	; 0
    4128:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
    412c:	88 23       	and	r24, r24
    412e:	21 f4       	brne	.+8      	; 0x4138 <LCD_enuSendCommand+0x26>
	{
		Local_ErrorState = LCD_enuLatch(Copy_u8Command);
    4130:	8a 81       	ldd	r24, Y+2	; 0x02
    4132:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <LCD_enuLatch>
    4136:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
    4138:	89 81       	ldd	r24, Y+1	; 0x01
}
    413a:	0f 90       	pop	r0
    413c:	0f 90       	pop	r0
    413e:	cf 91       	pop	r28
    4140:	df 91       	pop	r29
    4142:	08 95       	ret

00004144 <LCD_inenuSendCommand>:




static inline ES_t LCD_inenuSendCommand(u8 Copy_u8Command)
{
    4144:	df 93       	push	r29
    4146:	cf 93       	push	r28
    4148:	00 d0       	rcall	.+0      	; 0x414a <LCD_inenuSendCommand+0x6>
    414a:	cd b7       	in	r28, 0x3d	; 61
    414c:	de b7       	in	r29, 0x3e	; 62
    414e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_ErrorState = ES_NOK;
    4150:	81 e0       	ldi	r24, 0x01	; 1
    4152:	89 83       	std	Y+1, r24	; 0x01

	// Set RS as a command
	if(DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8LOW) == ES_OK)
    4154:	80 e0       	ldi	r24, 0x00	; 0
    4156:	60 e0       	ldi	r22, 0x00	; 0
    4158:	40 e0       	ldi	r20, 0x00	; 0
    415a:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
    415e:	88 23       	and	r24, r24
    4160:	21 f4       	brne	.+8      	; 0x416a <LCD_inenuSendCommand+0x26>
	{
		Local_ErrorState = LCD_enuLatch(Copy_u8Command);
    4162:	8a 81       	ldd	r24, Y+2	; 0x02
    4164:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <LCD_enuLatch>
    4168:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_ErrorState;
    416a:	89 81       	ldd	r24, Y+1	; 0x01
}
    416c:	0f 90       	pop	r0
    416e:	0f 90       	pop	r0
    4170:	cf 91       	pop	r28
    4172:	df 91       	pop	r29
    4174:	08 95       	ret

00004176 <LCD_enuSendExtraChar>:




ES_t LCD_enuSendExtraChar(u8 * Copy_Pu8ExtraChar, u8 Copy_u8NumOfChar, u8 Copy_u8WritrMode)
{
    4176:	df 93       	push	r29
    4178:	cf 93       	push	r28
    417a:	00 d0       	rcall	.+0      	; 0x417c <LCD_enuSendExtraChar+0x6>
    417c:	00 d0       	rcall	.+0      	; 0x417e <LCD_enuSendExtraChar+0x8>
    417e:	00 d0       	rcall	.+0      	; 0x4180 <LCD_enuSendExtraChar+0xa>
    4180:	cd b7       	in	r28, 0x3d	; 61
    4182:	de b7       	in	r29, 0x3e	; 62
    4184:	9c 83       	std	Y+4, r25	; 0x04
    4186:	8b 83       	std	Y+3, r24	; 0x03
    4188:	6d 83       	std	Y+5, r22	; 0x05
    418a:	4e 83       	std	Y+6, r20	; 0x06
	ES_t Local_ErrorState = ES_NOK;
    418c:	81 e0       	ldi	r24, 0x01	; 1
    418e:	8a 83       	std	Y+2, r24	; 0x02

	Local_ErrorState = LCD_enuSendCommand(CHAR_POS);
    4190:	80 e4       	ldi	r24, 0x40	; 64
    4192:	0e 94 89 20 	call	0x4112	; 0x4112 <LCD_enuSendCommand>
    4196:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0; Local_u8Iterator < 8 * Copy_u8NumOfChar; ++Local_u8Iterator)
    4198:	19 82       	std	Y+1, r1	; 0x01
    419a:	0e c0       	rjmp	.+28     	; 0x41b8 <LCD_enuSendExtraChar+0x42>
	{
		LCD_enuDisplayChar(Copy_Pu8ExtraChar[Local_u8Iterator]);
    419c:	89 81       	ldd	r24, Y+1	; 0x01
    419e:	28 2f       	mov	r18, r24
    41a0:	30 e0       	ldi	r19, 0x00	; 0
    41a2:	8b 81       	ldd	r24, Y+3	; 0x03
    41a4:	9c 81       	ldd	r25, Y+4	; 0x04
    41a6:	fc 01       	movw	r30, r24
    41a8:	e2 0f       	add	r30, r18
    41aa:	f3 1f       	adc	r31, r19
    41ac:	80 81       	ld	r24, Z
    41ae:	0e 94 60 20 	call	0x40c0	; 0x40c0 <LCD_enuDisplayChar>
	ES_t Local_ErrorState = ES_NOK;

	Local_ErrorState = LCD_enuSendCommand(CHAR_POS);

	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0; Local_u8Iterator < 8 * Copy_u8NumOfChar; ++Local_u8Iterator)
    41b2:	89 81       	ldd	r24, Y+1	; 0x01
    41b4:	8f 5f       	subi	r24, 0xFF	; 255
    41b6:	89 83       	std	Y+1, r24	; 0x01
    41b8:	89 81       	ldd	r24, Y+1	; 0x01
    41ba:	28 2f       	mov	r18, r24
    41bc:	30 e0       	ldi	r19, 0x00	; 0
    41be:	8d 81       	ldd	r24, Y+5	; 0x05
    41c0:	88 2f       	mov	r24, r24
    41c2:	90 e0       	ldi	r25, 0x00	; 0
    41c4:	88 0f       	add	r24, r24
    41c6:	99 1f       	adc	r25, r25
    41c8:	88 0f       	add	r24, r24
    41ca:	99 1f       	adc	r25, r25
    41cc:	88 0f       	add	r24, r24
    41ce:	99 1f       	adc	r25, r25
    41d0:	28 17       	cp	r18, r24
    41d2:	39 07       	cpc	r19, r25
    41d4:	1c f3       	brlt	.-58     	; 0x419c <LCD_enuSendExtraChar+0x26>
	{
		LCD_enuDisplayChar(Copy_Pu8ExtraChar[Local_u8Iterator]);
	}

	if(Copy_u8WritrMode == RIGHT_TO_LEFT)
    41d6:	8e 81       	ldd	r24, Y+6	; 0x06
    41d8:	88 35       	cpi	r24, 0x58	; 88
    41da:	49 f4       	brne	.+18     	; 0x41ee <LCD_enuSendExtraChar+0x78>
	{

		Local_ErrorState = LCD_enuSendCommand(0x8f);// line 1   last block
    41dc:	8f e8       	ldi	r24, 0x8F	; 143
    41de:	0e 94 89 20 	call	0x4112	; 0x4112 <LCD_enuSendCommand>
    41e2:	8a 83       	std	Y+2, r24	; 0x02
		Local_ErrorState = LCD_enuSendCommand(0x04);// RIGHT_TO_LEFT
    41e4:	84 e0       	ldi	r24, 0x04	; 4
    41e6:	0e 94 89 20 	call	0x4112	; 0x4112 <LCD_enuSendCommand>
    41ea:	8a 83       	std	Y+2, r24	; 0x02
    41ec:	05 c0       	rjmp	.+10     	; 0x41f8 <LCD_enuSendExtraChar+0x82>

	}
	else if(Copy_u8WritrMode == LEFT_TO_RIGHT)
    41ee:	8e 81       	ldd	r24, Y+6	; 0x06
    41f0:	83 36       	cpi	r24, 0x63	; 99
    41f2:	11 f0       	breq	.+4      	; 0x41f8 <LCD_enuSendExtraChar+0x82>
	{

	}
	else
	{
		Local_ErrorState = ES_OUT_OF_RANGE;
    41f4:	83 e0       	ldi	r24, 0x03	; 3
    41f6:	8a 83       	std	Y+2, r24	; 0x02
	}


	Local_ErrorState = ES_OK;
    41f8:	1a 82       	std	Y+2, r1	; 0x02
	return Local_ErrorState;
    41fa:	8a 81       	ldd	r24, Y+2	; 0x02
}
    41fc:	26 96       	adiw	r28, 0x06	; 6
    41fe:	0f b6       	in	r0, 0x3f	; 63
    4200:	f8 94       	cli
    4202:	de bf       	out	0x3e, r29	; 62
    4204:	0f be       	out	0x3f, r0	; 63
    4206:	cd bf       	out	0x3d, r28	; 61
    4208:	cf 91       	pop	r28
    420a:	df 91       	pop	r29
    420c:	08 95       	ret

0000420e <LCD_enuGoto>:



ES_t LCD_enuGoto(u8 Copy_u8Line,u8 Copy_u8Block)
{
    420e:	df 93       	push	r29
    4210:	cf 93       	push	r28
    4212:	00 d0       	rcall	.+0      	; 0x4214 <LCD_enuGoto+0x6>
    4214:	00 d0       	rcall	.+0      	; 0x4216 <LCD_enuGoto+0x8>
    4216:	cd b7       	in	r28, 0x3d	; 61
    4218:	de b7       	in	r29, 0x3e	; 62
    421a:	8a 83       	std	Y+2, r24	; 0x02
    421c:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_ErrorState = ES_NOK;
    421e:	81 e0       	ldi	r24, 0x01	; 1
    4220:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Line == 1)
    4222:	8a 81       	ldd	r24, Y+2	; 0x02
    4224:	81 30       	cpi	r24, 0x01	; 1
    4226:	31 f4       	brne	.+12     	; 0x4234 <LCD_enuGoto+0x26>
	{
		Local_ErrorState = LCD_enuSendCommand(0x80 + Copy_u8Block);
    4228:	8b 81       	ldd	r24, Y+3	; 0x03
    422a:	80 58       	subi	r24, 0x80	; 128
    422c:	0e 94 89 20 	call	0x4112	; 0x4112 <LCD_enuSendCommand>
    4230:	89 83       	std	Y+1, r24	; 0x01
    4232:	0c c0       	rjmp	.+24     	; 0x424c <LCD_enuGoto+0x3e>
	}
	else if(Copy_u8Line == 2)
    4234:	8a 81       	ldd	r24, Y+2	; 0x02
    4236:	82 30       	cpi	r24, 0x02	; 2
    4238:	31 f4       	brne	.+12     	; 0x4246 <LCD_enuGoto+0x38>
	{
		Local_ErrorState = LCD_enuSendCommand(0x80+0x40+Copy_u8Block);
    423a:	8b 81       	ldd	r24, Y+3	; 0x03
    423c:	80 54       	subi	r24, 0x40	; 64
    423e:	0e 94 89 20 	call	0x4112	; 0x4112 <LCD_enuSendCommand>
    4242:	89 83       	std	Y+1, r24	; 0x01
    4244:	03 c0       	rjmp	.+6      	; 0x424c <LCD_enuGoto+0x3e>
	}
	else
	{
		return ES_OUT_OF_RANGE;
    4246:	83 e0       	ldi	r24, 0x03	; 3
    4248:	8c 83       	std	Y+4, r24	; 0x04
    424a:	02 c0       	rjmp	.+4      	; 0x4250 <LCD_enuGoto+0x42>
	}
	return Local_ErrorState;
    424c:	89 81       	ldd	r24, Y+1	; 0x01
    424e:	8c 83       	std	Y+4, r24	; 0x04
    4250:	8c 81       	ldd	r24, Y+4	; 0x04
}
    4252:	0f 90       	pop	r0
    4254:	0f 90       	pop	r0
    4256:	0f 90       	pop	r0
    4258:	0f 90       	pop	r0
    425a:	cf 91       	pop	r28
    425c:	df 91       	pop	r29
    425e:	08 95       	ret

00004260 <LCD_enuWriteNumber>:


ES_t LCD_enuWriteNumber(f32 Copy_u8Num) // 0.004
{
    4260:	0f 93       	push	r16
    4262:	1f 93       	push	r17
    4264:	df 93       	push	r29
    4266:	cf 93       	push	r28
    4268:	cd b7       	in	r28, 0x3d	; 61
    426a:	de b7       	in	r29, 0x3e	; 62
    426c:	2f 97       	sbiw	r28, 0x0f	; 15
    426e:	0f b6       	in	r0, 0x3f	; 63
    4270:	f8 94       	cli
    4272:	de bf       	out	0x3e, r29	; 62
    4274:	0f be       	out	0x3f, r0	; 63
    4276:	cd bf       	out	0x3d, r28	; 61
    4278:	69 87       	std	Y+9, r22	; 0x09
    427a:	7a 87       	std	Y+10, r23	; 0x0a
    427c:	8b 87       	std	Y+11, r24	; 0x0b
    427e:	9c 87       	std	Y+12, r25	; 0x0c
	ES_t Local_enuErrorState = ES_NOK;
    4280:	81 e0       	ldi	r24, 0x01	; 1
    4282:	88 87       	std	Y+8, r24	; 0x08
	Local_enuErrorState = DIO_enuSetPinValue(RS_PORT, RS_PIN, DIO_u8HIGH );
    4284:	80 e0       	ldi	r24, 0x00	; 0
    4286:	60 e0       	ldi	r22, 0x00	; 0
    4288:	41 e0       	ldi	r20, 0x01	; 1
    428a:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
    428e:	88 87       	std	Y+8, r24	; 0x08

	if(Copy_u8Num == 0.0)
    4290:	69 85       	ldd	r22, Y+9	; 0x09
    4292:	7a 85       	ldd	r23, Y+10	; 0x0a
    4294:	8b 85       	ldd	r24, Y+11	; 0x0b
    4296:	9c 85       	ldd	r25, Y+12	; 0x0c
    4298:	20 e0       	ldi	r18, 0x00	; 0
    429a:	30 e0       	ldi	r19, 0x00	; 0
    429c:	40 e0       	ldi	r20, 0x00	; 0
    429e:	50 e0       	ldi	r21, 0x00	; 0
    42a0:	0e 94 c3 04 	call	0x986	; 0x986 <__eqsf2>
    42a4:	88 23       	and	r24, r24
    42a6:	39 f4       	brne	.+14     	; 0x42b6 <LCD_enuWriteNumber+0x56>
	{
		Local_enuErrorState = LCD_enuLatch('0');
    42a8:	80 e3       	ldi	r24, 0x30	; 48
    42aa:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <LCD_enuLatch>
    42ae:	88 87       	std	Y+8, r24	; 0x08
		return Local_enuErrorState;
    42b0:	28 85       	ldd	r18, Y+8	; 0x08
    42b2:	2f 87       	std	Y+15, r18	; 0x0f
    42b4:	65 c1       	rjmp	.+714    	; 0x4580 <LCD_enuWriteNumber+0x320>
	}

	static u8 Local_Au8Digits[16] = {'0'};
	s8 Local_u8Iterator = -1;
    42b6:	8f ef       	ldi	r24, 0xFF	; 255
    42b8:	8f 83       	std	Y+7, r24	; 0x07
	s32 Local_s32Number = Copy_u8Num;// 0
    42ba:	69 85       	ldd	r22, Y+9	; 0x09
    42bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    42be:	8b 85       	ldd	r24, Y+11	; 0x0b
    42c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    42c2:	0e 94 41 06 	call	0xc82	; 0xc82 <__fixsfsi>
    42c6:	dc 01       	movw	r26, r24
    42c8:	cb 01       	movw	r24, r22
    42ca:	8b 83       	std	Y+3, r24	; 0x03
    42cc:	9c 83       	std	Y+4, r25	; 0x04
    42ce:	ad 83       	std	Y+5, r26	; 0x05
    42d0:	be 83       	std	Y+6, r27	; 0x06
	if(Copy_u8Num < 0 )
    42d2:	69 85       	ldd	r22, Y+9	; 0x09
    42d4:	7a 85       	ldd	r23, Y+10	; 0x0a
    42d6:	8b 85       	ldd	r24, Y+11	; 0x0b
    42d8:	9c 85       	ldd	r25, Y+12	; 0x0c
    42da:	20 e0       	ldi	r18, 0x00	; 0
    42dc:	30 e0       	ldi	r19, 0x00	; 0
    42de:	40 e0       	ldi	r20, 0x00	; 0
    42e0:	50 e0       	ldi	r21, 0x00	; 0
    42e2:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    42e6:	88 23       	and	r24, r24
    42e8:	94 f4       	brge	.+36     	; 0x430e <LCD_enuWriteNumber+0xae>
	{
		LCD_enuDisplayChar('-');
    42ea:	8d e2       	ldi	r24, 0x2D	; 45
    42ec:	0e 94 60 20 	call	0x40c0	; 0x40c0 <LCD_enuDisplayChar>
		Local_s32Number *= -1;
    42f0:	8b 81       	ldd	r24, Y+3	; 0x03
    42f2:	9c 81       	ldd	r25, Y+4	; 0x04
    42f4:	ad 81       	ldd	r26, Y+5	; 0x05
    42f6:	be 81       	ldd	r27, Y+6	; 0x06
    42f8:	b0 95       	com	r27
    42fa:	a0 95       	com	r26
    42fc:	90 95       	com	r25
    42fe:	81 95       	neg	r24
    4300:	9f 4f       	sbci	r25, 0xFF	; 255
    4302:	af 4f       	sbci	r26, 0xFF	; 255
    4304:	bf 4f       	sbci	r27, 0xFF	; 255
    4306:	8b 83       	std	Y+3, r24	; 0x03
    4308:	9c 83       	std	Y+4, r25	; 0x04
    430a:	ad 83       	std	Y+5, r26	; 0x05
    430c:	be 83       	std	Y+6, r27	; 0x06
	}
	if((Copy_u8Num < 1.0 && Copy_u8Num > 0.0) || (Copy_u8Num > -1.0 && Copy_u8Num < 0.0)) LCD_enuDisplayChar('0');
    430e:	1e 86       	std	Y+14, r1	; 0x0e
    4310:	69 85       	ldd	r22, Y+9	; 0x09
    4312:	7a 85       	ldd	r23, Y+10	; 0x0a
    4314:	8b 85       	ldd	r24, Y+11	; 0x0b
    4316:	9c 85       	ldd	r25, Y+12	; 0x0c
    4318:	20 e0       	ldi	r18, 0x00	; 0
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	40 e8       	ldi	r20, 0x80	; 128
    431e:	5f e3       	ldi	r21, 0x3F	; 63
    4320:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    4324:	88 23       	and	r24, r24
    4326:	14 f4       	brge	.+4      	; 0x432c <LCD_enuWriteNumber+0xcc>
    4328:	81 e0       	ldi	r24, 0x01	; 1
    432a:	8e 87       	std	Y+14, r24	; 0x0e
    432c:	81 e0       	ldi	r24, 0x01	; 1
    432e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4330:	89 27       	eor	r24, r25
    4332:	88 23       	and	r24, r24
    4334:	61 f4       	brne	.+24     	; 0x434e <LCD_enuWriteNumber+0xee>
    4336:	69 85       	ldd	r22, Y+9	; 0x09
    4338:	7a 85       	ldd	r23, Y+10	; 0x0a
    433a:	8b 85       	ldd	r24, Y+11	; 0x0b
    433c:	9c 85       	ldd	r25, Y+12	; 0x0c
    433e:	20 e0       	ldi	r18, 0x00	; 0
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	40 e0       	ldi	r20, 0x00	; 0
    4344:	50 e0       	ldi	r21, 0x00	; 0
    4346:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    434a:	18 16       	cp	r1, r24
    434c:	04 f1       	brlt	.+64     	; 0x438e <LCD_enuWriteNumber+0x12e>
    434e:	1d 86       	std	Y+13, r1	; 0x0d
    4350:	69 85       	ldd	r22, Y+9	; 0x09
    4352:	7a 85       	ldd	r23, Y+10	; 0x0a
    4354:	8b 85       	ldd	r24, Y+11	; 0x0b
    4356:	9c 85       	ldd	r25, Y+12	; 0x0c
    4358:	20 e0       	ldi	r18, 0x00	; 0
    435a:	30 e0       	ldi	r19, 0x00	; 0
    435c:	40 e8       	ldi	r20, 0x80	; 128
    435e:	5f eb       	ldi	r21, 0xBF	; 191
    4360:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    4364:	18 16       	cp	r1, r24
    4366:	14 f4       	brge	.+4      	; 0x436c <LCD_enuWriteNumber+0x10c>
    4368:	21 e0       	ldi	r18, 0x01	; 1
    436a:	2d 87       	std	Y+13, r18	; 0x0d
    436c:	81 e0       	ldi	r24, 0x01	; 1
    436e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4370:	89 27       	eor	r24, r25
    4372:	88 23       	and	r24, r24
    4374:	e1 f5       	brne	.+120    	; 0x43ee <LCD_enuWriteNumber+0x18e>
    4376:	69 85       	ldd	r22, Y+9	; 0x09
    4378:	7a 85       	ldd	r23, Y+10	; 0x0a
    437a:	8b 85       	ldd	r24, Y+11	; 0x0b
    437c:	9c 85       	ldd	r25, Y+12	; 0x0c
    437e:	20 e0       	ldi	r18, 0x00	; 0
    4380:	30 e0       	ldi	r19, 0x00	; 0
    4382:	40 e0       	ldi	r20, 0x00	; 0
    4384:	50 e0       	ldi	r21, 0x00	; 0
    4386:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    438a:	88 23       	and	r24, r24
    438c:	84 f5       	brge	.+96     	; 0x43ee <LCD_enuWriteNumber+0x18e>
    438e:	80 e3       	ldi	r24, 0x30	; 48
    4390:	0e 94 60 20 	call	0x40c0	; 0x40c0 <LCD_enuDisplayChar>
    4394:	2c c0       	rjmp	.+88     	; 0x43ee <LCD_enuWriteNumber+0x18e>

	while (Local_s32Number > 0 && Local_enuErrorState == ES_OK)
	{
		Local_u8Iterator++;
    4396:	8f 81       	ldd	r24, Y+7	; 0x07
    4398:	8f 5f       	subi	r24, 0xFF	; 255
    439a:	8f 83       	std	Y+7, r24	; 0x07
		Local_Au8Digits[Local_u8Iterator] = Local_s32Number % 10;
    439c:	8f 81       	ldd	r24, Y+7	; 0x07
    439e:	08 2f       	mov	r16, r24
    43a0:	11 27       	eor	r17, r17
    43a2:	07 fd       	sbrc	r16, 7
    43a4:	10 95       	com	r17
    43a6:	8b 81       	ldd	r24, Y+3	; 0x03
    43a8:	9c 81       	ldd	r25, Y+4	; 0x04
    43aa:	ad 81       	ldd	r26, Y+5	; 0x05
    43ac:	be 81       	ldd	r27, Y+6	; 0x06
    43ae:	2a e0       	ldi	r18, 0x0A	; 10
    43b0:	30 e0       	ldi	r19, 0x00	; 0
    43b2:	40 e0       	ldi	r20, 0x00	; 0
    43b4:	50 e0       	ldi	r21, 0x00	; 0
    43b6:	bc 01       	movw	r22, r24
    43b8:	cd 01       	movw	r24, r26
    43ba:	0e 94 a8 3c 	call	0x7950	; 0x7950 <__divmodsi4>
    43be:	dc 01       	movw	r26, r24
    43c0:	cb 01       	movw	r24, r22
    43c2:	f8 01       	movw	r30, r16
    43c4:	ed 52       	subi	r30, 0x2D	; 45
    43c6:	fe 4f       	sbci	r31, 0xFE	; 254
    43c8:	80 83       	st	Z, r24
		Local_s32Number /= 10;
    43ca:	8b 81       	ldd	r24, Y+3	; 0x03
    43cc:	9c 81       	ldd	r25, Y+4	; 0x04
    43ce:	ad 81       	ldd	r26, Y+5	; 0x05
    43d0:	be 81       	ldd	r27, Y+6	; 0x06
    43d2:	2a e0       	ldi	r18, 0x0A	; 10
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	40 e0       	ldi	r20, 0x00	; 0
    43d8:	50 e0       	ldi	r21, 0x00	; 0
    43da:	bc 01       	movw	r22, r24
    43dc:	cd 01       	movw	r24, r26
    43de:	0e 94 a8 3c 	call	0x7950	; 0x7950 <__divmodsi4>
    43e2:	da 01       	movw	r26, r20
    43e4:	c9 01       	movw	r24, r18
    43e6:	8b 83       	std	Y+3, r24	; 0x03
    43e8:	9c 83       	std	Y+4, r25	; 0x04
    43ea:	ad 83       	std	Y+5, r26	; 0x05
    43ec:	be 83       	std	Y+6, r27	; 0x06
		LCD_enuDisplayChar('-');
		Local_s32Number *= -1;
	}
	if((Copy_u8Num < 1.0 && Copy_u8Num > 0.0) || (Copy_u8Num > -1.0 && Copy_u8Num < 0.0)) LCD_enuDisplayChar('0');

	while (Local_s32Number > 0 && Local_enuErrorState == ES_OK)
    43ee:	8b 81       	ldd	r24, Y+3	; 0x03
    43f0:	9c 81       	ldd	r25, Y+4	; 0x04
    43f2:	ad 81       	ldd	r26, Y+5	; 0x05
    43f4:	be 81       	ldd	r27, Y+6	; 0x06
    43f6:	18 16       	cp	r1, r24
    43f8:	19 06       	cpc	r1, r25
    43fa:	1a 06       	cpc	r1, r26
    43fc:	1b 06       	cpc	r1, r27
    43fe:	9c f4       	brge	.+38     	; 0x4426 <LCD_enuWriteNumber+0x1c6>
    4400:	88 85       	ldd	r24, Y+8	; 0x08
    4402:	88 23       	and	r24, r24
    4404:	41 f2       	breq	.-112    	; 0x4396 <LCD_enuWriteNumber+0x136>
    4406:	0f c0       	rjmp	.+30     	; 0x4426 <LCD_enuWriteNumber+0x1c6>
		Local_s32Number /= 10;
	}

	while( Local_u8Iterator >= 0 && Local_enuErrorState == ES_OK)
	{
		Local_enuErrorState = LCD_enuLatch( Local_Au8Digits[Local_u8Iterator] + '0');
    4408:	8f 81       	ldd	r24, Y+7	; 0x07
    440a:	99 27       	eor	r25, r25
    440c:	87 fd       	sbrc	r24, 7
    440e:	90 95       	com	r25
    4410:	fc 01       	movw	r30, r24
    4412:	ed 52       	subi	r30, 0x2D	; 45
    4414:	fe 4f       	sbci	r31, 0xFE	; 254
    4416:	80 81       	ld	r24, Z
    4418:	80 5d       	subi	r24, 0xD0	; 208
    441a:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <LCD_enuLatch>
    441e:	88 87       	std	Y+8, r24	; 0x08
		Local_u8Iterator--;
    4420:	8f 81       	ldd	r24, Y+7	; 0x07
    4422:	81 50       	subi	r24, 0x01	; 1
    4424:	8f 83       	std	Y+7, r24	; 0x07
		Local_u8Iterator++;
		Local_Au8Digits[Local_u8Iterator] = Local_s32Number % 10;
		Local_s32Number /= 10;
	}

	while( Local_u8Iterator >= 0 && Local_enuErrorState == ES_OK)
    4426:	8f 81       	ldd	r24, Y+7	; 0x07
    4428:	88 23       	and	r24, r24
    442a:	1c f0       	brlt	.+6      	; 0x4432 <LCD_enuWriteNumber+0x1d2>
    442c:	88 85       	ldd	r24, Y+8	; 0x08
    442e:	88 23       	and	r24, r24
    4430:	59 f3       	breq	.-42     	; 0x4408 <LCD_enuWriteNumber+0x1a8>
	{
		Local_enuErrorState = LCD_enuLatch( Local_Au8Digits[Local_u8Iterator] + '0');
		Local_u8Iterator--;
	}

	Copy_u8Num -= (s32)Copy_u8Num;
    4432:	69 85       	ldd	r22, Y+9	; 0x09
    4434:	7a 85       	ldd	r23, Y+10	; 0x0a
    4436:	8b 85       	ldd	r24, Y+11	; 0x0b
    4438:	9c 85       	ldd	r25, Y+12	; 0x0c
    443a:	0e 94 41 06 	call	0xc82	; 0xc82 <__fixsfsi>
    443e:	dc 01       	movw	r26, r24
    4440:	cb 01       	movw	r24, r22
    4442:	bc 01       	movw	r22, r24
    4444:	cd 01       	movw	r24, r26
    4446:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatsisf>
    444a:	9b 01       	movw	r18, r22
    444c:	ac 01       	movw	r20, r24
    444e:	69 85       	ldd	r22, Y+9	; 0x09
    4450:	7a 85       	ldd	r23, Y+10	; 0x0a
    4452:	8b 85       	ldd	r24, Y+11	; 0x0b
    4454:	9c 85       	ldd	r25, Y+12	; 0x0c
    4456:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    445a:	dc 01       	movw	r26, r24
    445c:	cb 01       	movw	r24, r22
    445e:	89 87       	std	Y+9, r24	; 0x09
    4460:	9a 87       	std	Y+10, r25	; 0x0a
    4462:	ab 87       	std	Y+11, r26	; 0x0b
    4464:	bc 87       	std	Y+12, r27	; 0x0c
	if(Copy_u8Num != 0.0)
    4466:	69 85       	ldd	r22, Y+9	; 0x09
    4468:	7a 85       	ldd	r23, Y+10	; 0x0a
    446a:	8b 85       	ldd	r24, Y+11	; 0x0b
    446c:	9c 85       	ldd	r25, Y+12	; 0x0c
    446e:	20 e0       	ldi	r18, 0x00	; 0
    4470:	30 e0       	ldi	r19, 0x00	; 0
    4472:	40 e0       	ldi	r20, 0x00	; 0
    4474:	50 e0       	ldi	r21, 0x00	; 0
    4476:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__nesf2>
    447a:	88 23       	and	r24, r24
    447c:	09 f4       	brne	.+2      	; 0x4480 <LCD_enuWriteNumber+0x220>
    447e:	7e c0       	rjmp	.+252    	; 0x457c <LCD_enuWriteNumber+0x31c>
	{
		LCD_enuLatch('.');
    4480:	8e e2       	ldi	r24, 0x2E	; 46
    4482:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <LCD_enuLatch>
		if(Copy_u8Num < 0) Copy_u8Num *= -1;
    4486:	69 85       	ldd	r22, Y+9	; 0x09
    4488:	7a 85       	ldd	r23, Y+10	; 0x0a
    448a:	8b 85       	ldd	r24, Y+11	; 0x0b
    448c:	9c 85       	ldd	r25, Y+12	; 0x0c
    448e:	20 e0       	ldi	r18, 0x00	; 0
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	40 e0       	ldi	r20, 0x00	; 0
    4494:	50 e0       	ldi	r21, 0x00	; 0
    4496:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    449a:	88 23       	and	r24, r24
    449c:	4c f4       	brge	.+18     	; 0x44b0 <LCD_enuWriteNumber+0x250>
    449e:	89 85       	ldd	r24, Y+9	; 0x09
    44a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    44a2:	ab 85       	ldd	r26, Y+11	; 0x0b
    44a4:	bc 85       	ldd	r27, Y+12	; 0x0c
    44a6:	b0 58       	subi	r27, 0x80	; 128
    44a8:	89 87       	std	Y+9, r24	; 0x09
    44aa:	9a 87       	std	Y+10, r25	; 0x0a
    44ac:	ab 87       	std	Y+11, r26	; 0x0b
    44ae:	bc 87       	std	Y+12, r27	; 0x0c
		u16 base = 10;
    44b0:	8a e0       	ldi	r24, 0x0A	; 10
    44b2:	90 e0       	ldi	r25, 0x00	; 0
    44b4:	9a 83       	std	Y+2, r25	; 0x02
    44b6:	89 83       	std	Y+1, r24	; 0x01
    44b8:	44 c0       	rjmp	.+136    	; 0x4542 <LCD_enuWriteNumber+0x2e2>
		while (base <= 10000)
		{
			Local_u8Iterator++;
    44ba:	8f 81       	ldd	r24, Y+7	; 0x07
    44bc:	8f 5f       	subi	r24, 0xFF	; 255
    44be:	8f 83       	std	Y+7, r24	; 0x07
			Local_Au8Digits[3 - Local_u8Iterator] = ((s32)(Copy_u8Num*base))%10;
    44c0:	8f 81       	ldd	r24, Y+7	; 0x07
    44c2:	28 2f       	mov	r18, r24
    44c4:	33 27       	eor	r19, r19
    44c6:	27 fd       	sbrc	r18, 7
    44c8:	30 95       	com	r19
    44ca:	83 e0       	ldi	r24, 0x03	; 3
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	8c 01       	movw	r16, r24
    44d0:	02 1b       	sub	r16, r18
    44d2:	13 0b       	sbc	r17, r19
    44d4:	89 81       	ldd	r24, Y+1	; 0x01
    44d6:	9a 81       	ldd	r25, Y+2	; 0x02
    44d8:	cc 01       	movw	r24, r24
    44da:	a0 e0       	ldi	r26, 0x00	; 0
    44dc:	b0 e0       	ldi	r27, 0x00	; 0
    44de:	bc 01       	movw	r22, r24
    44e0:	cd 01       	movw	r24, r26
    44e2:	0e 94 95 06 	call	0xd2a	; 0xd2a <__floatunsisf>
    44e6:	dc 01       	movw	r26, r24
    44e8:	cb 01       	movw	r24, r22
    44ea:	bc 01       	movw	r22, r24
    44ec:	cd 01       	movw	r24, r26
    44ee:	29 85       	ldd	r18, Y+9	; 0x09
    44f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    44f2:	4b 85       	ldd	r20, Y+11	; 0x0b
    44f4:	5c 85       	ldd	r21, Y+12	; 0x0c
    44f6:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    44fa:	dc 01       	movw	r26, r24
    44fc:	cb 01       	movw	r24, r22
    44fe:	bc 01       	movw	r22, r24
    4500:	cd 01       	movw	r24, r26
    4502:	0e 94 41 06 	call	0xc82	; 0xc82 <__fixsfsi>
    4506:	dc 01       	movw	r26, r24
    4508:	cb 01       	movw	r24, r22
    450a:	2a e0       	ldi	r18, 0x0A	; 10
    450c:	30 e0       	ldi	r19, 0x00	; 0
    450e:	40 e0       	ldi	r20, 0x00	; 0
    4510:	50 e0       	ldi	r21, 0x00	; 0
    4512:	bc 01       	movw	r22, r24
    4514:	cd 01       	movw	r24, r26
    4516:	0e 94 a8 3c 	call	0x7950	; 0x7950 <__divmodsi4>
    451a:	dc 01       	movw	r26, r24
    451c:	cb 01       	movw	r24, r22
    451e:	f8 01       	movw	r30, r16
    4520:	ed 52       	subi	r30, 0x2D	; 45
    4522:	fe 4f       	sbci	r31, 0xFE	; 254
    4524:	80 83       	st	Z, r24
			base *= 10;
    4526:	89 81       	ldd	r24, Y+1	; 0x01
    4528:	9a 81       	ldd	r25, Y+2	; 0x02
    452a:	9c 01       	movw	r18, r24
    452c:	22 0f       	add	r18, r18
    452e:	33 1f       	adc	r19, r19
    4530:	c9 01       	movw	r24, r18
    4532:	88 0f       	add	r24, r24
    4534:	99 1f       	adc	r25, r25
    4536:	88 0f       	add	r24, r24
    4538:	99 1f       	adc	r25, r25
    453a:	82 0f       	add	r24, r18
    453c:	93 1f       	adc	r25, r19
    453e:	9a 83       	std	Y+2, r25	; 0x02
    4540:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Num != 0.0)
	{
		LCD_enuLatch('.');
		if(Copy_u8Num < 0) Copy_u8Num *= -1;
		u16 base = 10;
		while (base <= 10000)
    4542:	89 81       	ldd	r24, Y+1	; 0x01
    4544:	9a 81       	ldd	r25, Y+2	; 0x02
    4546:	27 e2       	ldi	r18, 0x27	; 39
    4548:	81 31       	cpi	r24, 0x11	; 17
    454a:	92 07       	cpc	r25, r18
    454c:	08 f4       	brcc	.+2      	; 0x4550 <LCD_enuWriteNumber+0x2f0>
    454e:	b5 cf       	rjmp	.-150    	; 0x44ba <LCD_enuWriteNumber+0x25a>
    4550:	0f c0       	rjmp	.+30     	; 0x4570 <LCD_enuWriteNumber+0x310>
			base *= 10;
		}

		while( Local_u8Iterator >= 0 && Local_enuErrorState == ES_OK)
		{
			Local_enuErrorState = LCD_enuLatch( Local_Au8Digits[Local_u8Iterator] + '0');
    4552:	8f 81       	ldd	r24, Y+7	; 0x07
    4554:	99 27       	eor	r25, r25
    4556:	87 fd       	sbrc	r24, 7
    4558:	90 95       	com	r25
    455a:	fc 01       	movw	r30, r24
    455c:	ed 52       	subi	r30, 0x2D	; 45
    455e:	fe 4f       	sbci	r31, 0xFE	; 254
    4560:	80 81       	ld	r24, Z
    4562:	80 5d       	subi	r24, 0xD0	; 208
    4564:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <LCD_enuLatch>
    4568:	88 87       	std	Y+8, r24	; 0x08
			Local_u8Iterator--;
    456a:	8f 81       	ldd	r24, Y+7	; 0x07
    456c:	81 50       	subi	r24, 0x01	; 1
    456e:	8f 83       	std	Y+7, r24	; 0x07
			Local_u8Iterator++;
			Local_Au8Digits[3 - Local_u8Iterator] = ((s32)(Copy_u8Num*base))%10;
			base *= 10;
		}

		while( Local_u8Iterator >= 0 && Local_enuErrorState == ES_OK)
    4570:	8f 81       	ldd	r24, Y+7	; 0x07
    4572:	88 23       	and	r24, r24
    4574:	1c f0       	brlt	.+6      	; 0x457c <LCD_enuWriteNumber+0x31c>
    4576:	88 85       	ldd	r24, Y+8	; 0x08
    4578:	88 23       	and	r24, r24
    457a:	59 f3       	breq	.-42     	; 0x4552 <LCD_enuWriteNumber+0x2f2>
			Local_u8Iterator--;
		}

	}

	return Local_enuErrorState;
    457c:	88 85       	ldd	r24, Y+8	; 0x08
    457e:	8f 87       	std	Y+15, r24	; 0x0f
    4580:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    4582:	2f 96       	adiw	r28, 0x0f	; 15
    4584:	0f b6       	in	r0, 0x3f	; 63
    4586:	f8 94       	cli
    4588:	de bf       	out	0x3e, r29	; 62
    458a:	0f be       	out	0x3f, r0	; 63
    458c:	cd bf       	out	0x3d, r28	; 61
    458e:	cf 91       	pop	r28
    4590:	df 91       	pop	r29
    4592:	1f 91       	pop	r17
    4594:	0f 91       	pop	r16
    4596:	08 95       	ret

00004598 <KPD_enuInit>:
#include "Keypad_priv.h"
#include "Keypad_config.h"


ES_t KPD_enuInit(void)
{
    4598:	2f 92       	push	r2
    459a:	3f 92       	push	r3
    459c:	4f 92       	push	r4
    459e:	5f 92       	push	r5
    45a0:	6f 92       	push	r6
    45a2:	7f 92       	push	r7
    45a4:	8f 92       	push	r8
    45a6:	9f 92       	push	r9
    45a8:	af 92       	push	r10
    45aa:	bf 92       	push	r11
    45ac:	cf 92       	push	r12
    45ae:	df 92       	push	r13
    45b0:	ef 92       	push	r14
    45b2:	ff 92       	push	r15
    45b4:	0f 93       	push	r16
    45b6:	1f 93       	push	r17
    45b8:	df 93       	push	r29
    45ba:	cf 93       	push	r28
    45bc:	00 d0       	rcall	.+0      	; 0x45be <KPD_enuInit+0x26>
    45be:	0f 92       	push	r0
    45c0:	cd b7       	in	r28, 0x3d	; 61
    45c2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    45c4:	81 e0       	ldi	r24, 0x01	; 1
    45c6:	8a 83       	std	Y+2, r24	; 0x02

	static u64 Local_u64Check = 0;

	/* Set Column Pins as Output */
	Local_u64Check |= (DIO_enuSetPinDirection(KPD_COLUMN0_PORT, KPD_COLUMN0_PIN, DIO_u8OUTPUT) << 0);
    45c8:	81 e0       	ldi	r24, 0x01	; 1
    45ca:	63 e0       	ldi	r22, 0x03	; 3
    45cc:	41 e0       	ldi	r20, 0x01	; 1
    45ce:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    45d2:	28 2e       	mov	r2, r24
    45d4:	33 24       	eor	r3, r3
    45d6:	44 24       	eor	r4, r4
    45d8:	55 24       	eor	r5, r5
    45da:	66 24       	eor	r6, r6
    45dc:	77 24       	eor	r7, r7
    45de:	43 01       	movw	r8, r6
    45e0:	a0 90 33 02 	lds	r10, 0x0233
    45e4:	b0 90 34 02 	lds	r11, 0x0234
    45e8:	c0 90 35 02 	lds	r12, 0x0235
    45ec:	d0 90 36 02 	lds	r13, 0x0236
    45f0:	e0 90 37 02 	lds	r14, 0x0237
    45f4:	f0 90 38 02 	lds	r15, 0x0238
    45f8:	00 91 39 02 	lds	r16, 0x0239
    45fc:	10 91 3a 02 	lds	r17, 0x023A
    4600:	22 2d       	mov	r18, r2
    4602:	2a 29       	or	r18, r10
    4604:	33 2d       	mov	r19, r3
    4606:	3b 29       	or	r19, r11
    4608:	44 2d       	mov	r20, r4
    460a:	4c 29       	or	r20, r12
    460c:	55 2d       	mov	r21, r5
    460e:	5d 29       	or	r21, r13
    4610:	66 2d       	mov	r22, r6
    4612:	6e 29       	or	r22, r14
    4614:	77 2d       	mov	r23, r7
    4616:	7f 29       	or	r23, r15
    4618:	88 2d       	mov	r24, r8
    461a:	80 2b       	or	r24, r16
    461c:	99 2d       	mov	r25, r9
    461e:	91 2b       	or	r25, r17
    4620:	20 93 33 02 	sts	0x0233, r18
    4624:	30 93 34 02 	sts	0x0234, r19
    4628:	40 93 35 02 	sts	0x0235, r20
    462c:	50 93 36 02 	sts	0x0236, r21
    4630:	60 93 37 02 	sts	0x0237, r22
    4634:	70 93 38 02 	sts	0x0238, r23
    4638:	80 93 39 02 	sts	0x0239, r24
    463c:	90 93 3a 02 	sts	0x023A, r25
	Local_u64Check |= (DIO_enuSetPinDirection(KPD_COLUMN1_PORT, KPD_COLUMN1_PIN, DIO_u8OUTPUT) << 3);
    4640:	81 e0       	ldi	r24, 0x01	; 1
    4642:	64 e0       	ldi	r22, 0x04	; 4
    4644:	41 e0       	ldi	r20, 0x01	; 1
    4646:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    464a:	88 2f       	mov	r24, r24
    464c:	90 e0       	ldi	r25, 0x00	; 0
    464e:	9c 01       	movw	r18, r24
    4650:	22 0f       	add	r18, r18
    4652:	33 1f       	adc	r19, r19
    4654:	22 0f       	add	r18, r18
    4656:	33 1f       	adc	r19, r19
    4658:	22 0f       	add	r18, r18
    465a:	33 1f       	adc	r19, r19
    465c:	c9 01       	movw	r24, r18
    465e:	99 0f       	add	r25, r25
    4660:	88 0b       	sbc	r24, r24
    4662:	98 2f       	mov	r25, r24
    4664:	19 01       	movw	r2, r18
    4666:	48 2e       	mov	r4, r24
    4668:	58 2e       	mov	r5, r24
    466a:	68 2e       	mov	r6, r24
    466c:	78 2e       	mov	r7, r24
    466e:	88 2e       	mov	r8, r24
    4670:	98 2e       	mov	r9, r24
    4672:	a0 90 33 02 	lds	r10, 0x0233
    4676:	b0 90 34 02 	lds	r11, 0x0234
    467a:	c0 90 35 02 	lds	r12, 0x0235
    467e:	d0 90 36 02 	lds	r13, 0x0236
    4682:	e0 90 37 02 	lds	r14, 0x0237
    4686:	f0 90 38 02 	lds	r15, 0x0238
    468a:	00 91 39 02 	lds	r16, 0x0239
    468e:	10 91 3a 02 	lds	r17, 0x023A
    4692:	22 2d       	mov	r18, r2
    4694:	2a 29       	or	r18, r10
    4696:	33 2d       	mov	r19, r3
    4698:	3b 29       	or	r19, r11
    469a:	44 2d       	mov	r20, r4
    469c:	4c 29       	or	r20, r12
    469e:	55 2d       	mov	r21, r5
    46a0:	5d 29       	or	r21, r13
    46a2:	66 2d       	mov	r22, r6
    46a4:	6e 29       	or	r22, r14
    46a6:	77 2d       	mov	r23, r7
    46a8:	7f 29       	or	r23, r15
    46aa:	88 2d       	mov	r24, r8
    46ac:	80 2b       	or	r24, r16
    46ae:	99 2d       	mov	r25, r9
    46b0:	91 2b       	or	r25, r17
    46b2:	20 93 33 02 	sts	0x0233, r18
    46b6:	30 93 34 02 	sts	0x0234, r19
    46ba:	40 93 35 02 	sts	0x0235, r20
    46be:	50 93 36 02 	sts	0x0236, r21
    46c2:	60 93 37 02 	sts	0x0237, r22
    46c6:	70 93 38 02 	sts	0x0238, r23
    46ca:	80 93 39 02 	sts	0x0239, r24
    46ce:	90 93 3a 02 	sts	0x023A, r25
	Local_u64Check |= (DIO_enuSetPinDirection(KPD_COLUMN2_PORT, KPD_COLUMN2_PIN, DIO_u8OUTPUT) << 6);
    46d2:	81 e0       	ldi	r24, 0x01	; 1
    46d4:	65 e0       	ldi	r22, 0x05	; 5
    46d6:	41 e0       	ldi	r20, 0x01	; 1
    46d8:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    46dc:	88 2f       	mov	r24, r24
    46de:	90 e0       	ldi	r25, 0x00	; 0
    46e0:	9c 01       	movw	r18, r24
    46e2:	00 24       	eor	r0, r0
    46e4:	36 95       	lsr	r19
    46e6:	27 95       	ror	r18
    46e8:	07 94       	ror	r0
    46ea:	36 95       	lsr	r19
    46ec:	27 95       	ror	r18
    46ee:	07 94       	ror	r0
    46f0:	32 2f       	mov	r19, r18
    46f2:	20 2d       	mov	r18, r0
    46f4:	c9 01       	movw	r24, r18
    46f6:	99 0f       	add	r25, r25
    46f8:	88 0b       	sbc	r24, r24
    46fa:	98 2f       	mov	r25, r24
    46fc:	19 01       	movw	r2, r18
    46fe:	48 2e       	mov	r4, r24
    4700:	58 2e       	mov	r5, r24
    4702:	68 2e       	mov	r6, r24
    4704:	78 2e       	mov	r7, r24
    4706:	88 2e       	mov	r8, r24
    4708:	98 2e       	mov	r9, r24
    470a:	a0 90 33 02 	lds	r10, 0x0233
    470e:	b0 90 34 02 	lds	r11, 0x0234
    4712:	c0 90 35 02 	lds	r12, 0x0235
    4716:	d0 90 36 02 	lds	r13, 0x0236
    471a:	e0 90 37 02 	lds	r14, 0x0237
    471e:	f0 90 38 02 	lds	r15, 0x0238
    4722:	00 91 39 02 	lds	r16, 0x0239
    4726:	10 91 3a 02 	lds	r17, 0x023A
    472a:	22 2d       	mov	r18, r2
    472c:	2a 29       	or	r18, r10
    472e:	33 2d       	mov	r19, r3
    4730:	3b 29       	or	r19, r11
    4732:	44 2d       	mov	r20, r4
    4734:	4c 29       	or	r20, r12
    4736:	55 2d       	mov	r21, r5
    4738:	5d 29       	or	r21, r13
    473a:	66 2d       	mov	r22, r6
    473c:	6e 29       	or	r22, r14
    473e:	77 2d       	mov	r23, r7
    4740:	7f 29       	or	r23, r15
    4742:	88 2d       	mov	r24, r8
    4744:	80 2b       	or	r24, r16
    4746:	99 2d       	mov	r25, r9
    4748:	91 2b       	or	r25, r17
    474a:	20 93 33 02 	sts	0x0233, r18
    474e:	30 93 34 02 	sts	0x0234, r19
    4752:	40 93 35 02 	sts	0x0235, r20
    4756:	50 93 36 02 	sts	0x0236, r21
    475a:	60 93 37 02 	sts	0x0237, r22
    475e:	70 93 38 02 	sts	0x0238, r23
    4762:	80 93 39 02 	sts	0x0239, r24
    4766:	90 93 3a 02 	sts	0x023A, r25
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_COLUMN3_PORT, KPD_COLUMN3_PIN, DIO_u8OUTPUT) << 9);
    476a:	81 e0       	ldi	r24, 0x01	; 1
    476c:	66 e0       	ldi	r22, 0x06	; 6
    476e:	41 e0       	ldi	r20, 0x01	; 1
    4770:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    4774:	a8 2e       	mov	r10, r24
    4776:	bb 24       	eor	r11, r11
    4778:	cc 24       	eor	r12, r12
    477a:	dd 24       	eor	r13, r13
    477c:	ee 24       	eor	r14, r14
    477e:	ff 24       	eor	r15, r15
    4780:	87 01       	movw	r16, r14
    4782:	2a 2d       	mov	r18, r10
    4784:	3b 2d       	mov	r19, r11
    4786:	4c 2d       	mov	r20, r12
    4788:	5d 2d       	mov	r21, r13
    478a:	6e 2d       	mov	r22, r14
    478c:	7f 2d       	mov	r23, r15
    478e:	80 2f       	mov	r24, r16
    4790:	91 2f       	mov	r25, r17
    4792:	09 e0       	ldi	r16, 0x09	; 9
    4794:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    4798:	a2 2e       	mov	r10, r18
    479a:	b3 2e       	mov	r11, r19
    479c:	c4 2e       	mov	r12, r20
    479e:	d5 2e       	mov	r13, r21
    47a0:	e6 2e       	mov	r14, r22
    47a2:	f7 2e       	mov	r15, r23
    47a4:	08 2f       	mov	r16, r24
    47a6:	19 2f       	mov	r17, r25
    47a8:	2a 2c       	mov	r2, r10
    47aa:	3b 2c       	mov	r3, r11
    47ac:	4c 2c       	mov	r4, r12
    47ae:	5d 2c       	mov	r5, r13
    47b0:	6e 2c       	mov	r6, r14
    47b2:	7f 2c       	mov	r7, r15
    47b4:	80 2e       	mov	r8, r16
    47b6:	91 2e       	mov	r9, r17
    47b8:	a0 90 33 02 	lds	r10, 0x0233
    47bc:	b0 90 34 02 	lds	r11, 0x0234
    47c0:	c0 90 35 02 	lds	r12, 0x0235
    47c4:	d0 90 36 02 	lds	r13, 0x0236
    47c8:	e0 90 37 02 	lds	r14, 0x0237
    47cc:	f0 90 38 02 	lds	r15, 0x0238
    47d0:	00 91 39 02 	lds	r16, 0x0239
    47d4:	10 91 3a 02 	lds	r17, 0x023A
    47d8:	22 2d       	mov	r18, r2
    47da:	2a 29       	or	r18, r10
    47dc:	33 2d       	mov	r19, r3
    47de:	3b 29       	or	r19, r11
    47e0:	44 2d       	mov	r20, r4
    47e2:	4c 29       	or	r20, r12
    47e4:	55 2d       	mov	r21, r5
    47e6:	5d 29       	or	r21, r13
    47e8:	66 2d       	mov	r22, r6
    47ea:	6e 29       	or	r22, r14
    47ec:	77 2d       	mov	r23, r7
    47ee:	7f 29       	or	r23, r15
    47f0:	88 2d       	mov	r24, r8
    47f2:	80 2b       	or	r24, r16
    47f4:	99 2d       	mov	r25, r9
    47f6:	91 2b       	or	r25, r17
    47f8:	20 93 33 02 	sts	0x0233, r18
    47fc:	30 93 34 02 	sts	0x0234, r19
    4800:	40 93 35 02 	sts	0x0235, r20
    4804:	50 93 36 02 	sts	0x0236, r21
    4808:	60 93 37 02 	sts	0x0237, r22
    480c:	70 93 38 02 	sts	0x0238, r23
    4810:	80 93 39 02 	sts	0x0239, r24
    4814:	90 93 3a 02 	sts	0x023A, r25
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_COLUMN4_PORT, KPD_COLUMN4_PIN, DIO_u8OUTPUT) << 12);
    4818:	81 e0       	ldi	r24, 0x01	; 1
    481a:	67 e0       	ldi	r22, 0x07	; 7
    481c:	41 e0       	ldi	r20, 0x01	; 1
    481e:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    4822:	a8 2e       	mov	r10, r24
    4824:	bb 24       	eor	r11, r11
    4826:	cc 24       	eor	r12, r12
    4828:	dd 24       	eor	r13, r13
    482a:	ee 24       	eor	r14, r14
    482c:	ff 24       	eor	r15, r15
    482e:	87 01       	movw	r16, r14
    4830:	2a 2d       	mov	r18, r10
    4832:	3b 2d       	mov	r19, r11
    4834:	4c 2d       	mov	r20, r12
    4836:	5d 2d       	mov	r21, r13
    4838:	6e 2d       	mov	r22, r14
    483a:	7f 2d       	mov	r23, r15
    483c:	80 2f       	mov	r24, r16
    483e:	91 2f       	mov	r25, r17
    4840:	0c e0       	ldi	r16, 0x0C	; 12
    4842:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    4846:	a2 2e       	mov	r10, r18
    4848:	b3 2e       	mov	r11, r19
    484a:	c4 2e       	mov	r12, r20
    484c:	d5 2e       	mov	r13, r21
    484e:	e6 2e       	mov	r14, r22
    4850:	f7 2e       	mov	r15, r23
    4852:	08 2f       	mov	r16, r24
    4854:	19 2f       	mov	r17, r25
    4856:	2a 2c       	mov	r2, r10
    4858:	3b 2c       	mov	r3, r11
    485a:	4c 2c       	mov	r4, r12
    485c:	5d 2c       	mov	r5, r13
    485e:	6e 2c       	mov	r6, r14
    4860:	7f 2c       	mov	r7, r15
    4862:	80 2e       	mov	r8, r16
    4864:	91 2e       	mov	r9, r17
    4866:	a0 90 33 02 	lds	r10, 0x0233
    486a:	b0 90 34 02 	lds	r11, 0x0234
    486e:	c0 90 35 02 	lds	r12, 0x0235
    4872:	d0 90 36 02 	lds	r13, 0x0236
    4876:	e0 90 37 02 	lds	r14, 0x0237
    487a:	f0 90 38 02 	lds	r15, 0x0238
    487e:	00 91 39 02 	lds	r16, 0x0239
    4882:	10 91 3a 02 	lds	r17, 0x023A
    4886:	22 2d       	mov	r18, r2
    4888:	2a 29       	or	r18, r10
    488a:	33 2d       	mov	r19, r3
    488c:	3b 29       	or	r19, r11
    488e:	44 2d       	mov	r20, r4
    4890:	4c 29       	or	r20, r12
    4892:	55 2d       	mov	r21, r5
    4894:	5d 29       	or	r21, r13
    4896:	66 2d       	mov	r22, r6
    4898:	6e 29       	or	r22, r14
    489a:	77 2d       	mov	r23, r7
    489c:	7f 29       	or	r23, r15
    489e:	88 2d       	mov	r24, r8
    48a0:	80 2b       	or	r24, r16
    48a2:	99 2d       	mov	r25, r9
    48a4:	91 2b       	or	r25, r17
    48a6:	20 93 33 02 	sts	0x0233, r18
    48aa:	30 93 34 02 	sts	0x0234, r19
    48ae:	40 93 35 02 	sts	0x0235, r20
    48b2:	50 93 36 02 	sts	0x0236, r21
    48b6:	60 93 37 02 	sts	0x0237, r22
    48ba:	70 93 38 02 	sts	0x0238, r23
    48be:	80 93 39 02 	sts	0x0239, r24
    48c2:	90 93 3a 02 	sts	0x023A, r25
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_COLUMN5_PORT, KPD_COLUMN5_PIN, DIO_u8OUTPUT) << 15);
    48c6:	82 e0       	ldi	r24, 0x02	; 2
    48c8:	60 e0       	ldi	r22, 0x00	; 0
    48ca:	41 e0       	ldi	r20, 0x01	; 1
    48cc:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    48d0:	a8 2e       	mov	r10, r24
    48d2:	bb 24       	eor	r11, r11
    48d4:	cc 24       	eor	r12, r12
    48d6:	dd 24       	eor	r13, r13
    48d8:	ee 24       	eor	r14, r14
    48da:	ff 24       	eor	r15, r15
    48dc:	87 01       	movw	r16, r14
    48de:	2a 2d       	mov	r18, r10
    48e0:	3b 2d       	mov	r19, r11
    48e2:	4c 2d       	mov	r20, r12
    48e4:	5d 2d       	mov	r21, r13
    48e6:	6e 2d       	mov	r22, r14
    48e8:	7f 2d       	mov	r23, r15
    48ea:	80 2f       	mov	r24, r16
    48ec:	91 2f       	mov	r25, r17
    48ee:	0f e0       	ldi	r16, 0x0F	; 15
    48f0:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    48f4:	a2 2e       	mov	r10, r18
    48f6:	b3 2e       	mov	r11, r19
    48f8:	c4 2e       	mov	r12, r20
    48fa:	d5 2e       	mov	r13, r21
    48fc:	e6 2e       	mov	r14, r22
    48fe:	f7 2e       	mov	r15, r23
    4900:	08 2f       	mov	r16, r24
    4902:	19 2f       	mov	r17, r25
    4904:	2a 2c       	mov	r2, r10
    4906:	3b 2c       	mov	r3, r11
    4908:	4c 2c       	mov	r4, r12
    490a:	5d 2c       	mov	r5, r13
    490c:	6e 2c       	mov	r6, r14
    490e:	7f 2c       	mov	r7, r15
    4910:	80 2e       	mov	r8, r16
    4912:	91 2e       	mov	r9, r17
    4914:	a0 90 33 02 	lds	r10, 0x0233
    4918:	b0 90 34 02 	lds	r11, 0x0234
    491c:	c0 90 35 02 	lds	r12, 0x0235
    4920:	d0 90 36 02 	lds	r13, 0x0236
    4924:	e0 90 37 02 	lds	r14, 0x0237
    4928:	f0 90 38 02 	lds	r15, 0x0238
    492c:	00 91 39 02 	lds	r16, 0x0239
    4930:	10 91 3a 02 	lds	r17, 0x023A
    4934:	22 2d       	mov	r18, r2
    4936:	2a 29       	or	r18, r10
    4938:	33 2d       	mov	r19, r3
    493a:	3b 29       	or	r19, r11
    493c:	44 2d       	mov	r20, r4
    493e:	4c 29       	or	r20, r12
    4940:	55 2d       	mov	r21, r5
    4942:	5d 29       	or	r21, r13
    4944:	66 2d       	mov	r22, r6
    4946:	6e 29       	or	r22, r14
    4948:	77 2d       	mov	r23, r7
    494a:	7f 29       	or	r23, r15
    494c:	88 2d       	mov	r24, r8
    494e:	80 2b       	or	r24, r16
    4950:	99 2d       	mov	r25, r9
    4952:	91 2b       	or	r25, r17
    4954:	20 93 33 02 	sts	0x0233, r18
    4958:	30 93 34 02 	sts	0x0234, r19
    495c:	40 93 35 02 	sts	0x0235, r20
    4960:	50 93 36 02 	sts	0x0236, r21
    4964:	60 93 37 02 	sts	0x0237, r22
    4968:	70 93 38 02 	sts	0x0238, r23
    496c:	80 93 39 02 	sts	0x0239, r24
    4970:	90 93 3a 02 	sts	0x023A, r25
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_COLUMN6_PORT, KPD_COLUMN6_PIN, DIO_u8OUTPUT) << 18);
    4974:	82 e0       	ldi	r24, 0x02	; 2
    4976:	61 e0       	ldi	r22, 0x01	; 1
    4978:	41 e0       	ldi	r20, 0x01	; 1
    497a:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    497e:	a8 2e       	mov	r10, r24
    4980:	bb 24       	eor	r11, r11
    4982:	cc 24       	eor	r12, r12
    4984:	dd 24       	eor	r13, r13
    4986:	ee 24       	eor	r14, r14
    4988:	ff 24       	eor	r15, r15
    498a:	87 01       	movw	r16, r14
    498c:	2a 2d       	mov	r18, r10
    498e:	3b 2d       	mov	r19, r11
    4990:	4c 2d       	mov	r20, r12
    4992:	5d 2d       	mov	r21, r13
    4994:	6e 2d       	mov	r22, r14
    4996:	7f 2d       	mov	r23, r15
    4998:	80 2f       	mov	r24, r16
    499a:	91 2f       	mov	r25, r17
    499c:	02 e1       	ldi	r16, 0x12	; 18
    499e:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    49a2:	a2 2e       	mov	r10, r18
    49a4:	b3 2e       	mov	r11, r19
    49a6:	c4 2e       	mov	r12, r20
    49a8:	d5 2e       	mov	r13, r21
    49aa:	e6 2e       	mov	r14, r22
    49ac:	f7 2e       	mov	r15, r23
    49ae:	08 2f       	mov	r16, r24
    49b0:	19 2f       	mov	r17, r25
    49b2:	2a 2c       	mov	r2, r10
    49b4:	3b 2c       	mov	r3, r11
    49b6:	4c 2c       	mov	r4, r12
    49b8:	5d 2c       	mov	r5, r13
    49ba:	6e 2c       	mov	r6, r14
    49bc:	7f 2c       	mov	r7, r15
    49be:	80 2e       	mov	r8, r16
    49c0:	91 2e       	mov	r9, r17
    49c2:	a0 90 33 02 	lds	r10, 0x0233
    49c6:	b0 90 34 02 	lds	r11, 0x0234
    49ca:	c0 90 35 02 	lds	r12, 0x0235
    49ce:	d0 90 36 02 	lds	r13, 0x0236
    49d2:	e0 90 37 02 	lds	r14, 0x0237
    49d6:	f0 90 38 02 	lds	r15, 0x0238
    49da:	00 91 39 02 	lds	r16, 0x0239
    49de:	10 91 3a 02 	lds	r17, 0x023A
    49e2:	22 2d       	mov	r18, r2
    49e4:	2a 29       	or	r18, r10
    49e6:	33 2d       	mov	r19, r3
    49e8:	3b 29       	or	r19, r11
    49ea:	44 2d       	mov	r20, r4
    49ec:	4c 29       	or	r20, r12
    49ee:	55 2d       	mov	r21, r5
    49f0:	5d 29       	or	r21, r13
    49f2:	66 2d       	mov	r22, r6
    49f4:	6e 29       	or	r22, r14
    49f6:	77 2d       	mov	r23, r7
    49f8:	7f 29       	or	r23, r15
    49fa:	88 2d       	mov	r24, r8
    49fc:	80 2b       	or	r24, r16
    49fe:	99 2d       	mov	r25, r9
    4a00:	91 2b       	or	r25, r17
    4a02:	20 93 33 02 	sts	0x0233, r18
    4a06:	30 93 34 02 	sts	0x0234, r19
    4a0a:	40 93 35 02 	sts	0x0235, r20
    4a0e:	50 93 36 02 	sts	0x0236, r21
    4a12:	60 93 37 02 	sts	0x0237, r22
    4a16:	70 93 38 02 	sts	0x0238, r23
    4a1a:	80 93 39 02 	sts	0x0239, r24
    4a1e:	90 93 3a 02 	sts	0x023A, r25
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_COLUMN7_PORT, KPD_COLUMN7_PIN, DIO_u8OUTPUT) << 21);
    4a22:	82 e0       	ldi	r24, 0x02	; 2
    4a24:	62 e0       	ldi	r22, 0x02	; 2
    4a26:	41 e0       	ldi	r20, 0x01	; 1
    4a28:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    4a2c:	a8 2e       	mov	r10, r24
    4a2e:	bb 24       	eor	r11, r11
    4a30:	cc 24       	eor	r12, r12
    4a32:	dd 24       	eor	r13, r13
    4a34:	ee 24       	eor	r14, r14
    4a36:	ff 24       	eor	r15, r15
    4a38:	87 01       	movw	r16, r14
    4a3a:	2a 2d       	mov	r18, r10
    4a3c:	3b 2d       	mov	r19, r11
    4a3e:	4c 2d       	mov	r20, r12
    4a40:	5d 2d       	mov	r21, r13
    4a42:	6e 2d       	mov	r22, r14
    4a44:	7f 2d       	mov	r23, r15
    4a46:	80 2f       	mov	r24, r16
    4a48:	91 2f       	mov	r25, r17
    4a4a:	05 e1       	ldi	r16, 0x15	; 21
    4a4c:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    4a50:	a2 2e       	mov	r10, r18
    4a52:	b3 2e       	mov	r11, r19
    4a54:	c4 2e       	mov	r12, r20
    4a56:	d5 2e       	mov	r13, r21
    4a58:	e6 2e       	mov	r14, r22
    4a5a:	f7 2e       	mov	r15, r23
    4a5c:	08 2f       	mov	r16, r24
    4a5e:	19 2f       	mov	r17, r25
    4a60:	2a 2c       	mov	r2, r10
    4a62:	3b 2c       	mov	r3, r11
    4a64:	4c 2c       	mov	r4, r12
    4a66:	5d 2c       	mov	r5, r13
    4a68:	6e 2c       	mov	r6, r14
    4a6a:	7f 2c       	mov	r7, r15
    4a6c:	80 2e       	mov	r8, r16
    4a6e:	91 2e       	mov	r9, r17
    4a70:	a0 90 33 02 	lds	r10, 0x0233
    4a74:	b0 90 34 02 	lds	r11, 0x0234
    4a78:	c0 90 35 02 	lds	r12, 0x0235
    4a7c:	d0 90 36 02 	lds	r13, 0x0236
    4a80:	e0 90 37 02 	lds	r14, 0x0237
    4a84:	f0 90 38 02 	lds	r15, 0x0238
    4a88:	00 91 39 02 	lds	r16, 0x0239
    4a8c:	10 91 3a 02 	lds	r17, 0x023A
    4a90:	22 2d       	mov	r18, r2
    4a92:	2a 29       	or	r18, r10
    4a94:	33 2d       	mov	r19, r3
    4a96:	3b 29       	or	r19, r11
    4a98:	44 2d       	mov	r20, r4
    4a9a:	4c 29       	or	r20, r12
    4a9c:	55 2d       	mov	r21, r5
    4a9e:	5d 29       	or	r21, r13
    4aa0:	66 2d       	mov	r22, r6
    4aa2:	6e 29       	or	r22, r14
    4aa4:	77 2d       	mov	r23, r7
    4aa6:	7f 29       	or	r23, r15
    4aa8:	88 2d       	mov	r24, r8
    4aaa:	80 2b       	or	r24, r16
    4aac:	99 2d       	mov	r25, r9
    4aae:	91 2b       	or	r25, r17
    4ab0:	20 93 33 02 	sts	0x0233, r18
    4ab4:	30 93 34 02 	sts	0x0234, r19
    4ab8:	40 93 35 02 	sts	0x0235, r20
    4abc:	50 93 36 02 	sts	0x0236, r21
    4ac0:	60 93 37 02 	sts	0x0237, r22
    4ac4:	70 93 38 02 	sts	0x0238, r23
    4ac8:	80 93 39 02 	sts	0x0239, r24
    4acc:	90 93 3a 02 	sts	0x023A, r25
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_COLUMN8_PORT, KPD_COLUMN8_PIN, DIO_u8OUTPUT) << 24);
    4ad0:	82 e0       	ldi	r24, 0x02	; 2
    4ad2:	63 e0       	ldi	r22, 0x03	; 3
    4ad4:	41 e0       	ldi	r20, 0x01	; 1
    4ad6:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    4ada:	a8 2e       	mov	r10, r24
    4adc:	bb 24       	eor	r11, r11
    4ade:	cc 24       	eor	r12, r12
    4ae0:	dd 24       	eor	r13, r13
    4ae2:	ee 24       	eor	r14, r14
    4ae4:	ff 24       	eor	r15, r15
    4ae6:	87 01       	movw	r16, r14
    4ae8:	2a 2d       	mov	r18, r10
    4aea:	3b 2d       	mov	r19, r11
    4aec:	4c 2d       	mov	r20, r12
    4aee:	5d 2d       	mov	r21, r13
    4af0:	6e 2d       	mov	r22, r14
    4af2:	7f 2d       	mov	r23, r15
    4af4:	80 2f       	mov	r24, r16
    4af6:	91 2f       	mov	r25, r17
    4af8:	08 e1       	ldi	r16, 0x18	; 24
    4afa:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    4afe:	a2 2e       	mov	r10, r18
    4b00:	b3 2e       	mov	r11, r19
    4b02:	c4 2e       	mov	r12, r20
    4b04:	d5 2e       	mov	r13, r21
    4b06:	e6 2e       	mov	r14, r22
    4b08:	f7 2e       	mov	r15, r23
    4b0a:	08 2f       	mov	r16, r24
    4b0c:	19 2f       	mov	r17, r25
    4b0e:	2a 2c       	mov	r2, r10
    4b10:	3b 2c       	mov	r3, r11
    4b12:	4c 2c       	mov	r4, r12
    4b14:	5d 2c       	mov	r5, r13
    4b16:	6e 2c       	mov	r6, r14
    4b18:	7f 2c       	mov	r7, r15
    4b1a:	80 2e       	mov	r8, r16
    4b1c:	91 2e       	mov	r9, r17
    4b1e:	a0 90 33 02 	lds	r10, 0x0233
    4b22:	b0 90 34 02 	lds	r11, 0x0234
    4b26:	c0 90 35 02 	lds	r12, 0x0235
    4b2a:	d0 90 36 02 	lds	r13, 0x0236
    4b2e:	e0 90 37 02 	lds	r14, 0x0237
    4b32:	f0 90 38 02 	lds	r15, 0x0238
    4b36:	00 91 39 02 	lds	r16, 0x0239
    4b3a:	10 91 3a 02 	lds	r17, 0x023A
    4b3e:	22 2d       	mov	r18, r2
    4b40:	2a 29       	or	r18, r10
    4b42:	33 2d       	mov	r19, r3
    4b44:	3b 29       	or	r19, r11
    4b46:	44 2d       	mov	r20, r4
    4b48:	4c 29       	or	r20, r12
    4b4a:	55 2d       	mov	r21, r5
    4b4c:	5d 29       	or	r21, r13
    4b4e:	66 2d       	mov	r22, r6
    4b50:	6e 29       	or	r22, r14
    4b52:	77 2d       	mov	r23, r7
    4b54:	7f 29       	or	r23, r15
    4b56:	88 2d       	mov	r24, r8
    4b58:	80 2b       	or	r24, r16
    4b5a:	99 2d       	mov	r25, r9
    4b5c:	91 2b       	or	r25, r17
    4b5e:	20 93 33 02 	sts	0x0233, r18
    4b62:	30 93 34 02 	sts	0x0234, r19
    4b66:	40 93 35 02 	sts	0x0235, r20
    4b6a:	50 93 36 02 	sts	0x0236, r21
    4b6e:	60 93 37 02 	sts	0x0237, r22
    4b72:	70 93 38 02 	sts	0x0238, r23
    4b76:	80 93 39 02 	sts	0x0239, r24
    4b7a:	90 93 3a 02 	sts	0x023A, r25
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_COLUMN9_PORT, KPD_COLUMN9_PIN, DIO_u8OUTPUT) << 27);
    4b7e:	82 e0       	ldi	r24, 0x02	; 2
    4b80:	64 e0       	ldi	r22, 0x04	; 4
    4b82:	41 e0       	ldi	r20, 0x01	; 1
    4b84:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    4b88:	a8 2e       	mov	r10, r24
    4b8a:	bb 24       	eor	r11, r11
    4b8c:	cc 24       	eor	r12, r12
    4b8e:	dd 24       	eor	r13, r13
    4b90:	ee 24       	eor	r14, r14
    4b92:	ff 24       	eor	r15, r15
    4b94:	87 01       	movw	r16, r14
    4b96:	2a 2d       	mov	r18, r10
    4b98:	3b 2d       	mov	r19, r11
    4b9a:	4c 2d       	mov	r20, r12
    4b9c:	5d 2d       	mov	r21, r13
    4b9e:	6e 2d       	mov	r22, r14
    4ba0:	7f 2d       	mov	r23, r15
    4ba2:	80 2f       	mov	r24, r16
    4ba4:	91 2f       	mov	r25, r17
    4ba6:	0b e1       	ldi	r16, 0x1B	; 27
    4ba8:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    4bac:	a2 2e       	mov	r10, r18
    4bae:	b3 2e       	mov	r11, r19
    4bb0:	c4 2e       	mov	r12, r20
    4bb2:	d5 2e       	mov	r13, r21
    4bb4:	e6 2e       	mov	r14, r22
    4bb6:	f7 2e       	mov	r15, r23
    4bb8:	08 2f       	mov	r16, r24
    4bba:	19 2f       	mov	r17, r25
    4bbc:	2a 2c       	mov	r2, r10
    4bbe:	3b 2c       	mov	r3, r11
    4bc0:	4c 2c       	mov	r4, r12
    4bc2:	5d 2c       	mov	r5, r13
    4bc4:	6e 2c       	mov	r6, r14
    4bc6:	7f 2c       	mov	r7, r15
    4bc8:	80 2e       	mov	r8, r16
    4bca:	91 2e       	mov	r9, r17
    4bcc:	a0 90 33 02 	lds	r10, 0x0233
    4bd0:	b0 90 34 02 	lds	r11, 0x0234
    4bd4:	c0 90 35 02 	lds	r12, 0x0235
    4bd8:	d0 90 36 02 	lds	r13, 0x0236
    4bdc:	e0 90 37 02 	lds	r14, 0x0237
    4be0:	f0 90 38 02 	lds	r15, 0x0238
    4be4:	00 91 39 02 	lds	r16, 0x0239
    4be8:	10 91 3a 02 	lds	r17, 0x023A
    4bec:	22 2d       	mov	r18, r2
    4bee:	2a 29       	or	r18, r10
    4bf0:	33 2d       	mov	r19, r3
    4bf2:	3b 29       	or	r19, r11
    4bf4:	44 2d       	mov	r20, r4
    4bf6:	4c 29       	or	r20, r12
    4bf8:	55 2d       	mov	r21, r5
    4bfa:	5d 29       	or	r21, r13
    4bfc:	66 2d       	mov	r22, r6
    4bfe:	6e 29       	or	r22, r14
    4c00:	77 2d       	mov	r23, r7
    4c02:	7f 29       	or	r23, r15
    4c04:	88 2d       	mov	r24, r8
    4c06:	80 2b       	or	r24, r16
    4c08:	99 2d       	mov	r25, r9
    4c0a:	91 2b       	or	r25, r17
    4c0c:	20 93 33 02 	sts	0x0233, r18
    4c10:	30 93 34 02 	sts	0x0234, r19
    4c14:	40 93 35 02 	sts	0x0235, r20
    4c18:	50 93 36 02 	sts	0x0236, r21
    4c1c:	60 93 37 02 	sts	0x0237, r22
    4c20:	70 93 38 02 	sts	0x0238, r23
    4c24:	80 93 39 02 	sts	0x0239, r24
    4c28:	90 93 3a 02 	sts	0x023A, r25

	/* Set Column Pins Value as High */
	DIO_enuSetPinValue(KPD_COLUMN0_PORT, KPD_COLUMN0_PIN, DIO_u8HIGH);
    4c2c:	81 e0       	ldi	r24, 0x01	; 1
    4c2e:	63 e0       	ldi	r22, 0x03	; 3
    4c30:	41 e0       	ldi	r20, 0x01	; 1
    4c32:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_COLUMN1_PORT, KPD_COLUMN1_PIN, DIO_u8HIGH);
    4c36:	81 e0       	ldi	r24, 0x01	; 1
    4c38:	64 e0       	ldi	r22, 0x04	; 4
    4c3a:	41 e0       	ldi	r20, 0x01	; 1
    4c3c:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_COLUMN2_PORT, KPD_COLUMN2_PIN, DIO_u8HIGH);
    4c40:	81 e0       	ldi	r24, 0x01	; 1
    4c42:	65 e0       	ldi	r22, 0x05	; 5
    4c44:	41 e0       	ldi	r20, 0x01	; 1
    4c46:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_COLUMN3_PORT, KPD_COLUMN3_PIN, DIO_u8HIGH);
    4c4a:	81 e0       	ldi	r24, 0x01	; 1
    4c4c:	66 e0       	ldi	r22, 0x06	; 6
    4c4e:	41 e0       	ldi	r20, 0x01	; 1
    4c50:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_COLUMN4_PORT, KPD_COLUMN4_PIN, DIO_u8HIGH);
    4c54:	81 e0       	ldi	r24, 0x01	; 1
    4c56:	67 e0       	ldi	r22, 0x07	; 7
    4c58:	41 e0       	ldi	r20, 0x01	; 1
    4c5a:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_COLUMN5_PORT, KPD_COLUMN5_PIN, DIO_u8HIGH);
    4c5e:	82 e0       	ldi	r24, 0x02	; 2
    4c60:	60 e0       	ldi	r22, 0x00	; 0
    4c62:	41 e0       	ldi	r20, 0x01	; 1
    4c64:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_COLUMN6_PORT, KPD_COLUMN6_PIN, DIO_u8HIGH);
    4c68:	82 e0       	ldi	r24, 0x02	; 2
    4c6a:	61 e0       	ldi	r22, 0x01	; 1
    4c6c:	41 e0       	ldi	r20, 0x01	; 1
    4c6e:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_COLUMN7_PORT, KPD_COLUMN7_PIN, DIO_u8HIGH);
    4c72:	82 e0       	ldi	r24, 0x02	; 2
    4c74:	62 e0       	ldi	r22, 0x02	; 2
    4c76:	41 e0       	ldi	r20, 0x01	; 1
    4c78:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_COLUMN8_PORT, KPD_COLUMN8_PIN, DIO_u8HIGH);
    4c7c:	82 e0       	ldi	r24, 0x02	; 2
    4c7e:	63 e0       	ldi	r22, 0x03	; 3
    4c80:	41 e0       	ldi	r20, 0x01	; 1
    4c82:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_COLUMN9_PORT, KPD_COLUMN9_PIN, DIO_u8HIGH);
    4c86:	82 e0       	ldi	r24, 0x02	; 2
    4c88:	64 e0       	ldi	r22, 0x04	; 4
    4c8a:	41 e0       	ldi	r20, 0x01	; 1
    4c8c:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>


	/* Set Row Pins as Input */

	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_ROW0_PORT, KPD_ROW0_PIN, DIO_u8INPUT) << 30);
    4c90:	80 e0       	ldi	r24, 0x00	; 0
    4c92:	67 e0       	ldi	r22, 0x07	; 7
    4c94:	40 e0       	ldi	r20, 0x00	; 0
    4c96:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    4c9a:	a8 2e       	mov	r10, r24
    4c9c:	bb 24       	eor	r11, r11
    4c9e:	cc 24       	eor	r12, r12
    4ca0:	dd 24       	eor	r13, r13
    4ca2:	ee 24       	eor	r14, r14
    4ca4:	ff 24       	eor	r15, r15
    4ca6:	87 01       	movw	r16, r14
    4ca8:	2a 2d       	mov	r18, r10
    4caa:	3b 2d       	mov	r19, r11
    4cac:	4c 2d       	mov	r20, r12
    4cae:	5d 2d       	mov	r21, r13
    4cb0:	6e 2d       	mov	r22, r14
    4cb2:	7f 2d       	mov	r23, r15
    4cb4:	80 2f       	mov	r24, r16
    4cb6:	91 2f       	mov	r25, r17
    4cb8:	0e e1       	ldi	r16, 0x1E	; 30
    4cba:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    4cbe:	a2 2e       	mov	r10, r18
    4cc0:	b3 2e       	mov	r11, r19
    4cc2:	c4 2e       	mov	r12, r20
    4cc4:	d5 2e       	mov	r13, r21
    4cc6:	e6 2e       	mov	r14, r22
    4cc8:	f7 2e       	mov	r15, r23
    4cca:	08 2f       	mov	r16, r24
    4ccc:	19 2f       	mov	r17, r25
    4cce:	2a 2c       	mov	r2, r10
    4cd0:	3b 2c       	mov	r3, r11
    4cd2:	4c 2c       	mov	r4, r12
    4cd4:	5d 2c       	mov	r5, r13
    4cd6:	6e 2c       	mov	r6, r14
    4cd8:	7f 2c       	mov	r7, r15
    4cda:	80 2e       	mov	r8, r16
    4cdc:	91 2e       	mov	r9, r17
    4cde:	a0 90 33 02 	lds	r10, 0x0233
    4ce2:	b0 90 34 02 	lds	r11, 0x0234
    4ce6:	c0 90 35 02 	lds	r12, 0x0235
    4cea:	d0 90 36 02 	lds	r13, 0x0236
    4cee:	e0 90 37 02 	lds	r14, 0x0237
    4cf2:	f0 90 38 02 	lds	r15, 0x0238
    4cf6:	00 91 39 02 	lds	r16, 0x0239
    4cfa:	10 91 3a 02 	lds	r17, 0x023A
    4cfe:	22 2d       	mov	r18, r2
    4d00:	2a 29       	or	r18, r10
    4d02:	33 2d       	mov	r19, r3
    4d04:	3b 29       	or	r19, r11
    4d06:	44 2d       	mov	r20, r4
    4d08:	4c 29       	or	r20, r12
    4d0a:	55 2d       	mov	r21, r5
    4d0c:	5d 29       	or	r21, r13
    4d0e:	66 2d       	mov	r22, r6
    4d10:	6e 29       	or	r22, r14
    4d12:	77 2d       	mov	r23, r7
    4d14:	7f 29       	or	r23, r15
    4d16:	88 2d       	mov	r24, r8
    4d18:	80 2b       	or	r24, r16
    4d1a:	99 2d       	mov	r25, r9
    4d1c:	91 2b       	or	r25, r17
    4d1e:	20 93 33 02 	sts	0x0233, r18
    4d22:	30 93 34 02 	sts	0x0234, r19
    4d26:	40 93 35 02 	sts	0x0235, r20
    4d2a:	50 93 36 02 	sts	0x0236, r21
    4d2e:	60 93 37 02 	sts	0x0237, r22
    4d32:	70 93 38 02 	sts	0x0238, r23
    4d36:	80 93 39 02 	sts	0x0239, r24
    4d3a:	90 93 3a 02 	sts	0x023A, r25
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_ROW1_PORT, KPD_ROW1_PIN, DIO_u8INPUT) << 33);
    4d3e:	81 e0       	ldi	r24, 0x01	; 1
    4d40:	60 e0       	ldi	r22, 0x00	; 0
    4d42:	40 e0       	ldi	r20, 0x00	; 0
    4d44:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    4d48:	a8 2e       	mov	r10, r24
    4d4a:	bb 24       	eor	r11, r11
    4d4c:	cc 24       	eor	r12, r12
    4d4e:	dd 24       	eor	r13, r13
    4d50:	ee 24       	eor	r14, r14
    4d52:	ff 24       	eor	r15, r15
    4d54:	87 01       	movw	r16, r14
    4d56:	2a 2d       	mov	r18, r10
    4d58:	3b 2d       	mov	r19, r11
    4d5a:	4c 2d       	mov	r20, r12
    4d5c:	5d 2d       	mov	r21, r13
    4d5e:	6e 2d       	mov	r22, r14
    4d60:	7f 2d       	mov	r23, r15
    4d62:	80 2f       	mov	r24, r16
    4d64:	91 2f       	mov	r25, r17
    4d66:	01 e2       	ldi	r16, 0x21	; 33
    4d68:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    4d6c:	a2 2e       	mov	r10, r18
    4d6e:	b3 2e       	mov	r11, r19
    4d70:	c4 2e       	mov	r12, r20
    4d72:	d5 2e       	mov	r13, r21
    4d74:	e6 2e       	mov	r14, r22
    4d76:	f7 2e       	mov	r15, r23
    4d78:	08 2f       	mov	r16, r24
    4d7a:	19 2f       	mov	r17, r25
    4d7c:	2a 2c       	mov	r2, r10
    4d7e:	3b 2c       	mov	r3, r11
    4d80:	4c 2c       	mov	r4, r12
    4d82:	5d 2c       	mov	r5, r13
    4d84:	6e 2c       	mov	r6, r14
    4d86:	7f 2c       	mov	r7, r15
    4d88:	80 2e       	mov	r8, r16
    4d8a:	91 2e       	mov	r9, r17
    4d8c:	a0 90 33 02 	lds	r10, 0x0233
    4d90:	b0 90 34 02 	lds	r11, 0x0234
    4d94:	c0 90 35 02 	lds	r12, 0x0235
    4d98:	d0 90 36 02 	lds	r13, 0x0236
    4d9c:	e0 90 37 02 	lds	r14, 0x0237
    4da0:	f0 90 38 02 	lds	r15, 0x0238
    4da4:	00 91 39 02 	lds	r16, 0x0239
    4da8:	10 91 3a 02 	lds	r17, 0x023A
    4dac:	22 2d       	mov	r18, r2
    4dae:	2a 29       	or	r18, r10
    4db0:	33 2d       	mov	r19, r3
    4db2:	3b 29       	or	r19, r11
    4db4:	44 2d       	mov	r20, r4
    4db6:	4c 29       	or	r20, r12
    4db8:	55 2d       	mov	r21, r5
    4dba:	5d 29       	or	r21, r13
    4dbc:	66 2d       	mov	r22, r6
    4dbe:	6e 29       	or	r22, r14
    4dc0:	77 2d       	mov	r23, r7
    4dc2:	7f 29       	or	r23, r15
    4dc4:	88 2d       	mov	r24, r8
    4dc6:	80 2b       	or	r24, r16
    4dc8:	99 2d       	mov	r25, r9
    4dca:	91 2b       	or	r25, r17
    4dcc:	20 93 33 02 	sts	0x0233, r18
    4dd0:	30 93 34 02 	sts	0x0234, r19
    4dd4:	40 93 35 02 	sts	0x0235, r20
    4dd8:	50 93 36 02 	sts	0x0236, r21
    4ddc:	60 93 37 02 	sts	0x0237, r22
    4de0:	70 93 38 02 	sts	0x0238, r23
    4de4:	80 93 39 02 	sts	0x0239, r24
    4de8:	90 93 3a 02 	sts	0x023A, r25
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_ROW2_PORT, KPD_ROW2_PIN, DIO_u8INPUT) << 36);
    4dec:	81 e0       	ldi	r24, 0x01	; 1
    4dee:	61 e0       	ldi	r22, 0x01	; 1
    4df0:	40 e0       	ldi	r20, 0x00	; 0
    4df2:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    4df6:	a8 2e       	mov	r10, r24
    4df8:	bb 24       	eor	r11, r11
    4dfa:	cc 24       	eor	r12, r12
    4dfc:	dd 24       	eor	r13, r13
    4dfe:	ee 24       	eor	r14, r14
    4e00:	ff 24       	eor	r15, r15
    4e02:	87 01       	movw	r16, r14
    4e04:	2a 2d       	mov	r18, r10
    4e06:	3b 2d       	mov	r19, r11
    4e08:	4c 2d       	mov	r20, r12
    4e0a:	5d 2d       	mov	r21, r13
    4e0c:	6e 2d       	mov	r22, r14
    4e0e:	7f 2d       	mov	r23, r15
    4e10:	80 2f       	mov	r24, r16
    4e12:	91 2f       	mov	r25, r17
    4e14:	04 e2       	ldi	r16, 0x24	; 36
    4e16:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    4e1a:	a2 2e       	mov	r10, r18
    4e1c:	b3 2e       	mov	r11, r19
    4e1e:	c4 2e       	mov	r12, r20
    4e20:	d5 2e       	mov	r13, r21
    4e22:	e6 2e       	mov	r14, r22
    4e24:	f7 2e       	mov	r15, r23
    4e26:	08 2f       	mov	r16, r24
    4e28:	19 2f       	mov	r17, r25
    4e2a:	2a 2c       	mov	r2, r10
    4e2c:	3b 2c       	mov	r3, r11
    4e2e:	4c 2c       	mov	r4, r12
    4e30:	5d 2c       	mov	r5, r13
    4e32:	6e 2c       	mov	r6, r14
    4e34:	7f 2c       	mov	r7, r15
    4e36:	80 2e       	mov	r8, r16
    4e38:	91 2e       	mov	r9, r17
    4e3a:	a0 90 33 02 	lds	r10, 0x0233
    4e3e:	b0 90 34 02 	lds	r11, 0x0234
    4e42:	c0 90 35 02 	lds	r12, 0x0235
    4e46:	d0 90 36 02 	lds	r13, 0x0236
    4e4a:	e0 90 37 02 	lds	r14, 0x0237
    4e4e:	f0 90 38 02 	lds	r15, 0x0238
    4e52:	00 91 39 02 	lds	r16, 0x0239
    4e56:	10 91 3a 02 	lds	r17, 0x023A
    4e5a:	22 2d       	mov	r18, r2
    4e5c:	2a 29       	or	r18, r10
    4e5e:	33 2d       	mov	r19, r3
    4e60:	3b 29       	or	r19, r11
    4e62:	44 2d       	mov	r20, r4
    4e64:	4c 29       	or	r20, r12
    4e66:	55 2d       	mov	r21, r5
    4e68:	5d 29       	or	r21, r13
    4e6a:	66 2d       	mov	r22, r6
    4e6c:	6e 29       	or	r22, r14
    4e6e:	77 2d       	mov	r23, r7
    4e70:	7f 29       	or	r23, r15
    4e72:	88 2d       	mov	r24, r8
    4e74:	80 2b       	or	r24, r16
    4e76:	99 2d       	mov	r25, r9
    4e78:	91 2b       	or	r25, r17
    4e7a:	20 93 33 02 	sts	0x0233, r18
    4e7e:	30 93 34 02 	sts	0x0234, r19
    4e82:	40 93 35 02 	sts	0x0235, r20
    4e86:	50 93 36 02 	sts	0x0236, r21
    4e8a:	60 93 37 02 	sts	0x0237, r22
    4e8e:	70 93 38 02 	sts	0x0238, r23
    4e92:	80 93 39 02 	sts	0x0239, r24
    4e96:	90 93 3a 02 	sts	0x023A, r25
	Local_u64Check |= ((u64)DIO_enuSetPinDirection(KPD_ROW3_PORT, KPD_ROW3_PIN, DIO_u8INPUT) << 39);
    4e9a:	81 e0       	ldi	r24, 0x01	; 1
    4e9c:	62 e0       	ldi	r22, 0x02	; 2
    4e9e:	40 e0       	ldi	r20, 0x00	; 0
    4ea0:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <DIO_enuSetPinDirection>
    4ea4:	a8 2e       	mov	r10, r24
    4ea6:	bb 24       	eor	r11, r11
    4ea8:	cc 24       	eor	r12, r12
    4eaa:	dd 24       	eor	r13, r13
    4eac:	ee 24       	eor	r14, r14
    4eae:	ff 24       	eor	r15, r15
    4eb0:	87 01       	movw	r16, r14
    4eb2:	2a 2d       	mov	r18, r10
    4eb4:	3b 2d       	mov	r19, r11
    4eb6:	4c 2d       	mov	r20, r12
    4eb8:	5d 2d       	mov	r21, r13
    4eba:	6e 2d       	mov	r22, r14
    4ebc:	7f 2d       	mov	r23, r15
    4ebe:	80 2f       	mov	r24, r16
    4ec0:	91 2f       	mov	r25, r17
    4ec2:	07 e2       	ldi	r16, 0x27	; 39
    4ec4:	0e 94 c8 00 	call	0x190	; 0x190 <__ashldi3>
    4ec8:	a2 2e       	mov	r10, r18
    4eca:	b3 2e       	mov	r11, r19
    4ecc:	c4 2e       	mov	r12, r20
    4ece:	d5 2e       	mov	r13, r21
    4ed0:	e6 2e       	mov	r14, r22
    4ed2:	f7 2e       	mov	r15, r23
    4ed4:	08 2f       	mov	r16, r24
    4ed6:	19 2f       	mov	r17, r25
    4ed8:	2a 2c       	mov	r2, r10
    4eda:	3b 2c       	mov	r3, r11
    4edc:	4c 2c       	mov	r4, r12
    4ede:	5d 2c       	mov	r5, r13
    4ee0:	6e 2c       	mov	r6, r14
    4ee2:	7f 2c       	mov	r7, r15
    4ee4:	80 2e       	mov	r8, r16
    4ee6:	91 2e       	mov	r9, r17
    4ee8:	a0 90 33 02 	lds	r10, 0x0233
    4eec:	b0 90 34 02 	lds	r11, 0x0234
    4ef0:	c0 90 35 02 	lds	r12, 0x0235
    4ef4:	d0 90 36 02 	lds	r13, 0x0236
    4ef8:	e0 90 37 02 	lds	r14, 0x0237
    4efc:	f0 90 38 02 	lds	r15, 0x0238
    4f00:	00 91 39 02 	lds	r16, 0x0239
    4f04:	10 91 3a 02 	lds	r17, 0x023A
    4f08:	22 2d       	mov	r18, r2
    4f0a:	2a 29       	or	r18, r10
    4f0c:	33 2d       	mov	r19, r3
    4f0e:	3b 29       	or	r19, r11
    4f10:	44 2d       	mov	r20, r4
    4f12:	4c 29       	or	r20, r12
    4f14:	55 2d       	mov	r21, r5
    4f16:	5d 29       	or	r21, r13
    4f18:	66 2d       	mov	r22, r6
    4f1a:	6e 29       	or	r22, r14
    4f1c:	77 2d       	mov	r23, r7
    4f1e:	7f 29       	or	r23, r15
    4f20:	88 2d       	mov	r24, r8
    4f22:	80 2b       	or	r24, r16
    4f24:	99 2d       	mov	r25, r9
    4f26:	91 2b       	or	r25, r17
    4f28:	20 93 33 02 	sts	0x0233, r18
    4f2c:	30 93 34 02 	sts	0x0234, r19
    4f30:	40 93 35 02 	sts	0x0235, r20
    4f34:	50 93 36 02 	sts	0x0236, r21
    4f38:	60 93 37 02 	sts	0x0237, r22
    4f3c:	70 93 38 02 	sts	0x0238, r23
    4f40:	80 93 39 02 	sts	0x0239, r24
    4f44:	90 93 3a 02 	sts	0x023A, r25

	/* Set Row Pins Value as Pulled_up */
	DIO_enuSetPinValue(KPD_ROW0_PORT, KPD_ROW0_PIN, DIO_u8PULL_UP);
    4f48:	80 e0       	ldi	r24, 0x00	; 0
    4f4a:	67 e0       	ldi	r22, 0x07	; 7
    4f4c:	41 e0       	ldi	r20, 0x01	; 1
    4f4e:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_ROW1_PORT, KPD_ROW1_PIN, DIO_u8PULL_UP);
    4f52:	81 e0       	ldi	r24, 0x01	; 1
    4f54:	60 e0       	ldi	r22, 0x00	; 0
    4f56:	41 e0       	ldi	r20, 0x01	; 1
    4f58:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_ROW2_PORT, KPD_ROW2_PIN, DIO_u8PULL_UP);
    4f5c:	81 e0       	ldi	r24, 0x01	; 1
    4f5e:	61 e0       	ldi	r22, 0x01	; 1
    4f60:	41 e0       	ldi	r20, 0x01	; 1
    4f62:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
	DIO_enuSetPinValue(KPD_ROW3_PORT, KPD_ROW3_PIN, DIO_u8PULL_UP);
    4f66:	81 e0       	ldi	r24, 0x01	; 1
    4f68:	62 e0       	ldi	r22, 0x02	; 2
    4f6a:	41 e0       	ldi	r20, 0x01	; 1
    4f6c:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>

	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0; Local_u8Iterator <= 39; Local_u8Iterator += 3)
    4f70:	19 82       	std	Y+1, r1	; 0x01
    4f72:	4e c0       	rjmp	.+156    	; 0x5010 <KPD_enuInit+0xa78>
	{
		if(( (Local_u64Check >> Local_u8Iterator) & (0b111) ) != ES_OK)
    4f74:	a0 90 33 02 	lds	r10, 0x0233
    4f78:	b0 90 34 02 	lds	r11, 0x0234
    4f7c:	c0 90 35 02 	lds	r12, 0x0235
    4f80:	d0 90 36 02 	lds	r13, 0x0236
    4f84:	e0 90 37 02 	lds	r14, 0x0237
    4f88:	f0 90 38 02 	lds	r15, 0x0238
    4f8c:	00 91 39 02 	lds	r16, 0x0239
    4f90:	10 91 3a 02 	lds	r17, 0x023A
    4f94:	89 81       	ldd	r24, Y+1	; 0x01
    4f96:	e8 2f       	mov	r30, r24
    4f98:	f0 e0       	ldi	r31, 0x00	; 0
    4f9a:	2a 2d       	mov	r18, r10
    4f9c:	3b 2d       	mov	r19, r11
    4f9e:	4c 2d       	mov	r20, r12
    4fa0:	5d 2d       	mov	r21, r13
    4fa2:	6e 2d       	mov	r22, r14
    4fa4:	7f 2d       	mov	r23, r15
    4fa6:	80 2f       	mov	r24, r16
    4fa8:	91 2f       	mov	r25, r17
    4faa:	0e 2f       	mov	r16, r30
    4fac:	0e 94 49 00 	call	0x92	; 0x92 <__lshrdi3>
    4fb0:	a2 2e       	mov	r10, r18
    4fb2:	b3 2e       	mov	r11, r19
    4fb4:	c4 2e       	mov	r12, r20
    4fb6:	d5 2e       	mov	r13, r21
    4fb8:	e6 2e       	mov	r14, r22
    4fba:	f7 2e       	mov	r15, r23
    4fbc:	08 2f       	mov	r16, r24
    4fbe:	19 2f       	mov	r17, r25
    4fc0:	2a 2c       	mov	r2, r10
    4fc2:	3b 2c       	mov	r3, r11
    4fc4:	4c 2c       	mov	r4, r12
    4fc6:	5d 2c       	mov	r5, r13
    4fc8:	6e 2c       	mov	r6, r14
    4fca:	7f 2c       	mov	r7, r15
    4fcc:	80 2e       	mov	r8, r16
    4fce:	91 2e       	mov	r9, r17
    4fd0:	22 2d       	mov	r18, r2
    4fd2:	27 70       	andi	r18, 0x07	; 7
    4fd4:	33 2d       	mov	r19, r3
    4fd6:	30 70       	andi	r19, 0x00	; 0
    4fd8:	44 2d       	mov	r20, r4
    4fda:	40 70       	andi	r20, 0x00	; 0
    4fdc:	55 2d       	mov	r21, r5
    4fde:	50 70       	andi	r21, 0x00	; 0
    4fe0:	66 2d       	mov	r22, r6
    4fe2:	60 70       	andi	r22, 0x00	; 0
    4fe4:	77 2d       	mov	r23, r7
    4fe6:	70 70       	andi	r23, 0x00	; 0
    4fe8:	88 2d       	mov	r24, r8
    4fea:	80 70       	andi	r24, 0x00	; 0
    4fec:	99 2d       	mov	r25, r9
    4fee:	90 70       	andi	r25, 0x00	; 0
    4ff0:	e2 2f       	mov	r30, r18
    4ff2:	e3 2b       	or	r30, r19
    4ff4:	e4 2b       	or	r30, r20
    4ff6:	e5 2b       	or	r30, r21
    4ff8:	e6 2b       	or	r30, r22
    4ffa:	e7 2b       	or	r30, r23
    4ffc:	e8 2b       	or	r30, r24
    4ffe:	e9 2b       	or	r30, r25
    5000:	ee 23       	and	r30, r30
    5002:	19 f0       	breq	.+6      	; 0x500a <KPD_enuInit+0xa72>
		{
			return ES_NOK;
    5004:	81 e0       	ldi	r24, 0x01	; 1
    5006:	8b 83       	std	Y+3, r24	; 0x03
    5008:	0a c0       	rjmp	.+20     	; 0x501e <KPD_enuInit+0xa86>
	DIO_enuSetPinValue(KPD_ROW1_PORT, KPD_ROW1_PIN, DIO_u8PULL_UP);
	DIO_enuSetPinValue(KPD_ROW2_PORT, KPD_ROW2_PIN, DIO_u8PULL_UP);
	DIO_enuSetPinValue(KPD_ROW3_PORT, KPD_ROW3_PIN, DIO_u8PULL_UP);

	u8 Local_u8Iterator;
	for(Local_u8Iterator = 0; Local_u8Iterator <= 39; Local_u8Iterator += 3)
    500a:	89 81       	ldd	r24, Y+1	; 0x01
    500c:	8d 5f       	subi	r24, 0xFD	; 253
    500e:	89 83       	std	Y+1, r24	; 0x01
    5010:	89 81       	ldd	r24, Y+1	; 0x01
    5012:	88 32       	cpi	r24, 0x28	; 40
    5014:	08 f4       	brcc	.+2      	; 0x5018 <KPD_enuInit+0xa80>
    5016:	ae cf       	rjmp	.-164    	; 0x4f74 <KPD_enuInit+0x9dc>
		{
			return ES_NOK;
		}
	}

	Local_enuErrorState = ES_OK;
    5018:	1a 82       	std	Y+2, r1	; 0x02
	return Local_enuErrorState;
    501a:	8a 81       	ldd	r24, Y+2	; 0x02
    501c:	8b 83       	std	Y+3, r24	; 0x03
    501e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    5020:	0f 90       	pop	r0
    5022:	0f 90       	pop	r0
    5024:	0f 90       	pop	r0
    5026:	cf 91       	pop	r28
    5028:	df 91       	pop	r29
    502a:	1f 91       	pop	r17
    502c:	0f 91       	pop	r16
    502e:	ff 90       	pop	r15
    5030:	ef 90       	pop	r14
    5032:	df 90       	pop	r13
    5034:	cf 90       	pop	r12
    5036:	bf 90       	pop	r11
    5038:	af 90       	pop	r10
    503a:	9f 90       	pop	r9
    503c:	8f 90       	pop	r8
    503e:	7f 90       	pop	r7
    5040:	6f 90       	pop	r6
    5042:	5f 90       	pop	r5
    5044:	4f 90       	pop	r4
    5046:	3f 90       	pop	r3
    5048:	2f 90       	pop	r2
    504a:	08 95       	ret

0000504c <KPD_enuGetPressedKey>:



ES_t KPD_enuGetPressedKey(u8 * Copy_Pu8PinState)
{
    504c:	df 93       	push	r29
    504e:	cf 93       	push	r28
    5050:	00 d0       	rcall	.+0      	; 0x5052 <KPD_enuGetPressedKey+0x6>
    5052:	00 d0       	rcall	.+0      	; 0x5054 <KPD_enuGetPressedKey+0x8>
    5054:	0f 92       	push	r0
    5056:	cd b7       	in	r28, 0x3d	; 61
    5058:	de b7       	in	r29, 0x3e	; 62
    505a:	9c 83       	std	Y+4, r25	; 0x04
    505c:	8b 83       	std	Y+3, r24	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    505e:	81 e0       	ldi	r24, 0x01	; 1
    5060:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8PressedKey = NOT_PRESSED_KEY;
    5062:	8f ef       	ldi	r24, 0xFF	; 255
    5064:	89 83       	std	Y+1, r24	; 0x01
	static u8 Local_Au8Rows [KPD_ROW_NUM][2] = KPD_ROWS;

	static u8 Local_Au8Columns [KPD_COLUMN_NUM][2] = KPD_COLUMNS;

	static u8 Local_u8Iterator1, Local_u8Iterator2;
	for(Local_u8Iterator1 = 0; Local_u8Iterator1 < KPD_COLUMN_NUM ; ++Local_u8Iterator1)
    5066:	10 92 3c 02 	sts	0x023C, r1
    506a:	ad c0       	rjmp	.+346    	; 0x51c6 <KPD_enuGetPressedKey+0x17a>
	{
		if(DIO_enuSetPinValue(Local_Au8Columns[Local_u8Iterator1][0], Local_Au8Columns[Local_u8Iterator1][1], DIO_u8LOW) != ES_OK)
    506c:	80 91 3c 02 	lds	r24, 0x023C
    5070:	88 2f       	mov	r24, r24
    5072:	90 e0       	ldi	r25, 0x00	; 0
    5074:	88 0f       	add	r24, r24
    5076:	99 1f       	adc	r25, r25
    5078:	fc 01       	movw	r30, r24
    507a:	ed 51       	subi	r30, 0x1D	; 29
    507c:	fe 4f       	sbci	r31, 0xFE	; 254
    507e:	20 81       	ld	r18, Z
    5080:	80 91 3c 02 	lds	r24, 0x023C
    5084:	88 2f       	mov	r24, r24
    5086:	90 e0       	ldi	r25, 0x00	; 0
    5088:	88 0f       	add	r24, r24
    508a:	99 1f       	adc	r25, r25
    508c:	fc 01       	movw	r30, r24
    508e:	ec 51       	subi	r30, 0x1C	; 28
    5090:	fe 4f       	sbci	r31, 0xFE	; 254
    5092:	90 81       	ld	r25, Z
    5094:	82 2f       	mov	r24, r18
    5096:	69 2f       	mov	r22, r25
    5098:	40 e0       	ldi	r20, 0x00	; 0
    509a:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
    509e:	88 23       	and	r24, r24
    50a0:	19 f0       	breq	.+6      	; 0x50a8 <KPD_enuGetPressedKey+0x5c>
		{
			return Local_enuErrorState;
    50a2:	8a 81       	ldd	r24, Y+2	; 0x02
    50a4:	8d 83       	std	Y+5, r24	; 0x05
    50a6:	9b c0       	rjmp	.+310    	; 0x51de <KPD_enuGetPressedKey+0x192>
		}
		for(Local_u8Iterator2 = 0; Local_u8Iterator2 < KPD_ROW_NUM; ++Local_u8Iterator2)
    50a8:	10 92 3b 02 	sts	0x023B, r1
    50ac:	69 c0       	rjmp	.+210    	; 0x5180 <KPD_enuGetPressedKey+0x134>
		{
			if(DIO_enuGetPinValue(Local_Au8Rows[Local_u8Iterator2][0], Local_Au8Rows[Local_u8Iterator2][1], Copy_Pu8PinState) != ES_OK)
    50ae:	80 91 3b 02 	lds	r24, 0x023B
    50b2:	88 2f       	mov	r24, r24
    50b4:	90 e0       	ldi	r25, 0x00	; 0
    50b6:	88 0f       	add	r24, r24
    50b8:	99 1f       	adc	r25, r25
    50ba:	fc 01       	movw	r30, r24
    50bc:	e9 50       	subi	r30, 0x09	; 9
    50be:	fe 4f       	sbci	r31, 0xFE	; 254
    50c0:	40 81       	ld	r20, Z
    50c2:	80 91 3b 02 	lds	r24, 0x023B
    50c6:	88 2f       	mov	r24, r24
    50c8:	90 e0       	ldi	r25, 0x00	; 0
    50ca:	88 0f       	add	r24, r24
    50cc:	99 1f       	adc	r25, r25
    50ce:	fc 01       	movw	r30, r24
    50d0:	e8 50       	subi	r30, 0x08	; 8
    50d2:	fe 4f       	sbci	r31, 0xFE	; 254
    50d4:	90 81       	ld	r25, Z
    50d6:	2b 81       	ldd	r18, Y+3	; 0x03
    50d8:	3c 81       	ldd	r19, Y+4	; 0x04
    50da:	84 2f       	mov	r24, r20
    50dc:	69 2f       	mov	r22, r25
    50de:	a9 01       	movw	r20, r18
    50e0:	0e 94 b9 14 	call	0x2972	; 0x2972 <DIO_enuGetPinValue>
    50e4:	88 23       	and	r24, r24
    50e6:	19 f0       	breq	.+6      	; 0x50ee <KPD_enuGetPressedKey+0xa2>
			{
				return Local_enuErrorState;
    50e8:	8a 81       	ldd	r24, Y+2	; 0x02
    50ea:	8d 83       	std	Y+5, r24	; 0x05
    50ec:	78 c0       	rjmp	.+240    	; 0x51de <KPD_enuGetPressedKey+0x192>
			}

			if(DIO_u8LOW == *Copy_Pu8PinState)
    50ee:	eb 81       	ldd	r30, Y+3	; 0x03
    50f0:	fc 81       	ldd	r31, Y+4	; 0x04
    50f2:	80 81       	ld	r24, Z
    50f4:	88 23       	and	r24, r24
    50f6:	09 f0       	breq	.+2      	; 0x50fa <KPD_enuGetPressedKey+0xae>
    50f8:	3e c0       	rjmp	.+124    	; 0x5176 <KPD_enuGetPressedKey+0x12a>
    50fa:	1b c0       	rjmp	.+54     	; 0x5132 <KPD_enuGetPressedKey+0xe6>
			{
				while(DIO_u8LOW == *Copy_Pu8PinState)
				{
					DIO_enuGetPinValue(Local_Au8Rows[Local_u8Iterator2][0], Local_Au8Rows[Local_u8Iterator2][1], Copy_Pu8PinState);
    50fc:	80 91 3b 02 	lds	r24, 0x023B
    5100:	88 2f       	mov	r24, r24
    5102:	90 e0       	ldi	r25, 0x00	; 0
    5104:	88 0f       	add	r24, r24
    5106:	99 1f       	adc	r25, r25
    5108:	fc 01       	movw	r30, r24
    510a:	e9 50       	subi	r30, 0x09	; 9
    510c:	fe 4f       	sbci	r31, 0xFE	; 254
    510e:	40 81       	ld	r20, Z
    5110:	80 91 3b 02 	lds	r24, 0x023B
    5114:	88 2f       	mov	r24, r24
    5116:	90 e0       	ldi	r25, 0x00	; 0
    5118:	88 0f       	add	r24, r24
    511a:	99 1f       	adc	r25, r25
    511c:	fc 01       	movw	r30, r24
    511e:	e8 50       	subi	r30, 0x08	; 8
    5120:	fe 4f       	sbci	r31, 0xFE	; 254
    5122:	90 81       	ld	r25, Z
    5124:	2b 81       	ldd	r18, Y+3	; 0x03
    5126:	3c 81       	ldd	r19, Y+4	; 0x04
    5128:	84 2f       	mov	r24, r20
    512a:	69 2f       	mov	r22, r25
    512c:	a9 01       	movw	r20, r18
    512e:	0e 94 b9 14 	call	0x2972	; 0x2972 <DIO_enuGetPinValue>
				return Local_enuErrorState;
			}

			if(DIO_u8LOW == *Copy_Pu8PinState)
			{
				while(DIO_u8LOW == *Copy_Pu8PinState)
    5132:	eb 81       	ldd	r30, Y+3	; 0x03
    5134:	fc 81       	ldd	r31, Y+4	; 0x04
    5136:	80 81       	ld	r24, Z
    5138:	88 23       	and	r24, r24
    513a:	01 f3       	breq	.-64     	; 0x50fc <KPD_enuGetPressedKey+0xb0>
				{
					DIO_enuGetPinValue(Local_Au8Rows[Local_u8Iterator2][0], Local_Au8Rows[Local_u8Iterator2][1], Copy_Pu8PinState);
				}
				*Copy_Pu8PinState = Local_Au8KPD[Local_u8Iterator2][Local_u8Iterator1];
    513c:	80 91 3b 02 	lds	r24, 0x023B
    5140:	28 2f       	mov	r18, r24
    5142:	30 e0       	ldi	r19, 0x00	; 0
    5144:	80 91 3c 02 	lds	r24, 0x023C
    5148:	48 2f       	mov	r20, r24
    514a:	50 e0       	ldi	r21, 0x00	; 0
    514c:	c9 01       	movw	r24, r18
    514e:	88 0f       	add	r24, r24
    5150:	99 1f       	adc	r25, r25
    5152:	9c 01       	movw	r18, r24
    5154:	22 0f       	add	r18, r18
    5156:	33 1f       	adc	r19, r19
    5158:	22 0f       	add	r18, r18
    515a:	33 1f       	adc	r19, r19
    515c:	82 0f       	add	r24, r18
    515e:	93 1f       	adc	r25, r19
    5160:	84 0f       	add	r24, r20
    5162:	95 1f       	adc	r25, r21
    5164:	fc 01       	movw	r30, r24
    5166:	e1 50       	subi	r30, 0x01	; 1
    5168:	fe 4f       	sbci	r31, 0xFE	; 254
    516a:	80 81       	ld	r24, Z
    516c:	eb 81       	ldd	r30, Y+3	; 0x03
    516e:	fc 81       	ldd	r31, Y+4	; 0x04
    5170:	80 83       	st	Z, r24
				return ES_OK;
    5172:	1d 82       	std	Y+5, r1	; 0x05
    5174:	34 c0       	rjmp	.+104    	; 0x51de <KPD_enuGetPressedKey+0x192>
	{
		if(DIO_enuSetPinValue(Local_Au8Columns[Local_u8Iterator1][0], Local_Au8Columns[Local_u8Iterator1][1], DIO_u8LOW) != ES_OK)
		{
			return Local_enuErrorState;
		}
		for(Local_u8Iterator2 = 0; Local_u8Iterator2 < KPD_ROW_NUM; ++Local_u8Iterator2)
    5176:	80 91 3b 02 	lds	r24, 0x023B
    517a:	8f 5f       	subi	r24, 0xFF	; 255
    517c:	80 93 3b 02 	sts	0x023B, r24
    5180:	80 91 3b 02 	lds	r24, 0x023B
    5184:	84 30       	cpi	r24, 0x04	; 4
    5186:	08 f4       	brcc	.+2      	; 0x518a <KPD_enuGetPressedKey+0x13e>
    5188:	92 cf       	rjmp	.-220    	; 0x50ae <KPD_enuGetPressedKey+0x62>
				}
				*Copy_Pu8PinState = Local_Au8KPD[Local_u8Iterator2][Local_u8Iterator1];
				return ES_OK;
			}
		}
		DIO_enuSetPinValue(Local_Au8Columns[Local_u8Iterator1][0], Local_Au8Columns[Local_u8Iterator1][1], DIO_u8HIGH);
    518a:	80 91 3c 02 	lds	r24, 0x023C
    518e:	88 2f       	mov	r24, r24
    5190:	90 e0       	ldi	r25, 0x00	; 0
    5192:	88 0f       	add	r24, r24
    5194:	99 1f       	adc	r25, r25
    5196:	fc 01       	movw	r30, r24
    5198:	ed 51       	subi	r30, 0x1D	; 29
    519a:	fe 4f       	sbci	r31, 0xFE	; 254
    519c:	20 81       	ld	r18, Z
    519e:	80 91 3c 02 	lds	r24, 0x023C
    51a2:	88 2f       	mov	r24, r24
    51a4:	90 e0       	ldi	r25, 0x00	; 0
    51a6:	88 0f       	add	r24, r24
    51a8:	99 1f       	adc	r25, r25
    51aa:	fc 01       	movw	r30, r24
    51ac:	ec 51       	subi	r30, 0x1C	; 28
    51ae:	fe 4f       	sbci	r31, 0xFE	; 254
    51b0:	90 81       	ld	r25, Z
    51b2:	82 2f       	mov	r24, r18
    51b4:	69 2f       	mov	r22, r25
    51b6:	41 e0       	ldi	r20, 0x01	; 1
    51b8:	0e 94 cd 13 	call	0x279a	; 0x279a <DIO_enuSetPinValue>
	static u8 Local_Au8Rows [KPD_ROW_NUM][2] = KPD_ROWS;

	static u8 Local_Au8Columns [KPD_COLUMN_NUM][2] = KPD_COLUMNS;

	static u8 Local_u8Iterator1, Local_u8Iterator2;
	for(Local_u8Iterator1 = 0; Local_u8Iterator1 < KPD_COLUMN_NUM ; ++Local_u8Iterator1)
    51bc:	80 91 3c 02 	lds	r24, 0x023C
    51c0:	8f 5f       	subi	r24, 0xFF	; 255
    51c2:	80 93 3c 02 	sts	0x023C, r24
    51c6:	80 91 3c 02 	lds	r24, 0x023C
    51ca:	8a 30       	cpi	r24, 0x0A	; 10
    51cc:	08 f4       	brcc	.+2      	; 0x51d0 <KPD_enuGetPressedKey+0x184>
    51ce:	4e cf       	rjmp	.-356    	; 0x506c <KPD_enuGetPressedKey+0x20>
			}
		}
		DIO_enuSetPinValue(Local_Au8Columns[Local_u8Iterator1][0], Local_Au8Columns[Local_u8Iterator1][1], DIO_u8HIGH);
	}

	*Copy_Pu8PinState = Local_u8PressedKey;
    51d0:	eb 81       	ldd	r30, Y+3	; 0x03
    51d2:	fc 81       	ldd	r31, Y+4	; 0x04
    51d4:	89 81       	ldd	r24, Y+1	; 0x01
    51d6:	80 83       	st	Z, r24
	Local_enuErrorState = ES_OK;
    51d8:	1a 82       	std	Y+2, r1	; 0x02
	return Local_enuErrorState;
    51da:	8a 81       	ldd	r24, Y+2	; 0x02
    51dc:	8d 83       	std	Y+5, r24	; 0x05
    51de:	8d 81       	ldd	r24, Y+5	; 0x05
}
    51e0:	0f 90       	pop	r0
    51e2:	0f 90       	pop	r0
    51e4:	0f 90       	pop	r0
    51e6:	0f 90       	pop	r0
    51e8:	0f 90       	pop	r0
    51ea:	cf 91       	pop	r28
    51ec:	df 91       	pop	r29
    51ee:	08 95       	ret

000051f0 <Local_voidCalCulator>:
static u8 Global_u8Operators[NUM_OF_OPERATORS], Global_Au8NumberRepresentation[NUM_OF_BITS], Global_u8PressedKey = NOT_PRESSED_KEY;
static s8 Global_u8ShiftIter = 0, Global_u8CountingLeftShift = 0;


void Local_voidCalCulator(void)
{
    51f0:	df 93       	push	r29
    51f2:	cf 93       	push	r28
    51f4:	0f 92       	push	r0
    51f6:	cd b7       	in	r28, 0x3d	; 61
    51f8:	de b7       	in	r29, 0x3e	; 62
	DIO_enuInit(); // Initialize DIO and Keypad
    51fa:	0e 94 b6 12 	call	0x256c	; 0x256c <DIO_enuInit>
	KPD_enuInit();
    51fe:	0e 94 cc 22 	call	0x4598	; 0x4598 <KPD_enuInit>

	while(KPD_enuGetPressedKey(&Global_u8PressedKey) == ES_OK && Global_u8PressedKey != 'c'); // Wait to press ON button to turn on keypad
    5202:	81 e3       	ldi	r24, 0x31	; 49
    5204:	92 e0       	ldi	r25, 0x02	; 2
    5206:	0e 94 26 28 	call	0x504c	; 0x504c <KPD_enuGetPressedKey>
    520a:	88 23       	and	r24, r24
    520c:	21 f4       	brne	.+8      	; 0x5216 <Local_voidCalCulator+0x26>
    520e:	80 91 31 02 	lds	r24, 0x0231
    5212:	83 36       	cpi	r24, 0x63	; 99
    5214:	b1 f7       	brne	.-20     	; 0x5202 <Local_voidCalCulator+0x12>
	LCD_enuInit();
    5216:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <LCD_enuInit>

	Local_voidClrArray(Global_Au8NumberRepresentation, NUM_OF_BITS); // Initialize Array by '0'
    521a:	82 e8       	ldi	r24, 0x82	; 130
    521c:	92 e0       	ldi	r25, 0x02	; 2
    521e:	60 e1       	ldi	r22, 0x10	; 16
    5220:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <Local_voidClrArray>


	while(1)
	{
		Global_u8PressedKey = NOT_PRESSED_KEY;
    5224:	8f ef       	ldi	r24, 0xFF	; 255
    5226:	80 93 31 02 	sts	0x0231, r24
		while(KPD_enuGetPressedKey(&Global_u8PressedKey) == ES_OK && Global_u8PressedKey == NOT_PRESSED_KEY); // Wait to press any button
    522a:	81 e3       	ldi	r24, 0x31	; 49
    522c:	92 e0       	ldi	r25, 0x02	; 2
    522e:	0e 94 26 28 	call	0x504c	; 0x504c <KPD_enuGetPressedKey>
    5232:	88 23       	and	r24, r24
    5234:	21 f4       	brne	.+8      	; 0x523e <Local_voidCalCulator+0x4e>
    5236:	80 91 31 02 	lds	r24, 0x0231
    523a:	8f 3f       	cpi	r24, 0xFF	; 255
    523c:	b1 f3       	breq	.-20     	; 0x522a <Local_voidCalCulator+0x3a>

		Local_voidShiftText(); // Shift text to left when lcd screen is full..
    523e:	0e 94 22 2b 	call	0x5644	; 0x5644 <Local_voidShiftText>

		if(Global_u8PressedKey == 'k') Set_Bit(Global_u16Flags, alpha); // Set alpha mode to write number in hex. or get output in rad..
    5242:	80 91 31 02 	lds	r24, 0x0231
    5246:	8b 36       	cpi	r24, 0x6B	; 107
    5248:	51 f4       	brne	.+20     	; 0x525e <Local_voidCalCulator+0x6e>
    524a:	80 91 3d 02 	lds	r24, 0x023D
    524e:	90 91 3e 02 	lds	r25, 0x023E
    5252:	91 60       	ori	r25, 0x01	; 1
    5254:	90 93 3e 02 	sts	0x023E, r25
    5258:	80 93 3d 02 	sts	0x023D, r24
    525c:	e3 cf       	rjmp	.-58     	; 0x5224 <Local_voidCalCulator+0x34>

		else if(Global_u8PressedKey == 'S' )
    525e:	80 91 31 02 	lds	r24, 0x0231
    5262:	83 35       	cpi	r24, 0x53	; 83
    5264:	f1 f4       	brne	.+60     	; 0x52a2 <Local_voidCalCulator+0xb2>
		{
			LCD_enuDisplayString("Pi");
    5266:	80 e6       	ldi	r24, 0x60	; 96
    5268:	90 e0       	ldi	r25, 0x00	; 0
    526a:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
			Global_Af32Operands[++Global_s8Num_Iterator] = M_PI;
    526e:	80 91 27 02 	lds	r24, 0x0227
    5272:	8f 5f       	subi	r24, 0xFF	; 255
    5274:	80 93 27 02 	sts	0x0227, r24
    5278:	80 91 27 02 	lds	r24, 0x0227
    527c:	99 27       	eor	r25, r25
    527e:	87 fd       	sbrc	r24, 7
    5280:	90 95       	com	r25
    5282:	88 0f       	add	r24, r24
    5284:	99 1f       	adc	r25, r25
    5286:	88 0f       	add	r24, r24
    5288:	99 1f       	adc	r25, r25
    528a:	fc 01       	movw	r30, r24
    528c:	e9 5b       	subi	r30, 0xB9	; 185
    528e:	fd 4f       	sbci	r31, 0xFD	; 253
    5290:	8b ed       	ldi	r24, 0xDB	; 219
    5292:	9f e0       	ldi	r25, 0x0F	; 15
    5294:	a9 e4       	ldi	r26, 0x49	; 73
    5296:	b0 e4       	ldi	r27, 0x40	; 64
    5298:	80 83       	st	Z, r24
    529a:	91 83       	std	Z+1, r25	; 0x01
    529c:	a2 83       	std	Z+2, r26	; 0x02
    529e:	b3 83       	std	Z+3, r27	; 0x03
    52a0:	c1 cf       	rjmp	.-126    	; 0x5224 <Local_voidCalCulator+0x34>
		}
		else if(Global_u8PressedKey == 'A')
    52a2:	80 91 31 02 	lds	r24, 0x0231
    52a6:	81 34       	cpi	r24, 0x41	; 65
    52a8:	69 f4       	brne	.+26     	; 0x52c4 <Local_voidCalCulator+0xd4>
		{
			Local_f32Mode = 1;
    52aa:	80 e0       	ldi	r24, 0x00	; 0
    52ac:	90 e0       	ldi	r25, 0x00	; 0
    52ae:	a0 e8       	ldi	r26, 0x80	; 128
    52b0:	bf e3       	ldi	r27, 0x3F	; 63
    52b2:	80 93 2d 02 	sts	0x022D, r24
    52b6:	90 93 2e 02 	sts	0x022E, r25
    52ba:	a0 93 2f 02 	sts	0x022F, r26
    52be:	b0 93 30 02 	sts	0x0230, r27
    52c2:	b0 cf       	rjmp	.-160    	; 0x5224 <Local_voidCalCulator+0x34>
		}
		else if(Global_u8PressedKey == 'B' )
    52c4:	80 91 31 02 	lds	r24, 0x0231
    52c8:	82 34       	cpi	r24, 0x42	; 66
    52ca:	69 f4       	brne	.+26     	; 0x52e6 <Local_voidCalCulator+0xf6>
		{
			Local_f32Mode = M_PI/180;
    52cc:	85 e3       	ldi	r24, 0x35	; 53
    52ce:	9a ef       	ldi	r25, 0xFA	; 250
    52d0:	ae e8       	ldi	r26, 0x8E	; 142
    52d2:	bc e3       	ldi	r27, 0x3C	; 60
    52d4:	80 93 2d 02 	sts	0x022D, r24
    52d8:	90 93 2e 02 	sts	0x022E, r25
    52dc:	a0 93 2f 02 	sts	0x022F, r26
    52e0:	b0 93 30 02 	sts	0x0230, r27
    52e4:	9f cf       	rjmp	.-194    	; 0x5224 <Local_voidCalCulator+0x34>
		}
		else if(Get_Bit(Global_u16Flags, number_repres) && !Get_Bit(Global_u16Flags, last_is_dec) // Take Number in (hex. or oct. or bin.) that be convert to other number_systems
    52e6:	80 91 3d 02 	lds	r24, 0x023D
    52ea:	90 91 3e 02 	lds	r25, 0x023E
    52ee:	80 78       	andi	r24, 0x80	; 128
    52f0:	90 70       	andi	r25, 0x00	; 0
    52f2:	00 97       	sbiw	r24, 0x00	; 0
    52f4:	09 f4       	brne	.+2      	; 0x52f8 <Local_voidCalCulator+0x108>
    52f6:	85 c0       	rjmp	.+266    	; 0x5402 <Local_voidCalCulator+0x212>
    52f8:	80 91 3d 02 	lds	r24, 0x023D
    52fc:	90 91 3e 02 	lds	r25, 0x023E
    5300:	80 70       	andi	r24, 0x00	; 0
    5302:	94 70       	andi	r25, 0x04	; 4
    5304:	00 97       	sbiw	r24, 0x00	; 0
    5306:	09 f0       	breq	.+2      	; 0x530a <Local_voidCalCulator+0x11a>
    5308:	7c c0       	rjmp	.+248    	; 0x5402 <Local_voidCalCulator+0x212>
    530a:	80 91 31 02 	lds	r24, 0x0231
    530e:	80 33       	cpi	r24, 0x30	; 48
    5310:	20 f0       	brcs	.+8      	; 0x531a <Local_voidCalCulator+0x12a>
    5312:	80 91 31 02 	lds	r24, 0x0231
    5316:	8a 33       	cpi	r24, 0x3A	; 58
    5318:	98 f0       	brcs	.+38     	; 0x5340 <Local_voidCalCulator+0x150>
    531a:	80 91 31 02 	lds	r24, 0x0231
    531e:	81 34       	cpi	r24, 0x41	; 65
    5320:	08 f4       	brcc	.+2      	; 0x5324 <Local_voidCalCulator+0x134>
    5322:	6f c0       	rjmp	.+222    	; 0x5402 <Local_voidCalCulator+0x212>
    5324:	80 91 31 02 	lds	r24, 0x0231
    5328:	87 34       	cpi	r24, 0x47	; 71
    532a:	08 f0       	brcs	.+2      	; 0x532e <Local_voidCalCulator+0x13e>
    532c:	6a c0       	rjmp	.+212    	; 0x5402 <Local_voidCalCulator+0x212>
    532e:	80 91 3d 02 	lds	r24, 0x023D
    5332:	90 91 3e 02 	lds	r25, 0x023E
    5336:	80 70       	andi	r24, 0x00	; 0
    5338:	91 70       	andi	r25, 0x01	; 1
    533a:	00 97       	sbiw	r24, 0x00	; 0
    533c:	09 f4       	brne	.+2      	; 0x5340 <Local_voidCalCulator+0x150>
    533e:	61 c0       	rjmp	.+194    	; 0x5402 <Local_voidCalCulator+0x212>
				&& ( (Global_u8PressedKey >= '0' && Global_u8PressedKey <= '9')
						|| ( Global_u8PressedKey >= 'A' && Global_u8PressedKey <= 'F' &&  Get_Bit(Global_u16Flags, alpha)) ) )
		{
			if(!Get_Bit(Global_u16Flags, last_is_hex))
    5340:	80 91 3d 02 	lds	r24, 0x023D
    5344:	90 91 3e 02 	lds	r25, 0x023E
    5348:	80 70       	andi	r24, 0x00	; 0
    534a:	92 70       	andi	r25, 0x02	; 2
    534c:	00 97       	sbiw	r24, 0x00	; 0
    534e:	91 f5       	brne	.+100    	; 0x53b4 <Local_voidCalCulator+0x1c4>
			{
				if(Get_Bit(Global_u16Flags, last_is_oct)  && !(Global_u8PressedKey >= '0'  && Global_u8PressedKey <= '7')) Set_Bit(Global_u16Flags, syntax_error);
    5350:	80 91 3d 02 	lds	r24, 0x023D
    5354:	90 91 3e 02 	lds	r25, 0x023E
    5358:	80 70       	andi	r24, 0x00	; 0
    535a:	90 71       	andi	r25, 0x10	; 16
    535c:	00 97       	sbiw	r24, 0x00	; 0
    535e:	89 f0       	breq	.+34     	; 0x5382 <Local_voidCalCulator+0x192>
    5360:	80 91 31 02 	lds	r24, 0x0231
    5364:	80 33       	cpi	r24, 0x30	; 48
    5366:	20 f0       	brcs	.+8      	; 0x5370 <Local_voidCalCulator+0x180>
    5368:	80 91 31 02 	lds	r24, 0x0231
    536c:	88 33       	cpi	r24, 0x38	; 56
    536e:	48 f0       	brcs	.+18     	; 0x5382 <Local_voidCalCulator+0x192>
    5370:	80 91 3d 02 	lds	r24, 0x023D
    5374:	90 91 3e 02 	lds	r25, 0x023E
    5378:	90 62       	ori	r25, 0x20	; 32
    537a:	90 93 3e 02 	sts	0x023E, r25
    537e:	80 93 3d 02 	sts	0x023D, r24
				if(Get_Bit(Global_u16Flags, last_is_bin)  &&  (Global_u8PressedKey != '0'  && Global_u8PressedKey != '1')) Set_Bit(Global_u16Flags, syntax_error);
    5382:	80 91 3d 02 	lds	r24, 0x023D
    5386:	90 91 3e 02 	lds	r25, 0x023E
    538a:	80 70       	andi	r24, 0x00	; 0
    538c:	98 70       	andi	r25, 0x08	; 8
    538e:	00 97       	sbiw	r24, 0x00	; 0
    5390:	89 f0       	breq	.+34     	; 0x53b4 <Local_voidCalCulator+0x1c4>
    5392:	80 91 31 02 	lds	r24, 0x0231
    5396:	80 33       	cpi	r24, 0x30	; 48
    5398:	69 f0       	breq	.+26     	; 0x53b4 <Local_voidCalCulator+0x1c4>
    539a:	80 91 31 02 	lds	r24, 0x0231
    539e:	81 33       	cpi	r24, 0x31	; 49
    53a0:	49 f0       	breq	.+18     	; 0x53b4 <Local_voidCalCulator+0x1c4>
    53a2:	80 91 3d 02 	lds	r24, 0x023D
    53a6:	90 91 3e 02 	lds	r25, 0x023E
    53aa:	90 62       	ori	r25, 0x20	; 32
    53ac:	90 93 3e 02 	sts	0x023E, r25
    53b0:	80 93 3d 02 	sts	0x023D, r24
			}

			LCD_enuDisplayChar(Global_u8PressedKey);
    53b4:	80 91 31 02 	lds	r24, 0x0231
    53b8:	0e 94 60 20 	call	0x40c0	; 0x40c0 <LCD_enuDisplayChar>
			for(u8 Local_u8Iter = Global_s8IterOfNumberRepres; Local_u8Iter < NUM_OF_BITS - 1; ++Local_u8Iter)
    53bc:	80 91 28 02 	lds	r24, 0x0228
    53c0:	89 83       	std	Y+1, r24	; 0x01
    53c2:	12 c0       	rjmp	.+36     	; 0x53e8 <Local_voidCalCulator+0x1f8>
			{
				Global_Au8NumberRepresentation[Local_u8Iter] = Global_Au8NumberRepresentation[Local_u8Iter + 1];
    53c4:	89 81       	ldd	r24, Y+1	; 0x01
    53c6:	28 2f       	mov	r18, r24
    53c8:	30 e0       	ldi	r19, 0x00	; 0
    53ca:	89 81       	ldd	r24, Y+1	; 0x01
    53cc:	88 2f       	mov	r24, r24
    53ce:	90 e0       	ldi	r25, 0x00	; 0
    53d0:	01 96       	adiw	r24, 0x01	; 1
    53d2:	fc 01       	movw	r30, r24
    53d4:	ee 57       	subi	r30, 0x7E	; 126
    53d6:	fd 4f       	sbci	r31, 0xFD	; 253
    53d8:	80 81       	ld	r24, Z
    53da:	f9 01       	movw	r30, r18
    53dc:	ee 57       	subi	r30, 0x7E	; 126
    53de:	fd 4f       	sbci	r31, 0xFD	; 253
    53e0:	80 83       	st	Z, r24
				if(Get_Bit(Global_u16Flags, last_is_oct)  && !(Global_u8PressedKey >= '0'  && Global_u8PressedKey <= '7')) Set_Bit(Global_u16Flags, syntax_error);
				if(Get_Bit(Global_u16Flags, last_is_bin)  &&  (Global_u8PressedKey != '0'  && Global_u8PressedKey != '1')) Set_Bit(Global_u16Flags, syntax_error);
			}

			LCD_enuDisplayChar(Global_u8PressedKey);
			for(u8 Local_u8Iter = Global_s8IterOfNumberRepres; Local_u8Iter < NUM_OF_BITS - 1; ++Local_u8Iter)
    53e2:	89 81       	ldd	r24, Y+1	; 0x01
    53e4:	8f 5f       	subi	r24, 0xFF	; 255
    53e6:	89 83       	std	Y+1, r24	; 0x01
    53e8:	89 81       	ldd	r24, Y+1	; 0x01
    53ea:	8f 30       	cpi	r24, 0x0F	; 15
    53ec:	58 f3       	brcs	.-42     	; 0x53c4 <Local_voidCalCulator+0x1d4>
			{
				Global_Au8NumberRepresentation[Local_u8Iter] = Global_Au8NumberRepresentation[Local_u8Iter + 1];
			}
			Global_Au8NumberRepresentation[NUM_OF_BITS - 1] = Global_u8PressedKey;
    53ee:	80 91 31 02 	lds	r24, 0x0231
    53f2:	80 93 91 02 	sts	0x0291, r24
			Global_s8IterOfNumberRepres--;
    53f6:	80 91 28 02 	lds	r24, 0x0228
    53fa:	81 50       	subi	r24, 0x01	; 1
    53fc:	80 93 28 02 	sts	0x0228, r24
    5400:	11 cf       	rjmp	.-478    	; 0x5224 <Local_voidCalCulator+0x34>
		}
		else if(Global_u8PressedKey >= '0' && Global_u8PressedKey <= '9') // Take Operands in deci.
    5402:	80 91 31 02 	lds	r24, 0x0231
    5406:	80 33       	cpi	r24, 0x30	; 48
    5408:	38 f0       	brcs	.+14     	; 0x5418 <Local_voidCalCulator+0x228>
    540a:	80 91 31 02 	lds	r24, 0x0231
    540e:	8a 33       	cpi	r24, 0x3A	; 58
    5410:	18 f4       	brcc	.+6      	; 0x5418 <Local_voidCalCulator+0x228>
		{
			Local_voidGetOperand();
    5412:	0e 94 09 39 	call	0x7212	; 0x7212 <Local_voidGetOperand>
    5416:	06 cf       	rjmp	.-500    	; 0x5224 <Local_voidCalCulator+0x34>
		}
		else if(Global_u8PressedKey == '.') // Take dot and set flag dot..
    5418:	80 91 31 02 	lds	r24, 0x0231
    541c:	8e 32       	cpi	r24, 0x2E	; 46
    541e:	d1 f4       	brne	.+52     	; 0x5454 <Local_voidCalCulator+0x264>
		{
			LCD_enuDisplayChar(Global_u8PressedKey);
    5420:	80 91 31 02 	lds	r24, 0x0231
    5424:	0e 94 60 20 	call	0x40c0	; 0x40c0 <LCD_enuDisplayChar>
			Set_Bit(Global_u16Flags, dot);
    5428:	80 91 3d 02 	lds	r24, 0x023D
    542c:	90 91 3e 02 	lds	r25, 0x023E
    5430:	82 60       	ori	r24, 0x02	; 2
    5432:	90 93 3e 02 	sts	0x023E, r25
    5436:	80 93 3d 02 	sts	0x023D, r24
			Local_u8DotCalc = 10.0;
    543a:	80 e0       	ldi	r24, 0x00	; 0
    543c:	90 e0       	ldi	r25, 0x00	; 0
    543e:	a0 e2       	ldi	r26, 0x20	; 32
    5440:	b1 e4       	ldi	r27, 0x41	; 65
    5442:	80 93 29 02 	sts	0x0229, r24
    5446:	90 93 2a 02 	sts	0x022A, r25
    544a:	a0 93 2b 02 	sts	0x022B, r26
    544e:	b0 93 2c 02 	sts	0x022C, r27
    5452:	e8 ce       	rjmp	.-560    	; 0x5224 <Local_voidCalCulator+0x34>
		}
		else if(Global_u8PressedKey == '?') // Set Answer and Display "ANS"..
    5454:	80 91 31 02 	lds	r24, 0x0231
    5458:	8f 33       	cpi	r24, 0x3F	; 63
    545a:	19 f4       	brne	.+6      	; 0x5462 <Local_voidCalCulator+0x272>
		{
			Local_SetAnswer();
    545c:	0e 94 2f 3c 	call	0x785e	; 0x785e <Local_SetAnswer>
    5460:	e1 ce       	rjmp	.-574    	; 0x5224 <Local_voidCalCulator+0x34>
		else
		{

			//Clr_Bit(Global_u16Flags, negative); Clr_Bit(Global_u16Flags, dot);

			if(Get_Bit(Global_u16Flags, High_Pre))
    5462:	80 91 3d 02 	lds	r24, 0x023D
    5466:	90 91 3e 02 	lds	r25, 0x023E
    546a:	80 72       	andi	r24, 0x20	; 32
    546c:	90 70       	andi	r25, 0x00	; 0
    546e:	00 97       	sbiw	r24, 0x00	; 0
    5470:	e1 f0       	breq	.+56     	; 0x54aa <Local_voidCalCulator+0x2ba>
			{
				if(Global_u8PressedKey == '-' && Get_Bit(Global_u16Flags, last_is_op))
    5472:	80 91 31 02 	lds	r24, 0x0231
    5476:	8d 32       	cpi	r24, 0x2D	; 45
    5478:	b1 f4       	brne	.+44     	; 0x54a6 <Local_voidCalCulator+0x2b6>
    547a:	80 91 3d 02 	lds	r24, 0x023D
    547e:	90 91 3e 02 	lds	r25, 0x023E
    5482:	80 71       	andi	r24, 0x10	; 16
    5484:	90 70       	andi	r25, 0x00	; 0
    5486:	00 97       	sbiw	r24, 0x00	; 0
    5488:	71 f0       	breq	.+28     	; 0x54a6 <Local_voidCalCulator+0x2b6>
				{
					LCD_enuDisplayChar(Global_u8PressedKey);
    548a:	80 91 31 02 	lds	r24, 0x0231
    548e:	0e 94 60 20 	call	0x40c0	; 0x40c0 <LCD_enuDisplayChar>
					Set_Bit(Global_u16Flags, negative);
    5492:	80 91 3d 02 	lds	r24, 0x023D
    5496:	90 91 3e 02 	lds	r25, 0x023E
    549a:	81 60       	ori	r24, 0x01	; 1
    549c:	90 93 3e 02 	sts	0x023E, r25
    54a0:	80 93 3d 02 	sts	0x023D, r24
    54a4:	bf ce       	rjmp	.-642    	; 0x5224 <Local_voidCalCulator+0x34>
					continue;
				}
				Local_voidCalculateFunctions();// Calculate Specific functions..
    54a6:	0e 94 38 33 	call	0x6670	; 0x6670 <Local_voidCalculateFunctions>
			}

			if(Global_u8PressedKey == '-')
    54aa:	80 91 31 02 	lds	r24, 0x0231
    54ae:	8d 32       	cpi	r24, 0x2D	; 45
    54b0:	11 f5       	brne	.+68     	; 0x54f6 <Local_voidCalCulator+0x306>
			{
				LCD_enuDisplayChar(Global_u8PressedKey);
    54b2:	80 91 31 02 	lds	r24, 0x0231
    54b6:	0e 94 60 20 	call	0x40c0	; 0x40c0 <LCD_enuDisplayChar>
				if(Get_Bit(Global_u16Flags, last_is_op) || (!Get_Bit(Global_u16Flags, last_is_num) && !Global_s8Op_Iterator)) // Check the number is negative or not..
    54ba:	80 91 3d 02 	lds	r24, 0x023D
    54be:	90 91 3e 02 	lds	r25, 0x023E
    54c2:	80 71       	andi	r24, 0x10	; 16
    54c4:	90 70       	andi	r25, 0x00	; 0
    54c6:	00 97       	sbiw	r24, 0x00	; 0
    54c8:	61 f4       	brne	.+24     	; 0x54e2 <Local_voidCalCulator+0x2f2>
    54ca:	80 91 3d 02 	lds	r24, 0x023D
    54ce:	90 91 3e 02 	lds	r25, 0x023E
    54d2:	88 70       	andi	r24, 0x08	; 8
    54d4:	90 70       	andi	r25, 0x00	; 0
    54d6:	00 97       	sbiw	r24, 0x00	; 0
    54d8:	71 f4       	brne	.+28     	; 0x54f6 <Local_voidCalCulator+0x306>
    54da:	80 91 3f 02 	lds	r24, 0x023F
    54de:	88 23       	and	r24, r24
    54e0:	51 f4       	brne	.+20     	; 0x54f6 <Local_voidCalCulator+0x306>
				{
					Set_Bit(Global_u16Flags, negative);
    54e2:	80 91 3d 02 	lds	r24, 0x023D
    54e6:	90 91 3e 02 	lds	r25, 0x023E
    54ea:	81 60       	ori	r24, 0x01	; 1
    54ec:	90 93 3e 02 	sts	0x023E, r25
    54f0:	80 93 3d 02 	sts	0x023D, r24
    54f4:	97 ce       	rjmp	.-722    	; 0x5224 <Local_voidCalCulator+0x34>
					continue;
				}
			}

			if(Get_Bit(Global_u16Flags, High_Pre)) Local_voidCalculateFunctions();// Calculate Specific functions..
    54f6:	80 91 3d 02 	lds	r24, 0x023D
    54fa:	90 91 3e 02 	lds	r25, 0x023E
    54fe:	80 72       	andi	r24, 0x20	; 32
    5500:	90 70       	andi	r25, 0x00	; 0
    5502:	00 97       	sbiw	r24, 0x00	; 0
    5504:	11 f0       	breq	.+4      	; 0x550a <Local_voidCalCulator+0x31a>
    5506:	0e 94 38 33 	call	0x6670	; 0x6670 <Local_voidCalculateFunctions>

			if(Global_u8PressedKey == '+')
    550a:	80 91 31 02 	lds	r24, 0x0231
    550e:	8b 32       	cpi	r24, 0x2B	; 43
    5510:	d1 f4       	brne	.+52     	; 0x5546 <Local_voidCalCulator+0x356>
			{
				LCD_enuDisplayChar(Global_u8PressedKey);
    5512:	80 91 31 02 	lds	r24, 0x0231
    5516:	0e 94 60 20 	call	0x40c0	; 0x40c0 <LCD_enuDisplayChar>
				if(Get_Bit(Global_u16Flags, last_is_op) || (!Get_Bit(Global_u16Flags, last_is_num) && !Global_s8Op_Iterator)) // Check the number is negative or not..
    551a:	80 91 3d 02 	lds	r24, 0x023D
    551e:	90 91 3e 02 	lds	r25, 0x023E
    5522:	80 71       	andi	r24, 0x10	; 16
    5524:	90 70       	andi	r25, 0x00	; 0
    5526:	00 97       	sbiw	r24, 0x00	; 0
    5528:	09 f0       	breq	.+2      	; 0x552c <Local_voidCalCulator+0x33c>
    552a:	7c ce       	rjmp	.-776    	; 0x5224 <Local_voidCalCulator+0x34>
    552c:	80 91 3d 02 	lds	r24, 0x023D
    5530:	90 91 3e 02 	lds	r25, 0x023E
    5534:	88 70       	andi	r24, 0x08	; 8
    5536:	90 70       	andi	r25, 0x00	; 0
    5538:	00 97       	sbiw	r24, 0x00	; 0
    553a:	29 f4       	brne	.+10     	; 0x5546 <Local_voidCalCulator+0x356>
    553c:	80 91 3f 02 	lds	r24, 0x023F
    5540:	88 23       	and	r24, r24
    5542:	09 f4       	brne	.+2      	; 0x5546 <Local_voidCalCulator+0x356>
    5544:	6f ce       	rjmp	.-802    	; 0x5224 <Local_voidCalCulator+0x34>
				{
					continue;
				}
			}
			Clr_Bit(Global_u16Flags, negative); Clr_Bit(Global_u16Flags, dot);
    5546:	80 91 3d 02 	lds	r24, 0x023D
    554a:	90 91 3e 02 	lds	r25, 0x023E
    554e:	8e 7f       	andi	r24, 0xFE	; 254
    5550:	90 93 3e 02 	sts	0x023E, r25
    5554:	80 93 3d 02 	sts	0x023D, r24
    5558:	80 91 3d 02 	lds	r24, 0x023D
    555c:	90 91 3e 02 	lds	r25, 0x023E
    5560:	8d 7f       	andi	r24, 0xFD	; 253
    5562:	90 93 3e 02 	sts	0x023E, r25
    5566:	80 93 3d 02 	sts	0x023D, r24

			Set_Bit(Global_u16Flags, last_is_op); Clr_Bit(Global_u16Flags, last_is_num);
    556a:	80 91 3d 02 	lds	r24, 0x023D
    556e:	90 91 3e 02 	lds	r25, 0x023E
    5572:	80 61       	ori	r24, 0x10	; 16
    5574:	90 93 3e 02 	sts	0x023E, r25
    5578:	80 93 3d 02 	sts	0x023D, r24
    557c:	80 91 3d 02 	lds	r24, 0x023D
    5580:	90 91 3e 02 	lds	r25, 0x023E
    5584:	87 7f       	andi	r24, 0xF7	; 247
    5586:	90 93 3e 02 	sts	0x023E, r25
    558a:	80 93 3d 02 	sts	0x023D, r24

			if(Global_u8PressedKey >= 'G' && Global_u8PressedKey <= 'S') Local_voidDisplayFunction(); // Display Specific functions..
    558e:	80 91 31 02 	lds	r24, 0x0231
    5592:	87 34       	cpi	r24, 0x47	; 71
    5594:	30 f0       	brcs	.+12     	; 0x55a2 <Local_voidCalCulator+0x3b2>
    5596:	80 91 31 02 	lds	r24, 0x0231
    559a:	84 35       	cpi	r24, 0x54	; 84
    559c:	10 f4       	brcc	.+4      	; 0x55a2 <Local_voidCalCulator+0x3b2>
    559e:	0e 94 61 38 	call	0x70c2	; 0x70c2 <Local_voidDisplayFunction>

			// set last is operator and clear that last is number
			if(Global_u8PressedKey != '=')
    55a2:	80 91 31 02 	lds	r24, 0x0231
    55a6:	8d 33       	cpi	r24, 0x3D	; 61
    55a8:	81 f0       	breq	.+32     	; 0x55ca <Local_voidCalCulator+0x3da>
			{
				Global_u8Operators[Global_s8Op_Iterator] = Global_u8PressedKey; // Set operator in operators array..
    55aa:	80 91 3f 02 	lds	r24, 0x023F
    55ae:	99 27       	eor	r25, r25
    55b0:	87 fd       	sbrc	r24, 7
    55b2:	90 95       	com	r25
    55b4:	20 91 31 02 	lds	r18, 0x0231
    55b8:	fc 01       	movw	r30, r24
    55ba:	e9 58       	subi	r30, 0x89	; 137
    55bc:	fd 4f       	sbci	r31, 0xFD	; 253
    55be:	20 83       	st	Z, r18
				Global_s8Op_Iterator++;
    55c0:	80 91 3f 02 	lds	r24, 0x023F
    55c4:	8f 5f       	subi	r24, 0xFF	; 255
    55c6:	80 93 3f 02 	sts	0x023F, r24
			}


			if(Global_u8PressedKey >= 'C' && Global_u8PressedKey <= 'F') { Local_voidNumberRepresentation(); continue; } // Number Representation
    55ca:	80 91 31 02 	lds	r24, 0x0231
    55ce:	83 34       	cpi	r24, 0x43	; 67
    55d0:	38 f0       	brcs	.+14     	; 0x55e0 <Local_voidCalCulator+0x3f0>
    55d2:	80 91 31 02 	lds	r24, 0x0231
    55d6:	87 34       	cpi	r24, 0x47	; 71
    55d8:	18 f4       	brcc	.+6      	; 0x55e0 <Local_voidCalCulator+0x3f0>
    55da:	0e 94 71 2f 	call	0x5ee2	; 0x5ee2 <Local_voidNumberRepresentation>
    55de:	22 ce       	rjmp	.-956    	; 0x5224 <Local_voidCalCulator+0x34>

			if(Global_u8PressedKey != '=') { Clr_Bit(Global_u16Flags, number_repres); Clr_Bit(Global_u16Flags, alpha);}
    55e0:	80 91 31 02 	lds	r24, 0x0231
    55e4:	8d 33       	cpi	r24, 0x3D	; 61
    55e6:	91 f0       	breq	.+36     	; 0x560c <Local_voidCalCulator+0x41c>
    55e8:	80 91 3d 02 	lds	r24, 0x023D
    55ec:	90 91 3e 02 	lds	r25, 0x023E
    55f0:	8f 77       	andi	r24, 0x7F	; 127
    55f2:	90 93 3e 02 	sts	0x023E, r25
    55f6:	80 93 3d 02 	sts	0x023D, r24
    55fa:	80 91 3d 02 	lds	r24, 0x023D
    55fe:	90 91 3e 02 	lds	r25, 0x023E
    5602:	9e 7f       	andi	r25, 0xFE	; 254
    5604:	90 93 3e 02 	sts	0x023E, r25
    5608:	80 93 3d 02 	sts	0x023D, r24

			if(Global_u8PressedKey == 'n') Local_ClearDiplayedText();  // Clear displayed text..
    560c:	80 91 31 02 	lds	r24, 0x0231
    5610:	8e 36       	cpi	r24, 0x6E	; 110
    5612:	19 f4       	brne	.+6      	; 0x561a <Local_voidCalCulator+0x42a>
    5614:	0e 94 9b 2b 	call	0x5736	; 0x5736 <Local_ClearDiplayedText>
    5618:	05 ce       	rjmp	.-1014   	; 0x5224 <Local_voidCalCulator+0x34>

			else if(Global_u8PressedKey == '=') { Local_voidDisplayOutput();}// Calculate Output and display it..
    561a:	80 91 31 02 	lds	r24, 0x0231
    561e:	8d 33       	cpi	r24, 0x3D	; 61
    5620:	19 f4       	brne	.+6      	; 0x5628 <Local_voidCalCulator+0x438>
    5622:	0e 94 e5 2b 	call	0x57ca	; 0x57ca <Local_voidDisplayOutput>
    5626:	fe cd       	rjmp	.-1028   	; 0x5224 <Local_voidCalCulator+0x34>

			else if(Global_u8PressedKey == 'X' || Global_u8PressedKey == '/') // Display mul. operator or div. operator
    5628:	80 91 31 02 	lds	r24, 0x0231
    562c:	88 35       	cpi	r24, 0x58	; 88
    562e:	29 f0       	breq	.+10     	; 0x563a <Local_voidCalCulator+0x44a>
    5630:	80 91 31 02 	lds	r24, 0x0231
    5634:	8f 32       	cpi	r24, 0x2F	; 47
    5636:	09 f0       	breq	.+2      	; 0x563a <Local_voidCalCulator+0x44a>
    5638:	f5 cd       	rjmp	.-1046   	; 0x5224 <Local_voidCalCulator+0x34>
			{
				LCD_enuDisplayChar(Global_u8PressedKey);
    563a:	80 91 31 02 	lds	r24, 0x0231
    563e:	0e 94 60 20 	call	0x40c0	; 0x40c0 <LCD_enuDisplayChar>
    5642:	f0 cd       	rjmp	.-1056   	; 0x5224 <Local_voidCalCulator+0x34>

00005644 <Local_voidShiftText>:
		}
	}
}

void Local_voidShiftText(void)
{
    5644:	df 93       	push	r29
    5646:	cf 93       	push	r28
    5648:	cd b7       	in	r28, 0x3d	; 61
    564a:	de b7       	in	r29, 0x3e	; 62
	if( (Global_u8PressedKey >= 'L' && Global_u8PressedKey <= 'Q') || Global_u8PressedKey == 'H') Global_u8ShiftIter += 5;
    564c:	80 91 31 02 	lds	r24, 0x0231
    5650:	8c 34       	cpi	r24, 0x4C	; 76
    5652:	20 f0       	brcs	.+8      	; 0x565c <Local_voidShiftText+0x18>
    5654:	80 91 31 02 	lds	r24, 0x0231
    5658:	82 35       	cpi	r24, 0x52	; 82
    565a:	20 f0       	brcs	.+8      	; 0x5664 <Local_voidShiftText+0x20>
    565c:	80 91 31 02 	lds	r24, 0x0231
    5660:	88 34       	cpi	r24, 0x48	; 72
    5662:	29 f4       	brne	.+10     	; 0x566e <Local_voidShiftText+0x2a>
    5664:	80 91 40 02 	lds	r24, 0x0240
    5668:	8b 5f       	subi	r24, 0xFB	; 251
    566a:	80 93 40 02 	sts	0x0240, r24

	if( (Global_u8PressedKey >= '0' && Global_u8PressedKey <= '9')
    566e:	80 91 31 02 	lds	r24, 0x0231
    5672:	80 33       	cpi	r24, 0x30	; 48
    5674:	20 f0       	brcs	.+8      	; 0x567e <Local_voidShiftText+0x3a>
    5676:	80 91 31 02 	lds	r24, 0x0231
    567a:	8a 33       	cpi	r24, 0x3A	; 58
    567c:	c0 f0       	brcs	.+48     	; 0x56ae <Local_voidShiftText+0x6a>
    567e:	80 91 31 02 	lds	r24, 0x0231
    5682:	8b 32       	cpi	r24, 0x2B	; 43
    5684:	a1 f0       	breq	.+40     	; 0x56ae <Local_voidShiftText+0x6a>
    5686:	80 91 31 02 	lds	r24, 0x0231
    568a:	8d 32       	cpi	r24, 0x2D	; 45
    568c:	81 f0       	breq	.+32     	; 0x56ae <Local_voidShiftText+0x6a>
    568e:	80 91 31 02 	lds	r24, 0x0231
    5692:	88 35       	cpi	r24, 0x58	; 88
    5694:	61 f0       	breq	.+24     	; 0x56ae <Local_voidShiftText+0x6a>
    5696:	80 91 31 02 	lds	r24, 0x0231
    569a:	8f 32       	cpi	r24, 0x2F	; 47
    569c:	41 f0       	breq	.+16     	; 0x56ae <Local_voidShiftText+0x6a>
    569e:	80 91 31 02 	lds	r24, 0x0231
    56a2:	82 35       	cpi	r24, 0x52	; 82
    56a4:	21 f0       	breq	.+8      	; 0x56ae <Local_voidShiftText+0x6a>
    56a6:	80 91 31 02 	lds	r24, 0x0231
    56aa:	8e 32       	cpi	r24, 0x2E	; 46
    56ac:	31 f4       	brne	.+12     	; 0x56ba <Local_voidShiftText+0x76>
			|| Global_u8PressedKey == '+' || Global_u8PressedKey == '-'
					|| Global_u8PressedKey == 'X' || Global_u8PressedKey == '/'
							|| Global_u8PressedKey == 'R' || Global_u8PressedKey == '.'	) Global_u8ShiftIter++;
    56ae:	80 91 40 02 	lds	r24, 0x0240
    56b2:	8f 5f       	subi	r24, 0xFF	; 255
    56b4:	80 93 40 02 	sts	0x0240, r24
    56b8:	25 c0       	rjmp	.+74     	; 0x5704 <Local_voidShiftText+0xc0>

	else if(Global_u8PressedKey == '?') Global_u8ShiftIter += 3;
    56ba:	80 91 31 02 	lds	r24, 0x0231
    56be:	8f 33       	cpi	r24, 0x3F	; 63
    56c0:	31 f4       	brne	.+12     	; 0x56ce <Local_voidShiftText+0x8a>
    56c2:	80 91 40 02 	lds	r24, 0x0240
    56c6:	8d 5f       	subi	r24, 0xFD	; 253
    56c8:	80 93 40 02 	sts	0x0240, r24
    56cc:	1b c0       	rjmp	.+54     	; 0x5704 <Local_voidShiftText+0xc0>
	else if(Global_u8PressedKey == 'S' || Global_u8PressedKey == 'G') Global_u8ShiftIter += 2;
    56ce:	80 91 31 02 	lds	r24, 0x0231
    56d2:	83 35       	cpi	r24, 0x53	; 83
    56d4:	21 f0       	breq	.+8      	; 0x56de <Local_voidShiftText+0x9a>
    56d6:	80 91 31 02 	lds	r24, 0x0231
    56da:	87 34       	cpi	r24, 0x47	; 71
    56dc:	31 f4       	brne	.+12     	; 0x56ea <Local_voidShiftText+0xa6>
    56de:	80 91 40 02 	lds	r24, 0x0240
    56e2:	8e 5f       	subi	r24, 0xFE	; 254
    56e4:	80 93 40 02 	sts	0x0240, r24
    56e8:	0d c0       	rjmp	.+26     	; 0x5704 <Local_voidShiftText+0xc0>
	else if(Global_u8PressedKey >= 'I' && Global_u8PressedKey <= 'K') Global_u8ShiftIter += 4;
    56ea:	80 91 31 02 	lds	r24, 0x0231
    56ee:	89 34       	cpi	r24, 0x49	; 73
    56f0:	48 f0       	brcs	.+18     	; 0x5704 <Local_voidShiftText+0xc0>
    56f2:	80 91 31 02 	lds	r24, 0x0231
    56f6:	8c 34       	cpi	r24, 0x4C	; 76
    56f8:	28 f4       	brcc	.+10     	; 0x5704 <Local_voidShiftText+0xc0>
    56fa:	80 91 40 02 	lds	r24, 0x0240
    56fe:	8c 5f       	subi	r24, 0xFC	; 252
    5700:	80 93 40 02 	sts	0x0240, r24

	if(Global_u8ShiftIter > 16)
    5704:	80 91 40 02 	lds	r24, 0x0240
    5708:	81 31       	cpi	r24, 0x11	; 17
    570a:	94 f0       	brlt	.+36     	; 0x5730 <Local_voidShiftText+0xec>
    570c:	0d c0       	rjmp	.+26     	; 0x5728 <Local_voidShiftText+0xe4>
	{
		for(; Global_u8ShiftIter > 16; --Global_u8ShiftIter)
		{
			LCD_enuSendCommand(LEFT_SHIFT);
    570e:	88 e1       	ldi	r24, 0x18	; 24
    5710:	0e 94 89 20 	call	0x4112	; 0x4112 <LCD_enuSendCommand>
			Global_u8CountingLeftShift++;
    5714:	80 91 41 02 	lds	r24, 0x0241
    5718:	8f 5f       	subi	r24, 0xFF	; 255
    571a:	80 93 41 02 	sts	0x0241, r24
	else if(Global_u8PressedKey == 'S' || Global_u8PressedKey == 'G') Global_u8ShiftIter += 2;
	else if(Global_u8PressedKey >= 'I' && Global_u8PressedKey <= 'K') Global_u8ShiftIter += 4;

	if(Global_u8ShiftIter > 16)
	{
		for(; Global_u8ShiftIter > 16; --Global_u8ShiftIter)
    571e:	80 91 40 02 	lds	r24, 0x0240
    5722:	81 50       	subi	r24, 0x01	; 1
    5724:	80 93 40 02 	sts	0x0240, r24
    5728:	80 91 40 02 	lds	r24, 0x0240
    572c:	81 31       	cpi	r24, 0x11	; 17
    572e:	7c f7       	brge	.-34     	; 0x570e <Local_voidShiftText+0xca>
		{
			LCD_enuSendCommand(LEFT_SHIFT);
			Global_u8CountingLeftShift++;
		}
	}
}
    5730:	cf 91       	pop	r28
    5732:	df 91       	pop	r29
    5734:	08 95       	ret

00005736 <Local_ClearDiplayedText>:


void Local_ClearDiplayedText(void)
{
    5736:	df 93       	push	r29
    5738:	cf 93       	push	r28
    573a:	cd b7       	in	r28, 0x3d	; 61
    573c:	de b7       	in	r29, 0x3e	; 62
	LCD_enuClearDisplay(); // Clear Displayed Text on screen
    573e:	0e 94 79 20 	call	0x40f2	; 0x40f2 <LCD_enuClearDisplay>
	Local_voidClrArray(Global_Af32Operands, NUM_OF_OPERANDS); // Clear Operands array to use it again..
    5742:	87 e4       	ldi	r24, 0x47	; 71
    5744:	92 e0       	ldi	r25, 0x02	; 2
    5746:	6c e0       	ldi	r22, 0x0C	; 12
    5748:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <Local_voidClrArray>
	Local_voidClrArray(Global_u8Operators, NUM_OF_OPERATORS); // Clear Operators array to use it again..
    574c:	87 e7       	ldi	r24, 0x77	; 119
    574e:	92 e0       	ldi	r25, 0x02	; 2
    5750:	6b e0       	ldi	r22, 0x0B	; 11
    5752:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <Local_voidClrArray>
	Local_voidClrArray(Global_Au8NumberRepresentation, NUM_OF_BITS); // Clear NumberRepresentation array to use it again..
    5756:	82 e8       	ldi	r24, 0x82	; 130
    5758:	92 e0       	ldi	r25, 0x02	; 2
    575a:	60 e1       	ldi	r22, 0x10	; 16
    575c:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <Local_voidClrArray>
	Global_s8Op_Iterator = 0, Global_s8Num_Iterator = -1;
    5760:	10 92 3f 02 	sts	0x023F, r1
    5764:	8f ef       	ldi	r24, 0xFF	; 255
    5766:	80 93 27 02 	sts	0x0227, r24
	if(Global_u8CountingLeftShift)
    576a:	80 91 41 02 	lds	r24, 0x0241
    576e:	88 23       	and	r24, r24
    5770:	69 f0       	breq	.+26     	; 0x578c <Local_ClearDiplayedText+0x56>
    5772:	08 c0       	rjmp	.+16     	; 0x5784 <Local_ClearDiplayedText+0x4e>
	{
		for(; Global_u8CountingLeftShift >= 0; --Global_u8CountingLeftShift) LCD_enuSendCommand(RIGHT_SHIFT); // Shift text to right
    5774:	8c e1       	ldi	r24, 0x1C	; 28
    5776:	0e 94 89 20 	call	0x4112	; 0x4112 <LCD_enuSendCommand>
    577a:	80 91 41 02 	lds	r24, 0x0241
    577e:	81 50       	subi	r24, 0x01	; 1
    5780:	80 93 41 02 	sts	0x0241, r24
    5784:	80 91 41 02 	lds	r24, 0x0241
    5788:	88 23       	and	r24, r24
    578a:	a4 f7       	brge	.-24     	; 0x5774 <Local_ClearDiplayedText+0x3e>
	}
	LCD_enuGoto(1, 0); // return cursor in 1st block in 1st line..
    578c:	81 e0       	ldi	r24, 0x01	; 1
    578e:	90 e0       	ldi	r25, 0x00	; 0
    5790:	60 e0       	ldi	r22, 0x00	; 0
    5792:	70 e0       	ldi	r23, 0x00	; 0
    5794:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_enuGoto>
	Global_u8ShiftIter = 0, Global_u8CountingLeftShift = 0;
    5798:	10 92 40 02 	sts	0x0240, r1
    579c:	10 92 41 02 	sts	0x0241, r1
	Clr_Bit(Global_u16Flags, last_is_op);
    57a0:	80 91 3d 02 	lds	r24, 0x023D
    57a4:	90 91 3e 02 	lds	r25, 0x023E
    57a8:	8f 7e       	andi	r24, 0xEF	; 239
    57aa:	90 93 3e 02 	sts	0x023E, r25
    57ae:	80 93 3d 02 	sts	0x023D, r24
	Clr_Bit(Global_u16Flags, last_is_num);
    57b2:	80 91 3d 02 	lds	r24, 0x023D
    57b6:	90 91 3e 02 	lds	r25, 0x023E
    57ba:	87 7f       	andi	r24, 0xF7	; 247
    57bc:	90 93 3e 02 	sts	0x023E, r25
    57c0:	80 93 3d 02 	sts	0x023D, r24
}
    57c4:	cf 91       	pop	r28
    57c6:	df 91       	pop	r29
    57c8:	08 95       	ret

000057ca <Local_voidDisplayOutput>:



void Local_voidDisplayOutput(void)
{
    57ca:	cf 92       	push	r12
    57cc:	df 92       	push	r13
    57ce:	ef 92       	push	r14
    57d0:	ff 92       	push	r15
    57d2:	0f 93       	push	r16
    57d4:	1f 93       	push	r17
    57d6:	df 93       	push	r29
    57d8:	cf 93       	push	r28
    57da:	cd b7       	in	r28, 0x3d	; 61
    57dc:	de b7       	in	r29, 0x3e	; 62
    57de:	2c 97       	sbiw	r28, 0x0c	; 12
    57e0:	0f b6       	in	r0, 0x3f	; 63
    57e2:	f8 94       	cli
    57e4:	de bf       	out	0x3e, r29	; 62
    57e6:	0f be       	out	0x3f, r0	; 63
    57e8:	cd bf       	out	0x3d, r28	; 61
	if(Get_Bit(Global_u16Flags, math_error)) { Local_voidMathError(); return; } // Check Math Error
    57ea:	80 91 3d 02 	lds	r24, 0x023D
    57ee:	90 91 3e 02 	lds	r25, 0x023E
    57f2:	84 70       	andi	r24, 0x04	; 4
    57f4:	90 70       	andi	r25, 0x00	; 0
    57f6:	00 97       	sbiw	r24, 0x00	; 0
    57f8:	19 f0       	breq	.+6      	; 0x5800 <Local_voidDisplayOutput+0x36>
    57fa:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <Local_voidMathError>
    57fe:	62 c3       	rjmp	.+1732   	; 0x5ec4 <Local_voidDisplayOutput+0x6fa>

	else if(Get_Bit(Global_u16Flags, syntax_error)) { Local_voidSyntaxError(); return; }// Check Syntax Error
    5800:	80 91 3d 02 	lds	r24, 0x023D
    5804:	90 91 3e 02 	lds	r25, 0x023E
    5808:	80 70       	andi	r24, 0x00	; 0
    580a:	90 72       	andi	r25, 0x20	; 32
    580c:	00 97       	sbiw	r24, 0x00	; 0
    580e:	19 f0       	breq	.+6      	; 0x5816 <Local_voidDisplayOutput+0x4c>
    5810:	0e 94 8b 3b 	call	0x7716	; 0x7716 <Local_voidSyntaxError>
    5814:	57 c3       	rjmp	.+1710   	; 0x5ec4 <Local_voidDisplayOutput+0x6fa>

	else if(Get_Bit(Global_u16Flags, number_repres)) // Display number representation mode
    5816:	80 91 3d 02 	lds	r24, 0x023D
    581a:	90 91 3e 02 	lds	r25, 0x023E
    581e:	80 78       	andi	r24, 0x80	; 128
    5820:	90 70       	andi	r25, 0x00	; 0
    5822:	00 97       	sbiw	r24, 0x00	; 0
    5824:	09 f4       	brne	.+2      	; 0x5828 <Local_voidDisplayOutput+0x5e>
    5826:	6b c0       	rjmp	.+214    	; 0x58fe <Local_voidDisplayOutput+0x134>
	{
		LCD_enuGoto(2,0);
    5828:	82 e0       	ldi	r24, 0x02	; 2
    582a:	90 e0       	ldi	r25, 0x00	; 0
    582c:	60 e0       	ldi	r22, 0x00	; 0
    582e:	70 e0       	ldi	r23, 0x00	; 0
    5830:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_enuGoto>
		if(Global_u8TypeOfNumber == 'C')
    5834:	80 91 42 02 	lds	r24, 0x0242
    5838:	83 34       	cpi	r24, 0x43	; 67
    583a:	09 f0       	breq	.+2      	; 0x583e <Local_voidDisplayOutput+0x74>
    583c:	4f c0       	rjmp	.+158    	; 0x58dc <Local_voidDisplayOutput+0x112>
		{
			u32 tmp = Global_Af32Operands[0];
    583e:	80 91 47 02 	lds	r24, 0x0247
    5842:	90 91 48 02 	lds	r25, 0x0248
    5846:	a0 91 49 02 	lds	r26, 0x0249
    584a:	b0 91 4a 02 	lds	r27, 0x024A
    584e:	bc 01       	movw	r22, r24
    5850:	cd 01       	movw	r24, r26
    5852:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    5856:	dc 01       	movw	r26, r24
    5858:	cb 01       	movw	r24, r22
    585a:	89 87       	std	Y+9, r24	; 0x09
    585c:	9a 87       	std	Y+10, r25	; 0x0a
    585e:	ab 87       	std	Y+11, r26	; 0x0b
    5860:	bc 87       	std	Y+12, r27	; 0x0c
			u8 cnt = 0;
    5862:	18 86       	std	Y+8, r1	; 0x08
    5864:	18 c0       	rjmp	.+48     	; 0x5896 <Local_voidDisplayOutput+0xcc>
			while(tmp) // calculate number of digits
			{
				tmp/=10;
    5866:	89 85       	ldd	r24, Y+9	; 0x09
    5868:	9a 85       	ldd	r25, Y+10	; 0x0a
    586a:	ab 85       	ldd	r26, Y+11	; 0x0b
    586c:	bc 85       	ldd	r27, Y+12	; 0x0c
    586e:	2a e0       	ldi	r18, 0x0A	; 10
    5870:	30 e0       	ldi	r19, 0x00	; 0
    5872:	40 e0       	ldi	r20, 0x00	; 0
    5874:	50 e0       	ldi	r21, 0x00	; 0
    5876:	bc 01       	movw	r22, r24
    5878:	cd 01       	movw	r24, r26
    587a:	0e 94 86 3c 	call	0x790c	; 0x790c <__udivmodsi4>
    587e:	da 01       	movw	r26, r20
    5880:	c9 01       	movw	r24, r18
    5882:	89 87       	std	Y+9, r24	; 0x09
    5884:	9a 87       	std	Y+10, r25	; 0x0a
    5886:	ab 87       	std	Y+11, r26	; 0x0b
    5888:	bc 87       	std	Y+12, r27	; 0x0c
				cnt++;
    588a:	88 85       	ldd	r24, Y+8	; 0x08
    588c:	8f 5f       	subi	r24, 0xFF	; 255
    588e:	88 87       	std	Y+8, r24	; 0x08
				LCD_enuDisplayChar(' ');
    5890:	80 e2       	ldi	r24, 0x20	; 32
    5892:	0e 94 60 20 	call	0x40c0	; 0x40c0 <LCD_enuDisplayChar>
		LCD_enuGoto(2,0);
		if(Global_u8TypeOfNumber == 'C')
		{
			u32 tmp = Global_Af32Operands[0];
			u8 cnt = 0;
			while(tmp) // calculate number of digits
    5896:	89 85       	ldd	r24, Y+9	; 0x09
    5898:	9a 85       	ldd	r25, Y+10	; 0x0a
    589a:	ab 85       	ldd	r26, Y+11	; 0x0b
    589c:	bc 85       	ldd	r27, Y+12	; 0x0c
    589e:	00 97       	sbiw	r24, 0x00	; 0
    58a0:	a1 05       	cpc	r26, r1
    58a2:	b1 05       	cpc	r27, r1
    58a4:	01 f7       	brne	.-64     	; 0x5866 <Local_voidDisplayOutput+0x9c>
			{
				tmp/=10;
				cnt++;
				LCD_enuDisplayChar(' ');
			}
			LCD_enuGoto(2, 16 - cnt); // leave number of digits from blocks
    58a6:	88 85       	ldd	r24, Y+8	; 0x08
    58a8:	28 2f       	mov	r18, r24
    58aa:	30 e0       	ldi	r19, 0x00	; 0
    58ac:	80 e1       	ldi	r24, 0x10	; 16
    58ae:	90 e0       	ldi	r25, 0x00	; 0
    58b0:	ac 01       	movw	r20, r24
    58b2:	42 1b       	sub	r20, r18
    58b4:	53 0b       	sbc	r21, r19
    58b6:	9a 01       	movw	r18, r20
    58b8:	82 e0       	ldi	r24, 0x02	; 2
    58ba:	90 e0       	ldi	r25, 0x00	; 0
    58bc:	b9 01       	movw	r22, r18
    58be:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_enuGoto>
			LCD_enuWriteNumber(Global_Af32Operands[0]);
    58c2:	80 91 47 02 	lds	r24, 0x0247
    58c6:	90 91 48 02 	lds	r25, 0x0248
    58ca:	a0 91 49 02 	lds	r26, 0x0249
    58ce:	b0 91 4a 02 	lds	r27, 0x024A
    58d2:	bc 01       	movw	r22, r24
    58d4:	cd 01       	movw	r24, r26
    58d6:	0e 94 30 21 	call	0x4260	; 0x4260 <LCD_enuWriteNumber>
    58da:	f4 c2       	rjmp	.+1512   	; 0x5ec4 <Local_voidDisplayOutput+0x6fa>
		}
		else { LCD_enuDisplayString(Global_Au8NumberRepresentation); Clr_Bit(Global_u16Flags, alpha); Global_s8IterOfNumberRepres = NUM_OF_BITS - 1;}//
    58dc:	82 e8       	ldi	r24, 0x82	; 130
    58de:	92 e0       	ldi	r25, 0x02	; 2
    58e0:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
    58e4:	80 91 3d 02 	lds	r24, 0x023D
    58e8:	90 91 3e 02 	lds	r25, 0x023E
    58ec:	9e 7f       	andi	r25, 0xFE	; 254
    58ee:	90 93 3e 02 	sts	0x023E, r25
    58f2:	80 93 3d 02 	sts	0x023D, r24
    58f6:	8f e0       	ldi	r24, 0x0F	; 15
    58f8:	80 93 28 02 	sts	0x0228, r24
    58fc:	e3 c2       	rjmp	.+1478   	; 0x5ec4 <Local_voidDisplayOutput+0x6fa>
	}
	else // 5^4 - 100 + sqrt(4) + 2 * cos(60)
	{
		s8 Local_u8Iter1, Local_u8Iter2;
		for(Local_u8Iter1 = 0; Local_u8Iter1 < NUM_OF_OPERATORS - 1; ++Local_u8Iter1) // Iterate all the elements and calculate all the multiplication and division operations
    58fe:	1f 82       	std	Y+7, r1	; 0x07
    5900:	1e c1       	rjmp	.+572    	; 0x5b3e <Local_voidDisplayOutput+0x374>
		{
			if(Global_u8Operators[Local_u8Iter1] == 'X' || Global_u8Operators[Local_u8Iter1] == '/')
    5902:	8f 81       	ldd	r24, Y+7	; 0x07
    5904:	99 27       	eor	r25, r25
    5906:	87 fd       	sbrc	r24, 7
    5908:	90 95       	com	r25
    590a:	fc 01       	movw	r30, r24
    590c:	e9 58       	subi	r30, 0x89	; 137
    590e:	fd 4f       	sbci	r31, 0xFD	; 253
    5910:	80 81       	ld	r24, Z
    5912:	88 35       	cpi	r24, 0x58	; 88
    5914:	59 f0       	breq	.+22     	; 0x592c <Local_voidDisplayOutput+0x162>
    5916:	8f 81       	ldd	r24, Y+7	; 0x07
    5918:	99 27       	eor	r25, r25
    591a:	87 fd       	sbrc	r24, 7
    591c:	90 95       	com	r25
    591e:	fc 01       	movw	r30, r24
    5920:	e9 58       	subi	r30, 0x89	; 137
    5922:	fd 4f       	sbci	r31, 0xFD	; 253
    5924:	80 81       	ld	r24, Z
    5926:	8f 32       	cpi	r24, 0x2F	; 47
    5928:	09 f0       	breq	.+2      	; 0x592c <Local_voidDisplayOutput+0x162>
    592a:	06 c1       	rjmp	.+524    	; 0x5b38 <Local_voidDisplayOutput+0x36e>
			{
				if(Global_u8Operators[Local_u8Iter1] == 'X') Global_Af32Operands[Local_u8Iter1] *= Global_Af32Operands[Local_u8Iter1 + 1]; // calculate  mul. operation and assign res.
    592c:	8f 81       	ldd	r24, Y+7	; 0x07
    592e:	99 27       	eor	r25, r25
    5930:	87 fd       	sbrc	r24, 7
    5932:	90 95       	com	r25
    5934:	fc 01       	movw	r30, r24
    5936:	e9 58       	subi	r30, 0x89	; 137
    5938:	fd 4f       	sbci	r31, 0xFD	; 253
    593a:	80 81       	ld	r24, Z
    593c:	88 35       	cpi	r24, 0x58	; 88
    593e:	c9 f5       	brne	.+114    	; 0x59b2 <Local_voidDisplayOutput+0x1e8>
    5940:	8f 81       	ldd	r24, Y+7	; 0x07
    5942:	c8 2e       	mov	r12, r24
    5944:	dd 24       	eor	r13, r13
    5946:	c7 fc       	sbrc	r12, 7
    5948:	d0 94       	com	r13
    594a:	8f 81       	ldd	r24, Y+7	; 0x07
    594c:	99 27       	eor	r25, r25
    594e:	87 fd       	sbrc	r24, 7
    5950:	90 95       	com	r25
    5952:	88 0f       	add	r24, r24
    5954:	99 1f       	adc	r25, r25
    5956:	88 0f       	add	r24, r24
    5958:	99 1f       	adc	r25, r25
    595a:	fc 01       	movw	r30, r24
    595c:	e9 5b       	subi	r30, 0xB9	; 185
    595e:	fd 4f       	sbci	r31, 0xFD	; 253
    5960:	e0 80       	ld	r14, Z
    5962:	f1 80       	ldd	r15, Z+1	; 0x01
    5964:	02 81       	ldd	r16, Z+2	; 0x02
    5966:	13 81       	ldd	r17, Z+3	; 0x03
    5968:	8f 81       	ldd	r24, Y+7	; 0x07
    596a:	99 27       	eor	r25, r25
    596c:	87 fd       	sbrc	r24, 7
    596e:	90 95       	com	r25
    5970:	01 96       	adiw	r24, 0x01	; 1
    5972:	88 0f       	add	r24, r24
    5974:	99 1f       	adc	r25, r25
    5976:	88 0f       	add	r24, r24
    5978:	99 1f       	adc	r25, r25
    597a:	fc 01       	movw	r30, r24
    597c:	e9 5b       	subi	r30, 0xB9	; 185
    597e:	fd 4f       	sbci	r31, 0xFD	; 253
    5980:	20 81       	ld	r18, Z
    5982:	31 81       	ldd	r19, Z+1	; 0x01
    5984:	42 81       	ldd	r20, Z+2	; 0x02
    5986:	53 81       	ldd	r21, Z+3	; 0x03
    5988:	c8 01       	movw	r24, r16
    598a:	b7 01       	movw	r22, r14
    598c:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    5990:	dc 01       	movw	r26, r24
    5992:	cb 01       	movw	r24, r22
    5994:	9c 01       	movw	r18, r24
    5996:	ad 01       	movw	r20, r26
    5998:	c6 01       	movw	r24, r12
    599a:	88 0f       	add	r24, r24
    599c:	99 1f       	adc	r25, r25
    599e:	88 0f       	add	r24, r24
    59a0:	99 1f       	adc	r25, r25
    59a2:	fc 01       	movw	r30, r24
    59a4:	e9 5b       	subi	r30, 0xB9	; 185
    59a6:	fd 4f       	sbci	r31, 0xFD	; 253
    59a8:	20 83       	st	Z, r18
    59aa:	31 83       	std	Z+1, r19	; 0x01
    59ac:	42 83       	std	Z+2, r20	; 0x02
    59ae:	53 83       	std	Z+3, r21	; 0x03
    59b0:	5e c0       	rjmp	.+188    	; 0x5a6e <Local_voidDisplayOutput+0x2a4>
				else
				{
					if(Global_Af32Operands[Local_u8Iter1 + 1] == 0) // Check that divisor is not zero..
    59b2:	8f 81       	ldd	r24, Y+7	; 0x07
    59b4:	99 27       	eor	r25, r25
    59b6:	87 fd       	sbrc	r24, 7
    59b8:	90 95       	com	r25
    59ba:	01 96       	adiw	r24, 0x01	; 1
    59bc:	88 0f       	add	r24, r24
    59be:	99 1f       	adc	r25, r25
    59c0:	88 0f       	add	r24, r24
    59c2:	99 1f       	adc	r25, r25
    59c4:	fc 01       	movw	r30, r24
    59c6:	e9 5b       	subi	r30, 0xB9	; 185
    59c8:	fd 4f       	sbci	r31, 0xFD	; 253
    59ca:	80 81       	ld	r24, Z
    59cc:	91 81       	ldd	r25, Z+1	; 0x01
    59ce:	a2 81       	ldd	r26, Z+2	; 0x02
    59d0:	b3 81       	ldd	r27, Z+3	; 0x03
    59d2:	bc 01       	movw	r22, r24
    59d4:	cd 01       	movw	r24, r26
    59d6:	20 e0       	ldi	r18, 0x00	; 0
    59d8:	30 e0       	ldi	r19, 0x00	; 0
    59da:	40 e0       	ldi	r20, 0x00	; 0
    59dc:	50 e0       	ldi	r21, 0x00	; 0
    59de:	0e 94 c3 04 	call	0x986	; 0x986 <__eqsf2>
    59e2:	88 23       	and	r24, r24
    59e4:	61 f4       	brne	.+24     	; 0x59fe <Local_voidDisplayOutput+0x234>
					{
						Local_voidMathError();// Calling function that display Math Error..
    59e6:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <Local_voidMathError>
						Set_Bit(Global_u16Flags, division_error);// Set flag division_error to skip remaining operations
    59ea:	80 91 3d 02 	lds	r24, 0x023D
    59ee:	90 91 3e 02 	lds	r25, 0x023E
    59f2:	90 64       	ori	r25, 0x40	; 64
    59f4:	90 93 3e 02 	sts	0x023E, r25
    59f8:	80 93 3d 02 	sts	0x023D, r24
    59fc:	a4 c0       	rjmp	.+328    	; 0x5b46 <Local_voidDisplayOutput+0x37c>
						break;
					}
					Global_Af32Operands[Local_u8Iter1] /= Global_Af32Operands[Local_u8Iter1 + 1]; // calculate  div. operation and assign res.
    59fe:	8f 81       	ldd	r24, Y+7	; 0x07
    5a00:	c8 2e       	mov	r12, r24
    5a02:	dd 24       	eor	r13, r13
    5a04:	c7 fc       	sbrc	r12, 7
    5a06:	d0 94       	com	r13
    5a08:	8f 81       	ldd	r24, Y+7	; 0x07
    5a0a:	99 27       	eor	r25, r25
    5a0c:	87 fd       	sbrc	r24, 7
    5a0e:	90 95       	com	r25
    5a10:	88 0f       	add	r24, r24
    5a12:	99 1f       	adc	r25, r25
    5a14:	88 0f       	add	r24, r24
    5a16:	99 1f       	adc	r25, r25
    5a18:	fc 01       	movw	r30, r24
    5a1a:	e9 5b       	subi	r30, 0xB9	; 185
    5a1c:	fd 4f       	sbci	r31, 0xFD	; 253
    5a1e:	e0 80       	ld	r14, Z
    5a20:	f1 80       	ldd	r15, Z+1	; 0x01
    5a22:	02 81       	ldd	r16, Z+2	; 0x02
    5a24:	13 81       	ldd	r17, Z+3	; 0x03
    5a26:	8f 81       	ldd	r24, Y+7	; 0x07
    5a28:	99 27       	eor	r25, r25
    5a2a:	87 fd       	sbrc	r24, 7
    5a2c:	90 95       	com	r25
    5a2e:	01 96       	adiw	r24, 0x01	; 1
    5a30:	88 0f       	add	r24, r24
    5a32:	99 1f       	adc	r25, r25
    5a34:	88 0f       	add	r24, r24
    5a36:	99 1f       	adc	r25, r25
    5a38:	fc 01       	movw	r30, r24
    5a3a:	e9 5b       	subi	r30, 0xB9	; 185
    5a3c:	fd 4f       	sbci	r31, 0xFD	; 253
    5a3e:	20 81       	ld	r18, Z
    5a40:	31 81       	ldd	r19, Z+1	; 0x01
    5a42:	42 81       	ldd	r20, Z+2	; 0x02
    5a44:	53 81       	ldd	r21, Z+3	; 0x03
    5a46:	c8 01       	movw	r24, r16
    5a48:	b7 01       	movw	r22, r14
    5a4a:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    5a4e:	dc 01       	movw	r26, r24
    5a50:	cb 01       	movw	r24, r22
    5a52:	9c 01       	movw	r18, r24
    5a54:	ad 01       	movw	r20, r26
    5a56:	c6 01       	movw	r24, r12
    5a58:	88 0f       	add	r24, r24
    5a5a:	99 1f       	adc	r25, r25
    5a5c:	88 0f       	add	r24, r24
    5a5e:	99 1f       	adc	r25, r25
    5a60:	fc 01       	movw	r30, r24
    5a62:	e9 5b       	subi	r30, 0xB9	; 185
    5a64:	fd 4f       	sbci	r31, 0xFD	; 253
    5a66:	20 83       	st	Z, r18
    5a68:	31 83       	std	Z+1, r19	; 0x01
    5a6a:	42 83       	std	Z+2, r20	; 0x02
    5a6c:	53 83       	std	Z+3, r21	; 0x03
				}

				Global_Af32Operands[Local_u8Iter1 + 1] = 0;
    5a6e:	8f 81       	ldd	r24, Y+7	; 0x07
    5a70:	99 27       	eor	r25, r25
    5a72:	87 fd       	sbrc	r24, 7
    5a74:	90 95       	com	r25
    5a76:	01 96       	adiw	r24, 0x01	; 1
    5a78:	88 0f       	add	r24, r24
    5a7a:	99 1f       	adc	r25, r25
    5a7c:	88 0f       	add	r24, r24
    5a7e:	99 1f       	adc	r25, r25
    5a80:	fc 01       	movw	r30, r24
    5a82:	e9 5b       	subi	r30, 0xB9	; 185
    5a84:	fd 4f       	sbci	r31, 0xFD	; 253
    5a86:	80 e0       	ldi	r24, 0x00	; 0
    5a88:	90 e0       	ldi	r25, 0x00	; 0
    5a8a:	a0 e0       	ldi	r26, 0x00	; 0
    5a8c:	b0 e0       	ldi	r27, 0x00	; 0
    5a8e:	80 83       	st	Z, r24
    5a90:	91 83       	std	Z+1, r25	; 0x01
    5a92:	a2 83       	std	Z+2, r26	; 0x02
    5a94:	b3 83       	std	Z+3, r27	; 0x03
				Global_u8Operators[Local_u8Iter1] = 0;
    5a96:	8f 81       	ldd	r24, Y+7	; 0x07
    5a98:	99 27       	eor	r25, r25
    5a9a:	87 fd       	sbrc	r24, 7
    5a9c:	90 95       	com	r25
    5a9e:	fc 01       	movw	r30, r24
    5aa0:	e9 58       	subi	r30, 0x89	; 137
    5aa2:	fd 4f       	sbci	r31, 0xFD	; 253
    5aa4:	10 82       	st	Z, r1

				for(Local_u8Iter2 = Local_u8Iter1 + 1; Local_u8Iter2 < NUM_OF_OPERANDS - 1; ++Local_u8Iter2) // Shifting all operands to left
    5aa6:	8f 81       	ldd	r24, Y+7	; 0x07
    5aa8:	8f 5f       	subi	r24, 0xFF	; 255
    5aaa:	8e 83       	std	Y+6, r24	; 0x06
    5aac:	24 c0       	rjmp	.+72     	; 0x5af6 <Local_voidDisplayOutput+0x32c>
				{
					Global_Af32Operands[Local_u8Iter2] = Global_Af32Operands[Local_u8Iter2 + 1];
    5aae:	8e 81       	ldd	r24, Y+6	; 0x06
    5ab0:	68 2f       	mov	r22, r24
    5ab2:	77 27       	eor	r23, r23
    5ab4:	67 fd       	sbrc	r22, 7
    5ab6:	70 95       	com	r23
    5ab8:	8e 81       	ldd	r24, Y+6	; 0x06
    5aba:	99 27       	eor	r25, r25
    5abc:	87 fd       	sbrc	r24, 7
    5abe:	90 95       	com	r25
    5ac0:	01 96       	adiw	r24, 0x01	; 1
    5ac2:	88 0f       	add	r24, r24
    5ac4:	99 1f       	adc	r25, r25
    5ac6:	88 0f       	add	r24, r24
    5ac8:	99 1f       	adc	r25, r25
    5aca:	fc 01       	movw	r30, r24
    5acc:	e9 5b       	subi	r30, 0xB9	; 185
    5ace:	fd 4f       	sbci	r31, 0xFD	; 253
    5ad0:	20 81       	ld	r18, Z
    5ad2:	31 81       	ldd	r19, Z+1	; 0x01
    5ad4:	42 81       	ldd	r20, Z+2	; 0x02
    5ad6:	53 81       	ldd	r21, Z+3	; 0x03
    5ad8:	cb 01       	movw	r24, r22
    5ada:	88 0f       	add	r24, r24
    5adc:	99 1f       	adc	r25, r25
    5ade:	88 0f       	add	r24, r24
    5ae0:	99 1f       	adc	r25, r25
    5ae2:	fc 01       	movw	r30, r24
    5ae4:	e9 5b       	subi	r30, 0xB9	; 185
    5ae6:	fd 4f       	sbci	r31, 0xFD	; 253
    5ae8:	20 83       	st	Z, r18
    5aea:	31 83       	std	Z+1, r19	; 0x01
    5aec:	42 83       	std	Z+2, r20	; 0x02
    5aee:	53 83       	std	Z+3, r21	; 0x03
				}

				Global_Af32Operands[Local_u8Iter1 + 1] = 0;
				Global_u8Operators[Local_u8Iter1] = 0;

				for(Local_u8Iter2 = Local_u8Iter1 + 1; Local_u8Iter2 < NUM_OF_OPERANDS - 1; ++Local_u8Iter2) // Shifting all operands to left
    5af0:	8e 81       	ldd	r24, Y+6	; 0x06
    5af2:	8f 5f       	subi	r24, 0xFF	; 255
    5af4:	8e 83       	std	Y+6, r24	; 0x06
    5af6:	8e 81       	ldd	r24, Y+6	; 0x06
    5af8:	8b 30       	cpi	r24, 0x0B	; 11
    5afa:	cc f2       	brlt	.-78     	; 0x5aae <Local_voidDisplayOutput+0x2e4>
				{
					Global_Af32Operands[Local_u8Iter2] = Global_Af32Operands[Local_u8Iter2 + 1];
				}
				for(Local_u8Iter2 = Local_u8Iter1 ; Local_u8Iter2 < NUM_OF_OPERATORS - 1; ++Local_u8Iter2) // Shifting all operators to left
    5afc:	8f 81       	ldd	r24, Y+7	; 0x07
    5afe:	8e 83       	std	Y+6, r24	; 0x06
    5b00:	15 c0       	rjmp	.+42     	; 0x5b2c <Local_voidDisplayOutput+0x362>
				{
					Global_u8Operators[Local_u8Iter2] = Global_u8Operators[Local_u8Iter2 + 1];
    5b02:	8e 81       	ldd	r24, Y+6	; 0x06
    5b04:	28 2f       	mov	r18, r24
    5b06:	33 27       	eor	r19, r19
    5b08:	27 fd       	sbrc	r18, 7
    5b0a:	30 95       	com	r19
    5b0c:	8e 81       	ldd	r24, Y+6	; 0x06
    5b0e:	99 27       	eor	r25, r25
    5b10:	87 fd       	sbrc	r24, 7
    5b12:	90 95       	com	r25
    5b14:	01 96       	adiw	r24, 0x01	; 1
    5b16:	fc 01       	movw	r30, r24
    5b18:	e9 58       	subi	r30, 0x89	; 137
    5b1a:	fd 4f       	sbci	r31, 0xFD	; 253
    5b1c:	80 81       	ld	r24, Z
    5b1e:	f9 01       	movw	r30, r18
    5b20:	e9 58       	subi	r30, 0x89	; 137
    5b22:	fd 4f       	sbci	r31, 0xFD	; 253
    5b24:	80 83       	st	Z, r24

				for(Local_u8Iter2 = Local_u8Iter1 + 1; Local_u8Iter2 < NUM_OF_OPERANDS - 1; ++Local_u8Iter2) // Shifting all operands to left
				{
					Global_Af32Operands[Local_u8Iter2] = Global_Af32Operands[Local_u8Iter2 + 1];
				}
				for(Local_u8Iter2 = Local_u8Iter1 ; Local_u8Iter2 < NUM_OF_OPERATORS - 1; ++Local_u8Iter2) // Shifting all operators to left
    5b26:	8e 81       	ldd	r24, Y+6	; 0x06
    5b28:	8f 5f       	subi	r24, 0xFF	; 255
    5b2a:	8e 83       	std	Y+6, r24	; 0x06
    5b2c:	8e 81       	ldd	r24, Y+6	; 0x06
    5b2e:	8a 30       	cpi	r24, 0x0A	; 10
    5b30:	44 f3       	brlt	.-48     	; 0x5b02 <Local_voidDisplayOutput+0x338>
				{
					Global_u8Operators[Local_u8Iter2] = Global_u8Operators[Local_u8Iter2 + 1];
				}
				Local_u8Iter1--;// back one step after Shifting to calculate new operation
    5b32:	8f 81       	ldd	r24, Y+7	; 0x07
    5b34:	81 50       	subi	r24, 0x01	; 1
    5b36:	8f 83       	std	Y+7, r24	; 0x07
		else { LCD_enuDisplayString(Global_Au8NumberRepresentation); Clr_Bit(Global_u16Flags, alpha); Global_s8IterOfNumberRepres = NUM_OF_BITS - 1;}//
	}
	else // 5^4 - 100 + sqrt(4) + 2 * cos(60)
	{
		s8 Local_u8Iter1, Local_u8Iter2;
		for(Local_u8Iter1 = 0; Local_u8Iter1 < NUM_OF_OPERATORS - 1; ++Local_u8Iter1) // Iterate all the elements and calculate all the multiplication and division operations
    5b38:	8f 81       	ldd	r24, Y+7	; 0x07
    5b3a:	8f 5f       	subi	r24, 0xFF	; 255
    5b3c:	8f 83       	std	Y+7, r24	; 0x07
    5b3e:	8f 81       	ldd	r24, Y+7	; 0x07
    5b40:	8a 30       	cpi	r24, 0x0A	; 10
    5b42:	0c f4       	brge	.+2      	; 0x5b46 <Local_voidDisplayOutput+0x37c>
    5b44:	de ce       	rjmp	.-580    	; 0x5902 <Local_voidDisplayOutput+0x138>
				}
				Local_u8Iter1--;// back one step after Shifting to calculate new operation
			}
		}

		if(Get_Bit(Global_u16Flags, division_error)) return;// check flag division_error to skip remaining operations
    5b46:	80 91 3d 02 	lds	r24, 0x023D
    5b4a:	90 91 3e 02 	lds	r25, 0x023E
    5b4e:	80 70       	andi	r24, 0x00	; 0
    5b50:	90 74       	andi	r25, 0x40	; 64
    5b52:	00 97       	sbiw	r24, 0x00	; 0
    5b54:	09 f0       	breq	.+2      	; 0x5b58 <Local_voidDisplayOutput+0x38e>
    5b56:	b6 c1       	rjmp	.+876    	; 0x5ec4 <Local_voidDisplayOutput+0x6fa>
    5b58:	93 c0       	rjmp	.+294    	; 0x5c80 <Local_voidDisplayOutput+0x4b6>

		while(Global_u8Operators[0] == '+' || Global_u8Operators[0] == '-') // calculate all the Addition and Subtraction operations
		{
			if(Global_u8Operators[0] == '+') Global_Af32Operands[0] += Global_Af32Operands[1]; // calculate  Add. operation and assign res.
    5b5a:	80 91 77 02 	lds	r24, 0x0277
    5b5e:	8b 32       	cpi	r24, 0x2B	; 43
    5b60:	f9 f4       	brne	.+62     	; 0x5ba0 <Local_voidDisplayOutput+0x3d6>
    5b62:	80 91 47 02 	lds	r24, 0x0247
    5b66:	90 91 48 02 	lds	r25, 0x0248
    5b6a:	a0 91 49 02 	lds	r26, 0x0249
    5b6e:	b0 91 4a 02 	lds	r27, 0x024A
    5b72:	20 91 4b 02 	lds	r18, 0x024B
    5b76:	30 91 4c 02 	lds	r19, 0x024C
    5b7a:	40 91 4d 02 	lds	r20, 0x024D
    5b7e:	50 91 4e 02 	lds	r21, 0x024E
    5b82:	bc 01       	movw	r22, r24
    5b84:	cd 01       	movw	r24, r26
    5b86:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    5b8a:	dc 01       	movw	r26, r24
    5b8c:	cb 01       	movw	r24, r22
    5b8e:	80 93 47 02 	sts	0x0247, r24
    5b92:	90 93 48 02 	sts	0x0248, r25
    5b96:	a0 93 49 02 	sts	0x0249, r26
    5b9a:	b0 93 4a 02 	sts	0x024A, r27
    5b9e:	1e c0       	rjmp	.+60     	; 0x5bdc <Local_voidDisplayOutput+0x412>
			else Global_Af32Operands[0] -= Global_Af32Operands[1]; // calculate  Sub. operation and assign res.
    5ba0:	80 91 47 02 	lds	r24, 0x0247
    5ba4:	90 91 48 02 	lds	r25, 0x0248
    5ba8:	a0 91 49 02 	lds	r26, 0x0249
    5bac:	b0 91 4a 02 	lds	r27, 0x024A
    5bb0:	20 91 4b 02 	lds	r18, 0x024B
    5bb4:	30 91 4c 02 	lds	r19, 0x024C
    5bb8:	40 91 4d 02 	lds	r20, 0x024D
    5bbc:	50 91 4e 02 	lds	r21, 0x024E
    5bc0:	bc 01       	movw	r22, r24
    5bc2:	cd 01       	movw	r24, r26
    5bc4:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    5bc8:	dc 01       	movw	r26, r24
    5bca:	cb 01       	movw	r24, r22
    5bcc:	80 93 47 02 	sts	0x0247, r24
    5bd0:	90 93 48 02 	sts	0x0248, r25
    5bd4:	a0 93 49 02 	sts	0x0249, r26
    5bd8:	b0 93 4a 02 	sts	0x024A, r27

			Global_Af32Operands[1] = 0;
    5bdc:	80 e0       	ldi	r24, 0x00	; 0
    5bde:	90 e0       	ldi	r25, 0x00	; 0
    5be0:	a0 e0       	ldi	r26, 0x00	; 0
    5be2:	b0 e0       	ldi	r27, 0x00	; 0
    5be4:	80 93 4b 02 	sts	0x024B, r24
    5be8:	90 93 4c 02 	sts	0x024C, r25
    5bec:	a0 93 4d 02 	sts	0x024D, r26
    5bf0:	b0 93 4e 02 	sts	0x024E, r27
			Global_u8Operators[0] = 0;
    5bf4:	10 92 77 02 	sts	0x0277, r1

			for(Local_u8Iter2 = 1; Local_u8Iter2 < NUM_OF_OPERANDS - 1; ++Local_u8Iter2) // Shifting all operands to left
    5bf8:	81 e0       	ldi	r24, 0x01	; 1
    5bfa:	8e 83       	std	Y+6, r24	; 0x06
    5bfc:	24 c0       	rjmp	.+72     	; 0x5c46 <Local_voidDisplayOutput+0x47c>
			{
				Global_Af32Operands[Local_u8Iter2] = Global_Af32Operands[Local_u8Iter2 + 1];
    5bfe:	8e 81       	ldd	r24, Y+6	; 0x06
    5c00:	68 2f       	mov	r22, r24
    5c02:	77 27       	eor	r23, r23
    5c04:	67 fd       	sbrc	r22, 7
    5c06:	70 95       	com	r23
    5c08:	8e 81       	ldd	r24, Y+6	; 0x06
    5c0a:	99 27       	eor	r25, r25
    5c0c:	87 fd       	sbrc	r24, 7
    5c0e:	90 95       	com	r25
    5c10:	01 96       	adiw	r24, 0x01	; 1
    5c12:	88 0f       	add	r24, r24
    5c14:	99 1f       	adc	r25, r25
    5c16:	88 0f       	add	r24, r24
    5c18:	99 1f       	adc	r25, r25
    5c1a:	fc 01       	movw	r30, r24
    5c1c:	e9 5b       	subi	r30, 0xB9	; 185
    5c1e:	fd 4f       	sbci	r31, 0xFD	; 253
    5c20:	20 81       	ld	r18, Z
    5c22:	31 81       	ldd	r19, Z+1	; 0x01
    5c24:	42 81       	ldd	r20, Z+2	; 0x02
    5c26:	53 81       	ldd	r21, Z+3	; 0x03
    5c28:	cb 01       	movw	r24, r22
    5c2a:	88 0f       	add	r24, r24
    5c2c:	99 1f       	adc	r25, r25
    5c2e:	88 0f       	add	r24, r24
    5c30:	99 1f       	adc	r25, r25
    5c32:	fc 01       	movw	r30, r24
    5c34:	e9 5b       	subi	r30, 0xB9	; 185
    5c36:	fd 4f       	sbci	r31, 0xFD	; 253
    5c38:	20 83       	st	Z, r18
    5c3a:	31 83       	std	Z+1, r19	; 0x01
    5c3c:	42 83       	std	Z+2, r20	; 0x02
    5c3e:	53 83       	std	Z+3, r21	; 0x03
			else Global_Af32Operands[0] -= Global_Af32Operands[1]; // calculate  Sub. operation and assign res.

			Global_Af32Operands[1] = 0;
			Global_u8Operators[0] = 0;

			for(Local_u8Iter2 = 1; Local_u8Iter2 < NUM_OF_OPERANDS - 1; ++Local_u8Iter2) // Shifting all operands to left
    5c40:	8e 81       	ldd	r24, Y+6	; 0x06
    5c42:	8f 5f       	subi	r24, 0xFF	; 255
    5c44:	8e 83       	std	Y+6, r24	; 0x06
    5c46:	8e 81       	ldd	r24, Y+6	; 0x06
    5c48:	8b 30       	cpi	r24, 0x0B	; 11
    5c4a:	cc f2       	brlt	.-78     	; 0x5bfe <Local_voidDisplayOutput+0x434>
			{
				Global_Af32Operands[Local_u8Iter2] = Global_Af32Operands[Local_u8Iter2 + 1];
			}
			for(Local_u8Iter2 = 0 ; Local_u8Iter2 < NUM_OF_OPERATORS - 1; ++Local_u8Iter2) // Shifting all operators to left
    5c4c:	1e 82       	std	Y+6, r1	; 0x06
    5c4e:	15 c0       	rjmp	.+42     	; 0x5c7a <Local_voidDisplayOutput+0x4b0>
			{
				Global_u8Operators[Local_u8Iter2] = Global_u8Operators[Local_u8Iter2 + 1];
    5c50:	8e 81       	ldd	r24, Y+6	; 0x06
    5c52:	28 2f       	mov	r18, r24
    5c54:	33 27       	eor	r19, r19
    5c56:	27 fd       	sbrc	r18, 7
    5c58:	30 95       	com	r19
    5c5a:	8e 81       	ldd	r24, Y+6	; 0x06
    5c5c:	99 27       	eor	r25, r25
    5c5e:	87 fd       	sbrc	r24, 7
    5c60:	90 95       	com	r25
    5c62:	01 96       	adiw	r24, 0x01	; 1
    5c64:	fc 01       	movw	r30, r24
    5c66:	e9 58       	subi	r30, 0x89	; 137
    5c68:	fd 4f       	sbci	r31, 0xFD	; 253
    5c6a:	80 81       	ld	r24, Z
    5c6c:	f9 01       	movw	r30, r18
    5c6e:	e9 58       	subi	r30, 0x89	; 137
    5c70:	fd 4f       	sbci	r31, 0xFD	; 253
    5c72:	80 83       	st	Z, r24

			for(Local_u8Iter2 = 1; Local_u8Iter2 < NUM_OF_OPERANDS - 1; ++Local_u8Iter2) // Shifting all operands to left
			{
				Global_Af32Operands[Local_u8Iter2] = Global_Af32Operands[Local_u8Iter2 + 1];
			}
			for(Local_u8Iter2 = 0 ; Local_u8Iter2 < NUM_OF_OPERATORS - 1; ++Local_u8Iter2) // Shifting all operators to left
    5c74:	8e 81       	ldd	r24, Y+6	; 0x06
    5c76:	8f 5f       	subi	r24, 0xFF	; 255
    5c78:	8e 83       	std	Y+6, r24	; 0x06
    5c7a:	8e 81       	ldd	r24, Y+6	; 0x06
    5c7c:	8a 30       	cpi	r24, 0x0A	; 10
    5c7e:	44 f3       	brlt	.-48     	; 0x5c50 <Local_voidDisplayOutput+0x486>
			}
		}

		if(Get_Bit(Global_u16Flags, division_error)) return;// check flag division_error to skip remaining operations

		while(Global_u8Operators[0] == '+' || Global_u8Operators[0] == '-') // calculate all the Addition and Subtraction operations
    5c80:	80 91 77 02 	lds	r24, 0x0277
    5c84:	8b 32       	cpi	r24, 0x2B	; 43
    5c86:	09 f4       	brne	.+2      	; 0x5c8a <Local_voidDisplayOutput+0x4c0>
    5c88:	68 cf       	rjmp	.-304    	; 0x5b5a <Local_voidDisplayOutput+0x390>
    5c8a:	80 91 77 02 	lds	r24, 0x0277
    5c8e:	8d 32       	cpi	r24, 0x2D	; 45
    5c90:	09 f4       	brne	.+2      	; 0x5c94 <Local_voidDisplayOutput+0x4ca>
    5c92:	63 cf       	rjmp	.-314    	; 0x5b5a <Local_voidDisplayOutput+0x390>
			for(Local_u8Iter2 = 0 ; Local_u8Iter2 < NUM_OF_OPERATORS - 1; ++Local_u8Iter2) // Shifting all operators to left
			{
				Global_u8Operators[Local_u8Iter2] = Global_u8Operators[Local_u8Iter2 + 1];
			}
		}
		f32 tmp = Global_Af32Operands[0];// 25.000000
    5c94:	80 91 47 02 	lds	r24, 0x0247
    5c98:	90 91 48 02 	lds	r25, 0x0248
    5c9c:	a0 91 49 02 	lds	r26, 0x0249
    5ca0:	b0 91 4a 02 	lds	r27, 0x024A
    5ca4:	8a 83       	std	Y+2, r24	; 0x02
    5ca6:	9b 83       	std	Y+3, r25	; 0x03
    5ca8:	ac 83       	std	Y+4, r26	; 0x04
    5caa:	bd 83       	std	Y+5, r27	; 0x05
		if(tmp < 0.0) tmp*=-1;
    5cac:	6a 81       	ldd	r22, Y+2	; 0x02
    5cae:	7b 81       	ldd	r23, Y+3	; 0x03
    5cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    5cb2:	9d 81       	ldd	r25, Y+5	; 0x05
    5cb4:	20 e0       	ldi	r18, 0x00	; 0
    5cb6:	30 e0       	ldi	r19, 0x00	; 0
    5cb8:	40 e0       	ldi	r20, 0x00	; 0
    5cba:	50 e0       	ldi	r21, 0x00	; 0
    5cbc:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    5cc0:	88 23       	and	r24, r24
    5cc2:	4c f4       	brge	.+18     	; 0x5cd6 <Local_voidDisplayOutput+0x50c>
    5cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    5cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    5cc8:	ac 81       	ldd	r26, Y+4	; 0x04
    5cca:	bd 81       	ldd	r27, Y+5	; 0x05
    5ccc:	b0 58       	subi	r27, 0x80	; 128
    5cce:	8a 83       	std	Y+2, r24	; 0x02
    5cd0:	9b 83       	std	Y+3, r25	; 0x03
    5cd2:	ac 83       	std	Y+4, r26	; 0x04
    5cd4:	bd 83       	std	Y+5, r27	; 0x05
		u8 cnt = 1;
    5cd6:	81 e0       	ldi	r24, 0x01	; 1
    5cd8:	89 83       	std	Y+1, r24	; 0x01
    5cda:	13 c0       	rjmp	.+38     	; 0x5d02 <Local_voidDisplayOutput+0x538>
		while(tmp > 10.0) // calculate number of digits
		{
			tmp /= 10;
    5cdc:	6a 81       	ldd	r22, Y+2	; 0x02
    5cde:	7b 81       	ldd	r23, Y+3	; 0x03
    5ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    5ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    5ce4:	20 e0       	ldi	r18, 0x00	; 0
    5ce6:	30 e0       	ldi	r19, 0x00	; 0
    5ce8:	40 e2       	ldi	r20, 0x20	; 32
    5cea:	51 e4       	ldi	r21, 0x41	; 65
    5cec:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    5cf0:	dc 01       	movw	r26, r24
    5cf2:	cb 01       	movw	r24, r22
    5cf4:	8a 83       	std	Y+2, r24	; 0x02
    5cf6:	9b 83       	std	Y+3, r25	; 0x03
    5cf8:	ac 83       	std	Y+4, r26	; 0x04
    5cfa:	bd 83       	std	Y+5, r27	; 0x05
			cnt++;
    5cfc:	89 81       	ldd	r24, Y+1	; 0x01
    5cfe:	8f 5f       	subi	r24, 0xFF	; 255
    5d00:	89 83       	std	Y+1, r24	; 0x01
			}
		}
		f32 tmp = Global_Af32Operands[0];// 25.000000
		if(tmp < 0.0) tmp*=-1;
		u8 cnt = 1;
		while(tmp > 10.0) // calculate number of digits
    5d02:	6a 81       	ldd	r22, Y+2	; 0x02
    5d04:	7b 81       	ldd	r23, Y+3	; 0x03
    5d06:	8c 81       	ldd	r24, Y+4	; 0x04
    5d08:	9d 81       	ldd	r25, Y+5	; 0x05
    5d0a:	20 e0       	ldi	r18, 0x00	; 0
    5d0c:	30 e0       	ldi	r19, 0x00	; 0
    5d0e:	40 e2       	ldi	r20, 0x20	; 32
    5d10:	51 e4       	ldi	r21, 0x41	; 65
    5d12:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    5d16:	18 16       	cp	r1, r24
    5d18:	0c f3       	brlt	.-62     	; 0x5cdc <Local_voidDisplayOutput+0x512>
		{
			tmp /= 10;
			cnt++;
		}

		if(Global_u8CountingLeftShift == 1) LCD_enuSendCommand(RIGHT_SHIFT);
    5d1a:	80 91 41 02 	lds	r24, 0x0241
    5d1e:	81 30       	cpi	r24, 0x01	; 1
    5d20:	21 f4       	brne	.+8      	; 0x5d2a <Local_voidDisplayOutput+0x560>
    5d22:	8c e1       	ldi	r24, 0x1C	; 28
    5d24:	0e 94 89 20 	call	0x4112	; 0x4112 <LCD_enuSendCommand>
    5d28:	11 c0       	rjmp	.+34     	; 0x5d4c <Local_voidDisplayOutput+0x582>
		else if(Global_u8CountingLeftShift > 1)
    5d2a:	80 91 41 02 	lds	r24, 0x0241
    5d2e:	82 30       	cpi	r24, 0x02	; 2
    5d30:	6c f0       	brlt	.+26     	; 0x5d4c <Local_voidDisplayOutput+0x582>
    5d32:	08 c0       	rjmp	.+16     	; 0x5d44 <Local_voidDisplayOutput+0x57a>
		{
			for(; Global_u8CountingLeftShift >= 0; --Global_u8CountingLeftShift) LCD_enuSendCommand(RIGHT_SHIFT); // Shift text to right
    5d34:	8c e1       	ldi	r24, 0x1C	; 28
    5d36:	0e 94 89 20 	call	0x4112	; 0x4112 <LCD_enuSendCommand>
    5d3a:	80 91 41 02 	lds	r24, 0x0241
    5d3e:	81 50       	subi	r24, 0x01	; 1
    5d40:	80 93 41 02 	sts	0x0241, r24
    5d44:	80 91 41 02 	lds	r24, 0x0241
    5d48:	88 23       	and	r24, r24
    5d4a:	a4 f7       	brge	.-24     	; 0x5d34 <Local_voidDisplayOutput+0x56a>
		}


		if(Global_Af32Operands[0] - (s32)Global_Af32Operands[0] != 0)
    5d4c:	e0 90 47 02 	lds	r14, 0x0247
    5d50:	f0 90 48 02 	lds	r15, 0x0248
    5d54:	00 91 49 02 	lds	r16, 0x0249
    5d58:	10 91 4a 02 	lds	r17, 0x024A
    5d5c:	80 91 47 02 	lds	r24, 0x0247
    5d60:	90 91 48 02 	lds	r25, 0x0248
    5d64:	a0 91 49 02 	lds	r26, 0x0249
    5d68:	b0 91 4a 02 	lds	r27, 0x024A
    5d6c:	bc 01       	movw	r22, r24
    5d6e:	cd 01       	movw	r24, r26
    5d70:	0e 94 41 06 	call	0xc82	; 0xc82 <__fixsfsi>
    5d74:	dc 01       	movw	r26, r24
    5d76:	cb 01       	movw	r24, r22
    5d78:	bc 01       	movw	r22, r24
    5d7a:	cd 01       	movw	r24, r26
    5d7c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatsisf>
    5d80:	9b 01       	movw	r18, r22
    5d82:	ac 01       	movw	r20, r24
    5d84:	c8 01       	movw	r24, r16
    5d86:	b7 01       	movw	r22, r14
    5d88:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    5d8c:	dc 01       	movw	r26, r24
    5d8e:	cb 01       	movw	r24, r22
    5d90:	bc 01       	movw	r22, r24
    5d92:	cd 01       	movw	r24, r26
    5d94:	20 e0       	ldi	r18, 0x00	; 0
    5d96:	30 e0       	ldi	r19, 0x00	; 0
    5d98:	40 e0       	ldi	r20, 0x00	; 0
    5d9a:	50 e0       	ldi	r21, 0x00	; 0
    5d9c:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__nesf2>
    5da0:	88 23       	and	r24, r24
    5da2:	81 f1       	breq	.+96     	; 0x5e04 <Local_voidDisplayOutput+0x63a>
		{
			if(Global_Af32Operands[0] < 0) LCD_enuGoto(2, NUM_OF_BITS - cnt - 5); // If the number is a decimal fraction, leave 5 blocks plus number of digits
    5da4:	80 91 47 02 	lds	r24, 0x0247
    5da8:	90 91 48 02 	lds	r25, 0x0248
    5dac:	a0 91 49 02 	lds	r26, 0x0249
    5db0:	b0 91 4a 02 	lds	r27, 0x024A
    5db4:	bc 01       	movw	r22, r24
    5db6:	cd 01       	movw	r24, r26
    5db8:	20 e0       	ldi	r18, 0x00	; 0
    5dba:	30 e0       	ldi	r19, 0x00	; 0
    5dbc:	40 e0       	ldi	r20, 0x00	; 0
    5dbe:	50 e0       	ldi	r21, 0x00	; 0
    5dc0:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    5dc4:	88 23       	and	r24, r24
    5dc6:	7c f4       	brge	.+30     	; 0x5de6 <Local_voidDisplayOutput+0x61c>
    5dc8:	89 81       	ldd	r24, Y+1	; 0x01
    5dca:	28 2f       	mov	r18, r24
    5dcc:	30 e0       	ldi	r19, 0x00	; 0
    5dce:	8b e0       	ldi	r24, 0x0B	; 11
    5dd0:	90 e0       	ldi	r25, 0x00	; 0
    5dd2:	ac 01       	movw	r20, r24
    5dd4:	42 1b       	sub	r20, r18
    5dd6:	53 0b       	sbc	r21, r19
    5dd8:	9a 01       	movw	r18, r20
    5dda:	82 e0       	ldi	r24, 0x02	; 2
    5ddc:	90 e0       	ldi	r25, 0x00	; 0
    5dde:	b9 01       	movw	r22, r18
    5de0:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_enuGoto>
    5de4:	3e c0       	rjmp	.+124    	; 0x5e62 <Local_voidDisplayOutput+0x698>
			else LCD_enuGoto(2, NUM_OF_BITS - cnt - 4);
    5de6:	89 81       	ldd	r24, Y+1	; 0x01
    5de8:	28 2f       	mov	r18, r24
    5dea:	30 e0       	ldi	r19, 0x00	; 0
    5dec:	8c e0       	ldi	r24, 0x0C	; 12
    5dee:	90 e0       	ldi	r25, 0x00	; 0
    5df0:	ac 01       	movw	r20, r24
    5df2:	42 1b       	sub	r20, r18
    5df4:	53 0b       	sbc	r21, r19
    5df6:	9a 01       	movw	r18, r20
    5df8:	82 e0       	ldi	r24, 0x02	; 2
    5dfa:	90 e0       	ldi	r25, 0x00	; 0
    5dfc:	b9 01       	movw	r22, r18
    5dfe:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_enuGoto>
    5e02:	2f c0       	rjmp	.+94     	; 0x5e62 <Local_voidDisplayOutput+0x698>
		}
		else
		{
			if(Global_Af32Operands[0] < 0) LCD_enuGoto(2, NUM_OF_BITS - cnt - 1); // leave number of digits from blocks
    5e04:	80 91 47 02 	lds	r24, 0x0247
    5e08:	90 91 48 02 	lds	r25, 0x0248
    5e0c:	a0 91 49 02 	lds	r26, 0x0249
    5e10:	b0 91 4a 02 	lds	r27, 0x024A
    5e14:	bc 01       	movw	r22, r24
    5e16:	cd 01       	movw	r24, r26
    5e18:	20 e0       	ldi	r18, 0x00	; 0
    5e1a:	30 e0       	ldi	r19, 0x00	; 0
    5e1c:	40 e0       	ldi	r20, 0x00	; 0
    5e1e:	50 e0       	ldi	r21, 0x00	; 0
    5e20:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    5e24:	88 23       	and	r24, r24
    5e26:	7c f4       	brge	.+30     	; 0x5e46 <Local_voidDisplayOutput+0x67c>
    5e28:	89 81       	ldd	r24, Y+1	; 0x01
    5e2a:	28 2f       	mov	r18, r24
    5e2c:	30 e0       	ldi	r19, 0x00	; 0
    5e2e:	8f e0       	ldi	r24, 0x0F	; 15
    5e30:	90 e0       	ldi	r25, 0x00	; 0
    5e32:	ac 01       	movw	r20, r24
    5e34:	42 1b       	sub	r20, r18
    5e36:	53 0b       	sbc	r21, r19
    5e38:	9a 01       	movw	r18, r20
    5e3a:	82 e0       	ldi	r24, 0x02	; 2
    5e3c:	90 e0       	ldi	r25, 0x00	; 0
    5e3e:	b9 01       	movw	r22, r18
    5e40:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_enuGoto>
    5e44:	0e c0       	rjmp	.+28     	; 0x5e62 <Local_voidDisplayOutput+0x698>
			else LCD_enuGoto(2, NUM_OF_BITS - cnt) ;
    5e46:	89 81       	ldd	r24, Y+1	; 0x01
    5e48:	28 2f       	mov	r18, r24
    5e4a:	30 e0       	ldi	r19, 0x00	; 0
    5e4c:	80 e1       	ldi	r24, 0x10	; 16
    5e4e:	90 e0       	ldi	r25, 0x00	; 0
    5e50:	ac 01       	movw	r20, r24
    5e52:	42 1b       	sub	r20, r18
    5e54:	53 0b       	sbc	r21, r19
    5e56:	9a 01       	movw	r18, r20
    5e58:	82 e0       	ldi	r24, 0x02	; 2
    5e5a:	90 e0       	ldi	r25, 0x00	; 0
    5e5c:	b9 01       	movw	r22, r18
    5e5e:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_enuGoto>
		}
		LCD_enuWriteNumber(Global_Af32Operands[0]); // Display The Result
    5e62:	80 91 47 02 	lds	r24, 0x0247
    5e66:	90 91 48 02 	lds	r25, 0x0248
    5e6a:	a0 91 49 02 	lds	r26, 0x0249
    5e6e:	b0 91 4a 02 	lds	r27, 0x024A
    5e72:	bc 01       	movw	r22, r24
    5e74:	cd 01       	movw	r24, r26
    5e76:	0e 94 30 21 	call	0x4260	; 0x4260 <LCD_enuWriteNumber>
		Local_f32ANS = Global_Af32Operands[0]; // Set res. in ANS
    5e7a:	80 91 47 02 	lds	r24, 0x0247
    5e7e:	90 91 48 02 	lds	r25, 0x0248
    5e82:	a0 91 49 02 	lds	r26, 0x0249
    5e86:	b0 91 4a 02 	lds	r27, 0x024A
    5e8a:	80 93 43 02 	sts	0x0243, r24
    5e8e:	90 93 44 02 	sts	0x0244, r25
    5e92:	a0 93 45 02 	sts	0x0245, r26
    5e96:	b0 93 46 02 	sts	0x0246, r27
		Global_Af32Operands[0] = 0;// Set remaining elements to zero to ready to new operations
    5e9a:	80 e0       	ldi	r24, 0x00	; 0
    5e9c:	90 e0       	ldi	r25, 0x00	; 0
    5e9e:	a0 e0       	ldi	r26, 0x00	; 0
    5ea0:	b0 e0       	ldi	r27, 0x00	; 0
    5ea2:	80 93 47 02 	sts	0x0247, r24
    5ea6:	90 93 48 02 	sts	0x0248, r25
    5eaa:	a0 93 49 02 	sts	0x0249, r26
    5eae:	b0 93 4a 02 	sts	0x024A, r27
		Global_s8Op_Iterator = 0, Global_s8Num_Iterator = -1; Global_u8ShiftIter = 0, Global_u8CountingLeftShift = 0;
    5eb2:	10 92 3f 02 	sts	0x023F, r1
    5eb6:	8f ef       	ldi	r24, 0xFF	; 255
    5eb8:	80 93 27 02 	sts	0x0227, r24
    5ebc:	10 92 40 02 	sts	0x0240, r1
    5ec0:	10 92 41 02 	sts	0x0241, r1
	}
}
    5ec4:	2c 96       	adiw	r28, 0x0c	; 12
    5ec6:	0f b6       	in	r0, 0x3f	; 63
    5ec8:	f8 94       	cli
    5eca:	de bf       	out	0x3e, r29	; 62
    5ecc:	0f be       	out	0x3f, r0	; 63
    5ece:	cd bf       	out	0x3d, r28	; 61
    5ed0:	cf 91       	pop	r28
    5ed2:	df 91       	pop	r29
    5ed4:	1f 91       	pop	r17
    5ed6:	0f 91       	pop	r16
    5ed8:	ff 90       	pop	r15
    5eda:	ef 90       	pop	r14
    5edc:	df 90       	pop	r13
    5ede:	cf 90       	pop	r12
    5ee0:	08 95       	ret

00005ee2 <Local_voidNumberRepresentation>:

void Local_voidNumberRepresentation(void)
{
    5ee2:	df 93       	push	r29
    5ee4:	cf 93       	push	r28
    5ee6:	cd b7       	in	r28, 0x3d	; 61
    5ee8:	de b7       	in	r29, 0x3e	; 62
    5eea:	2f 97       	sbiw	r28, 0x0f	; 15
    5eec:	0f b6       	in	r0, 0x3f	; 63
    5eee:	f8 94       	cli
    5ef0:	de bf       	out	0x3e, r29	; 62
    5ef2:	0f be       	out	0x3f, r0	; 63
    5ef4:	cd bf       	out	0x3d, r28	; 61
	Global_u8TypeOfNumber = Global_u8PressedKey;
    5ef6:	80 91 31 02 	lds	r24, 0x0231
    5efa:	80 93 42 02 	sts	0x0242, r24
	LCD_enuClearDisplay();
    5efe:	0e 94 79 20 	call	0x40f2	; 0x40f2 <LCD_enuClearDisplay>
	Global_u8ShiftIter = 0, Global_u8CountingLeftShift = 0;
    5f02:	10 92 40 02 	sts	0x0240, r1
    5f06:	10 92 41 02 	sts	0x0241, r1

	if(!Get_Bit(Global_u16Flags, number_repres))  // Check Number_System Mode On or Off
    5f0a:	80 91 3d 02 	lds	r24, 0x023D
    5f0e:	90 91 3e 02 	lds	r25, 0x023E
    5f12:	80 78       	andi	r24, 0x80	; 128
    5f14:	90 70       	andi	r25, 0x00	; 0
    5f16:	00 97       	sbiw	r24, 0x00	; 0
    5f18:	09 f0       	breq	.+2      	; 0x5f1c <Local_voidNumberRepresentation+0x3a>
    5f1a:	dd c0       	rjmp	.+442    	; 0x60d6 <Local_voidNumberRepresentation+0x1f4>
	{
		Set_Bit(Global_u16Flags, number_repres); // activate Number_System mode
    5f1c:	80 91 3d 02 	lds	r24, 0x023D
    5f20:	90 91 3e 02 	lds	r25, 0x023E
    5f24:	80 68       	ori	r24, 0x80	; 128
    5f26:	90 93 3e 02 	sts	0x023E, r25
    5f2a:	80 93 3d 02 	sts	0x023D, r24
		LCD_enuGoto(1, 13); // Display Number_System(HEX, BIN, OCT, DEC) in last three blocks in 1st line
    5f2e:	81 e0       	ldi	r24, 0x01	; 1
    5f30:	90 e0       	ldi	r25, 0x00	; 0
    5f32:	6d e0       	ldi	r22, 0x0D	; 13
    5f34:	70 e0       	ldi	r23, 0x00	; 0
    5f36:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_enuGoto>
		switch(Global_u8PressedKey)
    5f3a:	80 91 31 02 	lds	r24, 0x0231
    5f3e:	28 2f       	mov	r18, r24
    5f40:	30 e0       	ldi	r19, 0x00	; 0
    5f42:	3f 87       	std	Y+15, r19	; 0x0f
    5f44:	2e 87       	std	Y+14, r18	; 0x0e
    5f46:	4e 85       	ldd	r20, Y+14	; 0x0e
    5f48:	5f 85       	ldd	r21, Y+15	; 0x0f
    5f4a:	44 34       	cpi	r20, 0x44	; 68
    5f4c:	51 05       	cpc	r21, r1
    5f4e:	09 f4       	brne	.+2      	; 0x5f52 <Local_voidNumberRepresentation+0x70>
    5f50:	41 c0       	rjmp	.+130    	; 0x5fd4 <Local_voidNumberRepresentation+0xf2>
    5f52:	8e 85       	ldd	r24, Y+14	; 0x0e
    5f54:	9f 85       	ldd	r25, Y+15	; 0x0f
    5f56:	85 34       	cpi	r24, 0x45	; 69
    5f58:	91 05       	cpc	r25, r1
    5f5a:	34 f4       	brge	.+12     	; 0x5f68 <Local_voidNumberRepresentation+0x86>
    5f5c:	2e 85       	ldd	r18, Y+14	; 0x0e
    5f5e:	3f 85       	ldd	r19, Y+15	; 0x0f
    5f60:	23 34       	cpi	r18, 0x43	; 67
    5f62:	31 05       	cpc	r19, r1
    5f64:	71 f0       	breq	.+28     	; 0x5f82 <Local_voidNumberRepresentation+0xa0>
    5f66:	b0 c0       	rjmp	.+352    	; 0x60c8 <Local_voidNumberRepresentation+0x1e6>
    5f68:	4e 85       	ldd	r20, Y+14	; 0x0e
    5f6a:	5f 85       	ldd	r21, Y+15	; 0x0f
    5f6c:	45 34       	cpi	r20, 0x45	; 69
    5f6e:	51 05       	cpc	r21, r1
    5f70:	09 f4       	brne	.+2      	; 0x5f74 <Local_voidNumberRepresentation+0x92>
    5f72:	59 c0       	rjmp	.+178    	; 0x6026 <Local_voidNumberRepresentation+0x144>
    5f74:	8e 85       	ldd	r24, Y+14	; 0x0e
    5f76:	9f 85       	ldd	r25, Y+15	; 0x0f
    5f78:	86 34       	cpi	r24, 0x46	; 70
    5f7a:	91 05       	cpc	r25, r1
    5f7c:	09 f4       	brne	.+2      	; 0x5f80 <Local_voidNumberRepresentation+0x9e>
    5f7e:	7c c0       	rjmp	.+248    	; 0x6078 <Local_voidNumberRepresentation+0x196>
    5f80:	a3 c0       	rjmp	.+326    	; 0x60c8 <Local_voidNumberRepresentation+0x1e6>
		{
		case 'C':
			LCD_enuDisplayString("DEC");
    5f82:	83 e6       	ldi	r24, 0x63	; 99
    5f84:	90 e0       	ldi	r25, 0x00	; 0
    5f86:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
			Set_Bit(Global_u16Flags, last_is_dec);
    5f8a:	80 91 3d 02 	lds	r24, 0x023D
    5f8e:	90 91 3e 02 	lds	r25, 0x023E
    5f92:	94 60       	ori	r25, 0x04	; 4
    5f94:	90 93 3e 02 	sts	0x023E, r25
    5f98:	80 93 3d 02 	sts	0x023D, r24
			Clr_Bit(Global_u16Flags, last_is_hex);
    5f9c:	80 91 3d 02 	lds	r24, 0x023D
    5fa0:	90 91 3e 02 	lds	r25, 0x023E
    5fa4:	9d 7f       	andi	r25, 0xFD	; 253
    5fa6:	90 93 3e 02 	sts	0x023E, r25
    5faa:	80 93 3d 02 	sts	0x023D, r24
			Clr_Bit(Global_u16Flags, last_is_bin);
    5fae:	80 91 3d 02 	lds	r24, 0x023D
    5fb2:	90 91 3e 02 	lds	r25, 0x023E
    5fb6:	97 7f       	andi	r25, 0xF7	; 247
    5fb8:	90 93 3e 02 	sts	0x023E, r25
    5fbc:	80 93 3d 02 	sts	0x023D, r24
			Clr_Bit(Global_u16Flags, last_is_oct);
    5fc0:	80 91 3d 02 	lds	r24, 0x023D
    5fc4:	90 91 3e 02 	lds	r25, 0x023E
    5fc8:	9f 7e       	andi	r25, 0xEF	; 239
    5fca:	90 93 3e 02 	sts	0x023E, r25
    5fce:	80 93 3d 02 	sts	0x023D, r24
    5fd2:	7a c0       	rjmp	.+244    	; 0x60c8 <Local_voidNumberRepresentation+0x1e6>
			break;
		case 'D':
			LCD_enuDisplayString("HEX");
    5fd4:	87 e6       	ldi	r24, 0x67	; 103
    5fd6:	90 e0       	ldi	r25, 0x00	; 0
    5fd8:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
			Set_Bit(Global_u16Flags, last_is_hex);
    5fdc:	80 91 3d 02 	lds	r24, 0x023D
    5fe0:	90 91 3e 02 	lds	r25, 0x023E
    5fe4:	92 60       	ori	r25, 0x02	; 2
    5fe6:	90 93 3e 02 	sts	0x023E, r25
    5fea:	80 93 3d 02 	sts	0x023D, r24
			Clr_Bit(Global_u16Flags, last_is_dec);
    5fee:	80 91 3d 02 	lds	r24, 0x023D
    5ff2:	90 91 3e 02 	lds	r25, 0x023E
    5ff6:	9b 7f       	andi	r25, 0xFB	; 251
    5ff8:	90 93 3e 02 	sts	0x023E, r25
    5ffc:	80 93 3d 02 	sts	0x023D, r24
			Clr_Bit(Global_u16Flags, last_is_bin);
    6000:	80 91 3d 02 	lds	r24, 0x023D
    6004:	90 91 3e 02 	lds	r25, 0x023E
    6008:	97 7f       	andi	r25, 0xF7	; 247
    600a:	90 93 3e 02 	sts	0x023E, r25
    600e:	80 93 3d 02 	sts	0x023D, r24
			Clr_Bit(Global_u16Flags, last_is_oct);
    6012:	80 91 3d 02 	lds	r24, 0x023D
    6016:	90 91 3e 02 	lds	r25, 0x023E
    601a:	9f 7e       	andi	r25, 0xEF	; 239
    601c:	90 93 3e 02 	sts	0x023E, r25
    6020:	80 93 3d 02 	sts	0x023D, r24
    6024:	51 c0       	rjmp	.+162    	; 0x60c8 <Local_voidNumberRepresentation+0x1e6>
			break;
		case 'E':
			LCD_enuDisplayString("BIN");
    6026:	8b e6       	ldi	r24, 0x6B	; 107
    6028:	90 e0       	ldi	r25, 0x00	; 0
    602a:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
			Set_Bit(Global_u16Flags, last_is_bin);
    602e:	80 91 3d 02 	lds	r24, 0x023D
    6032:	90 91 3e 02 	lds	r25, 0x023E
    6036:	98 60       	ori	r25, 0x08	; 8
    6038:	90 93 3e 02 	sts	0x023E, r25
    603c:	80 93 3d 02 	sts	0x023D, r24
			Clr_Bit(Global_u16Flags, last_is_hex);
    6040:	80 91 3d 02 	lds	r24, 0x023D
    6044:	90 91 3e 02 	lds	r25, 0x023E
    6048:	9d 7f       	andi	r25, 0xFD	; 253
    604a:	90 93 3e 02 	sts	0x023E, r25
    604e:	80 93 3d 02 	sts	0x023D, r24
			Clr_Bit(Global_u16Flags, last_is_dec);
    6052:	80 91 3d 02 	lds	r24, 0x023D
    6056:	90 91 3e 02 	lds	r25, 0x023E
    605a:	9b 7f       	andi	r25, 0xFB	; 251
    605c:	90 93 3e 02 	sts	0x023E, r25
    6060:	80 93 3d 02 	sts	0x023D, r24
			Clr_Bit(Global_u16Flags, last_is_oct);
    6064:	80 91 3d 02 	lds	r24, 0x023D
    6068:	90 91 3e 02 	lds	r25, 0x023E
    606c:	9f 7e       	andi	r25, 0xEF	; 239
    606e:	90 93 3e 02 	sts	0x023E, r25
    6072:	80 93 3d 02 	sts	0x023D, r24
    6076:	28 c0       	rjmp	.+80     	; 0x60c8 <Local_voidNumberRepresentation+0x1e6>
			break;
		case 'F':
			LCD_enuDisplayString("OCT");
    6078:	8f e6       	ldi	r24, 0x6F	; 111
    607a:	90 e0       	ldi	r25, 0x00	; 0
    607c:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
			Set_Bit(Global_u16Flags, last_is_oct);
    6080:	80 91 3d 02 	lds	r24, 0x023D
    6084:	90 91 3e 02 	lds	r25, 0x023E
    6088:	90 61       	ori	r25, 0x10	; 16
    608a:	90 93 3e 02 	sts	0x023E, r25
    608e:	80 93 3d 02 	sts	0x023D, r24
			Clr_Bit(Global_u16Flags, last_is_hex);
    6092:	80 91 3d 02 	lds	r24, 0x023D
    6096:	90 91 3e 02 	lds	r25, 0x023E
    609a:	9d 7f       	andi	r25, 0xFD	; 253
    609c:	90 93 3e 02 	sts	0x023E, r25
    60a0:	80 93 3d 02 	sts	0x023D, r24
			Clr_Bit(Global_u16Flags, last_is_bin);
    60a4:	80 91 3d 02 	lds	r24, 0x023D
    60a8:	90 91 3e 02 	lds	r25, 0x023E
    60ac:	97 7f       	andi	r25, 0xF7	; 247
    60ae:	90 93 3e 02 	sts	0x023E, r25
    60b2:	80 93 3d 02 	sts	0x023D, r24
			Clr_Bit(Global_u16Flags, last_is_dec);
    60b6:	80 91 3d 02 	lds	r24, 0x023D
    60ba:	90 91 3e 02 	lds	r25, 0x023E
    60be:	9b 7f       	andi	r25, 0xFB	; 251
    60c0:	90 93 3e 02 	sts	0x023E, r25
    60c4:	80 93 3d 02 	sts	0x023D, r24
			break;
		}
		LCD_enuGoto(2, 0); // Display Number in first block in 2nd line
    60c8:	82 e0       	ldi	r24, 0x02	; 2
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	60 e0       	ldi	r22, 0x00	; 0
    60ce:	70 e0       	ldi	r23, 0x00	; 0
    60d0:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_enuGoto>
    60d4:	c4 c2       	rjmp	.+1416   	; 0x665e <Local_voidNumberRepresentation+0x77c>
	}
	else
	{
		LCD_enuGoto(1, 13); // Display Number_System(HEX, BIN, OCT, DEC) in last three blocks in 1st line
    60d6:	81 e0       	ldi	r24, 0x01	; 1
    60d8:	90 e0       	ldi	r25, 0x00	; 0
    60da:	6d e0       	ldi	r22, 0x0D	; 13
    60dc:	70 e0       	ldi	r23, 0x00	; 0
    60de:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_enuGoto>

		if(Get_Bit(Global_u16Flags, last_is_dec)) // Check Current number_system representation is decimal or not
    60e2:	80 91 3d 02 	lds	r24, 0x023D
    60e6:	90 91 3e 02 	lds	r25, 0x023E
    60ea:	80 70       	andi	r24, 0x00	; 0
    60ec:	94 70       	andi	r25, 0x04	; 4
    60ee:	00 97       	sbiw	r24, 0x00	; 0
    60f0:	09 f4       	brne	.+2      	; 0x60f4 <Local_voidNumberRepresentation+0x212>
    60f2:	8d c0       	rjmp	.+282    	; 0x620e <Local_voidNumberRepresentation+0x32c>
		{
			if(Global_u8PressedKey != 'C')
    60f4:	80 91 31 02 	lds	r24, 0x0231
    60f8:	83 34       	cpi	r24, 0x43	; 67
    60fa:	09 f4       	brne	.+2      	; 0x60fe <Local_voidNumberRepresentation+0x21c>
    60fc:	b0 c2       	rjmp	.+1376   	; 0x665e <Local_voidNumberRepresentation+0x77c>
			{
				Clr_Bit(Global_u16Flags, last_is_dec);
    60fe:	80 91 3d 02 	lds	r24, 0x023D
    6102:	90 91 3e 02 	lds	r25, 0x023E
    6106:	9b 7f       	andi	r25, 0xFB	; 251
    6108:	90 93 3e 02 	sts	0x023E, r25
    610c:	80 93 3d 02 	sts	0x023D, r24

				Local_voidClrArray(Global_Au8NumberRepresentation, NUM_OF_BITS); // Clear Array to use it again in converting process
    6110:	82 e8       	ldi	r24, 0x82	; 130
    6112:	92 e0       	ldi	r25, 0x02	; 2
    6114:	60 e1       	ldi	r22, 0x10	; 16
    6116:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <Local_voidClrArray>

				switch(Global_u8PressedKey)
    611a:	80 91 31 02 	lds	r24, 0x0231
    611e:	28 2f       	mov	r18, r24
    6120:	30 e0       	ldi	r19, 0x00	; 0
    6122:	3d 87       	std	Y+13, r19	; 0x0d
    6124:	2c 87       	std	Y+12, r18	; 0x0c
    6126:	4c 85       	ldd	r20, Y+12	; 0x0c
    6128:	5d 85       	ldd	r21, Y+13	; 0x0d
    612a:	45 34       	cpi	r20, 0x45	; 69
    612c:	51 05       	cpc	r21, r1
    612e:	69 f1       	breq	.+90     	; 0x618a <Local_voidNumberRepresentation+0x2a8>
    6130:	8c 85       	ldd	r24, Y+12	; 0x0c
    6132:	9d 85       	ldd	r25, Y+13	; 0x0d
    6134:	86 34       	cpi	r24, 0x46	; 70
    6136:	91 05       	cpc	r25, r1
    6138:	09 f4       	brne	.+2      	; 0x613c <Local_voidNumberRepresentation+0x25a>
    613a:	48 c0       	rjmp	.+144    	; 0x61cc <Local_voidNumberRepresentation+0x2ea>
    613c:	2c 85       	ldd	r18, Y+12	; 0x0c
    613e:	3d 85       	ldd	r19, Y+13	; 0x0d
    6140:	24 34       	cpi	r18, 0x44	; 68
    6142:	31 05       	cpc	r19, r1
    6144:	09 f0       	breq	.+2      	; 0x6148 <Local_voidNumberRepresentation+0x266>
    6146:	2d c2       	rjmp	.+1114   	; 0x65a2 <Local_voidNumberRepresentation+0x6c0>
				{
				case 'D':
					LCD_enuDisplayString("HEX");
    6148:	87 e6       	ldi	r24, 0x67	; 103
    614a:	90 e0       	ldi	r25, 0x00	; 0
    614c:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
					Dec2Hex((u16)Global_Af32Operands[0], Global_Au8NumberRepresentation); // Convert Decimal to Hexa and assign it in global array
    6150:	80 91 47 02 	lds	r24, 0x0247
    6154:	90 91 48 02 	lds	r25, 0x0248
    6158:	a0 91 49 02 	lds	r26, 0x0249
    615c:	b0 91 4a 02 	lds	r27, 0x024A
    6160:	bc 01       	movw	r22, r24
    6162:	cd 01       	movw	r24, r26
    6164:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    6168:	dc 01       	movw	r26, r24
    616a:	cb 01       	movw	r24, r22
    616c:	22 e8       	ldi	r18, 0x82	; 130
    616e:	32 e0       	ldi	r19, 0x02	; 2
    6170:	b9 01       	movw	r22, r18
    6172:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <Dec2Hex>
					Set_Bit(Global_u16Flags, last_is_hex);
    6176:	80 91 3d 02 	lds	r24, 0x023D
    617a:	90 91 3e 02 	lds	r25, 0x023E
    617e:	92 60       	ori	r25, 0x02	; 2
    6180:	90 93 3e 02 	sts	0x023E, r25
    6184:	80 93 3d 02 	sts	0x023D, r24
    6188:	0c c2       	rjmp	.+1048   	; 0x65a2 <Local_voidNumberRepresentation+0x6c0>
					break;
				case 'E':
					LCD_enuDisplayString("BIN");
    618a:	8b e6       	ldi	r24, 0x6B	; 107
    618c:	90 e0       	ldi	r25, 0x00	; 0
    618e:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
					Dec2Bin((u16)Global_Af32Operands[0], Global_Au8NumberRepresentation);// Convert Decimal to Binary and assign it in global array
    6192:	80 91 47 02 	lds	r24, 0x0247
    6196:	90 91 48 02 	lds	r25, 0x0248
    619a:	a0 91 49 02 	lds	r26, 0x0249
    619e:	b0 91 4a 02 	lds	r27, 0x024A
    61a2:	bc 01       	movw	r22, r24
    61a4:	cd 01       	movw	r24, r26
    61a6:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    61aa:	dc 01       	movw	r26, r24
    61ac:	cb 01       	movw	r24, r22
    61ae:	22 e8       	ldi	r18, 0x82	; 130
    61b0:	32 e0       	ldi	r19, 0x02	; 2
    61b2:	b9 01       	movw	r22, r18
    61b4:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Dec2Bin>
					Set_Bit(Global_u16Flags, last_is_bin);
    61b8:	80 91 3d 02 	lds	r24, 0x023D
    61bc:	90 91 3e 02 	lds	r25, 0x023E
    61c0:	98 60       	ori	r25, 0x08	; 8
    61c2:	90 93 3e 02 	sts	0x023E, r25
    61c6:	80 93 3d 02 	sts	0x023D, r24
    61ca:	eb c1       	rjmp	.+982    	; 0x65a2 <Local_voidNumberRepresentation+0x6c0>
					break;
				case 'F':
					LCD_enuDisplayString("OCT");
    61cc:	8f e6       	ldi	r24, 0x6F	; 111
    61ce:	90 e0       	ldi	r25, 0x00	; 0
    61d0:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
					Dec2Oct((u16)Global_Af32Operands[0], Global_Au8NumberRepresentation);// Convert Decimal to Octal and assign it in global array
    61d4:	80 91 47 02 	lds	r24, 0x0247
    61d8:	90 91 48 02 	lds	r25, 0x0248
    61dc:	a0 91 49 02 	lds	r26, 0x0249
    61e0:	b0 91 4a 02 	lds	r27, 0x024A
    61e4:	bc 01       	movw	r22, r24
    61e6:	cd 01       	movw	r24, r26
    61e8:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    61ec:	dc 01       	movw	r26, r24
    61ee:	cb 01       	movw	r24, r22
    61f0:	22 e8       	ldi	r18, 0x82	; 130
    61f2:	32 e0       	ldi	r19, 0x02	; 2
    61f4:	b9 01       	movw	r22, r18
    61f6:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <Dec2Oct>
					Set_Bit(Global_u16Flags, last_is_oct);
    61fa:	80 91 3d 02 	lds	r24, 0x023D
    61fe:	90 91 3e 02 	lds	r25, 0x023E
    6202:	90 61       	ori	r25, 0x10	; 16
    6204:	90 93 3e 02 	sts	0x023E, r25
    6208:	80 93 3d 02 	sts	0x023D, r24
    620c:	ca c1       	rjmp	.+916    	; 0x65a2 <Local_voidNumberRepresentation+0x6c0>
					break;
				}
			}
			else return;//LCD_enuDisplayString("DEC");
		}
		else if(Get_Bit(Global_u16Flags, last_is_hex))// Check Current number_system representation is hexa_decimal or not
    620e:	80 91 3d 02 	lds	r24, 0x023D
    6212:	90 91 3e 02 	lds	r25, 0x023E
    6216:	80 70       	andi	r24, 0x00	; 0
    6218:	92 70       	andi	r25, 0x02	; 2
    621a:	00 97       	sbiw	r24, 0x00	; 0
    621c:	09 f4       	brne	.+2      	; 0x6220 <Local_voidNumberRepresentation+0x33e>
    621e:	93 c0       	rjmp	.+294    	; 0x6346 <Local_voidNumberRepresentation+0x464>
		{
			if(Global_u8PressedKey != 'D')
    6220:	80 91 31 02 	lds	r24, 0x0231
    6224:	84 34       	cpi	r24, 0x44	; 68
    6226:	09 f4       	brne	.+2      	; 0x622a <Local_voidNumberRepresentation+0x348>
    6228:	89 c0       	rjmp	.+274    	; 0x633c <Local_voidNumberRepresentation+0x45a>
			{
				Clr_Bit(Global_u16Flags, last_is_hex);
    622a:	80 91 3d 02 	lds	r24, 0x023D
    622e:	90 91 3e 02 	lds	r25, 0x023E
    6232:	9d 7f       	andi	r25, 0xFD	; 253
    6234:	90 93 3e 02 	sts	0x023E, r25
    6238:	80 93 3d 02 	sts	0x023D, r24

				Global_Af32Operands[0] = Hex2Dec(Global_Au8NumberRepresentation);// Convert Hexa to Decimal and assign it in first element global operands array
    623c:	82 e8       	ldi	r24, 0x82	; 130
    623e:	92 e0       	ldi	r25, 0x02	; 2
    6240:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <Hex2Dec>
    6244:	cc 01       	movw	r24, r24
    6246:	a0 e0       	ldi	r26, 0x00	; 0
    6248:	b0 e0       	ldi	r27, 0x00	; 0
    624a:	bc 01       	movw	r22, r24
    624c:	cd 01       	movw	r24, r26
    624e:	0e 94 95 06 	call	0xd2a	; 0xd2a <__floatunsisf>
    6252:	dc 01       	movw	r26, r24
    6254:	cb 01       	movw	r24, r22
    6256:	80 93 47 02 	sts	0x0247, r24
    625a:	90 93 48 02 	sts	0x0248, r25
    625e:	a0 93 49 02 	sts	0x0249, r26
    6262:	b0 93 4a 02 	sts	0x024A, r27
				Local_voidClrArray(Global_Au8NumberRepresentation, NUM_OF_BITS);// Clear Array to use it again in converting process
    6266:	82 e8       	ldi	r24, 0x82	; 130
    6268:	92 e0       	ldi	r25, 0x02	; 2
    626a:	60 e1       	ldi	r22, 0x10	; 16
    626c:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <Local_voidClrArray>

				switch(Global_u8PressedKey)
    6270:	80 91 31 02 	lds	r24, 0x0231
    6274:	48 2f       	mov	r20, r24
    6276:	50 e0       	ldi	r21, 0x00	; 0
    6278:	5b 87       	std	Y+11, r21	; 0x0b
    627a:	4a 87       	std	Y+10, r20	; 0x0a
    627c:	8a 85       	ldd	r24, Y+10	; 0x0a
    627e:	9b 85       	ldd	r25, Y+11	; 0x0b
    6280:	85 34       	cpi	r24, 0x45	; 69
    6282:	91 05       	cpc	r25, r1
    6284:	c9 f0       	breq	.+50     	; 0x62b8 <Local_voidNumberRepresentation+0x3d6>
    6286:	2a 85       	ldd	r18, Y+10	; 0x0a
    6288:	3b 85       	ldd	r19, Y+11	; 0x0b
    628a:	26 34       	cpi	r18, 0x46	; 70
    628c:	31 05       	cpc	r19, r1
    628e:	a9 f1       	breq	.+106    	; 0x62fa <Local_voidNumberRepresentation+0x418>
    6290:	4a 85       	ldd	r20, Y+10	; 0x0a
    6292:	5b 85       	ldd	r21, Y+11	; 0x0b
    6294:	43 34       	cpi	r20, 0x43	; 67
    6296:	51 05       	cpc	r21, r1
    6298:	09 f0       	breq	.+2      	; 0x629c <Local_voidNumberRepresentation+0x3ba>
    629a:	83 c1       	rjmp	.+774    	; 0x65a2 <Local_voidNumberRepresentation+0x6c0>
				{
				case 'C':
					LCD_enuDisplayString("DEC");
    629c:	83 e6       	ldi	r24, 0x63	; 99
    629e:	90 e0       	ldi	r25, 0x00	; 0
    62a0:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
					Set_Bit(Global_u16Flags, last_is_dec);
    62a4:	80 91 3d 02 	lds	r24, 0x023D
    62a8:	90 91 3e 02 	lds	r25, 0x023E
    62ac:	94 60       	ori	r25, 0x04	; 4
    62ae:	90 93 3e 02 	sts	0x023E, r25
    62b2:	80 93 3d 02 	sts	0x023D, r24
    62b6:	75 c1       	rjmp	.+746    	; 0x65a2 <Local_voidNumberRepresentation+0x6c0>
					break;
				case 'E':
					LCD_enuDisplayString("BIN");
    62b8:	8b e6       	ldi	r24, 0x6B	; 107
    62ba:	90 e0       	ldi	r25, 0x00	; 0
    62bc:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
					Dec2Bin((u16)Global_Af32Operands[0], Global_Au8NumberRepresentation);// Convert Decimal to Binary and assign it in global array
    62c0:	80 91 47 02 	lds	r24, 0x0247
    62c4:	90 91 48 02 	lds	r25, 0x0248
    62c8:	a0 91 49 02 	lds	r26, 0x0249
    62cc:	b0 91 4a 02 	lds	r27, 0x024A
    62d0:	bc 01       	movw	r22, r24
    62d2:	cd 01       	movw	r24, r26
    62d4:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    62d8:	dc 01       	movw	r26, r24
    62da:	cb 01       	movw	r24, r22
    62dc:	22 e8       	ldi	r18, 0x82	; 130
    62de:	32 e0       	ldi	r19, 0x02	; 2
    62e0:	b9 01       	movw	r22, r18
    62e2:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Dec2Bin>
					Set_Bit(Global_u16Flags, last_is_bin);
    62e6:	80 91 3d 02 	lds	r24, 0x023D
    62ea:	90 91 3e 02 	lds	r25, 0x023E
    62ee:	98 60       	ori	r25, 0x08	; 8
    62f0:	90 93 3e 02 	sts	0x023E, r25
    62f4:	80 93 3d 02 	sts	0x023D, r24
    62f8:	54 c1       	rjmp	.+680    	; 0x65a2 <Local_voidNumberRepresentation+0x6c0>
					break;
				case 'F':
					LCD_enuDisplayString("OCT");
    62fa:	8f e6       	ldi	r24, 0x6F	; 111
    62fc:	90 e0       	ldi	r25, 0x00	; 0
    62fe:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
					Dec2Oct((u16)Global_Af32Operands[0], Global_Au8NumberRepresentation);// Convert Decimal to octal and assign it in global array
    6302:	80 91 47 02 	lds	r24, 0x0247
    6306:	90 91 48 02 	lds	r25, 0x0248
    630a:	a0 91 49 02 	lds	r26, 0x0249
    630e:	b0 91 4a 02 	lds	r27, 0x024A
    6312:	bc 01       	movw	r22, r24
    6314:	cd 01       	movw	r24, r26
    6316:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    631a:	dc 01       	movw	r26, r24
    631c:	cb 01       	movw	r24, r22
    631e:	22 e8       	ldi	r18, 0x82	; 130
    6320:	32 e0       	ldi	r19, 0x02	; 2
    6322:	b9 01       	movw	r22, r18
    6324:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <Dec2Oct>
					Set_Bit(Global_u16Flags, last_is_oct);
    6328:	80 91 3d 02 	lds	r24, 0x023D
    632c:	90 91 3e 02 	lds	r25, 0x023E
    6330:	90 61       	ori	r25, 0x10	; 16
    6332:	90 93 3e 02 	sts	0x023E, r25
    6336:	80 93 3d 02 	sts	0x023D, r24
    633a:	33 c1       	rjmp	.+614    	; 0x65a2 <Local_voidNumberRepresentation+0x6c0>
					break;
				}
			}
			else LCD_enuDisplayString("HEX");
    633c:	87 e6       	ldi	r24, 0x67	; 103
    633e:	90 e0       	ldi	r25, 0x00	; 0
    6340:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
    6344:	2e c1       	rjmp	.+604    	; 0x65a2 <Local_voidNumberRepresentation+0x6c0>
		}
		else if(Get_Bit(Global_u16Flags, last_is_bin)) // Check Current number_system representation is binary or not
    6346:	80 91 3d 02 	lds	r24, 0x023D
    634a:	90 91 3e 02 	lds	r25, 0x023E
    634e:	80 70       	andi	r24, 0x00	; 0
    6350:	98 70       	andi	r25, 0x08	; 8
    6352:	00 97       	sbiw	r24, 0x00	; 0
    6354:	09 f4       	brne	.+2      	; 0x6358 <Local_voidNumberRepresentation+0x476>
    6356:	93 c0       	rjmp	.+294    	; 0x647e <Local_voidNumberRepresentation+0x59c>
		{
			if(Global_u8PressedKey != 'E')
    6358:	80 91 31 02 	lds	r24, 0x0231
    635c:	85 34       	cpi	r24, 0x45	; 69
    635e:	09 f4       	brne	.+2      	; 0x6362 <Local_voidNumberRepresentation+0x480>
    6360:	89 c0       	rjmp	.+274    	; 0x6474 <Local_voidNumberRepresentation+0x592>
			{
				Clr_Bit(Global_u16Flags, last_is_bin);
    6362:	80 91 3d 02 	lds	r24, 0x023D
    6366:	90 91 3e 02 	lds	r25, 0x023E
    636a:	97 7f       	andi	r25, 0xF7	; 247
    636c:	90 93 3e 02 	sts	0x023E, r25
    6370:	80 93 3d 02 	sts	0x023D, r24

				Global_Af32Operands[0] = Bin2Dec(Global_Au8NumberRepresentation);// Convert binary to Decimal and assign it in first element global operands array
    6374:	82 e8       	ldi	r24, 0x82	; 130
    6376:	92 e0       	ldi	r25, 0x02	; 2
    6378:	0e 94 4b 0e 	call	0x1c96	; 0x1c96 <Bin2Dec>
    637c:	cc 01       	movw	r24, r24
    637e:	a0 e0       	ldi	r26, 0x00	; 0
    6380:	b0 e0       	ldi	r27, 0x00	; 0
    6382:	bc 01       	movw	r22, r24
    6384:	cd 01       	movw	r24, r26
    6386:	0e 94 95 06 	call	0xd2a	; 0xd2a <__floatunsisf>
    638a:	dc 01       	movw	r26, r24
    638c:	cb 01       	movw	r24, r22
    638e:	80 93 47 02 	sts	0x0247, r24
    6392:	90 93 48 02 	sts	0x0248, r25
    6396:	a0 93 49 02 	sts	0x0249, r26
    639a:	b0 93 4a 02 	sts	0x024A, r27
				Local_voidClrArray(Global_Au8NumberRepresentation, NUM_OF_BITS); // Clear Array to use it again in converting process
    639e:	82 e8       	ldi	r24, 0x82	; 130
    63a0:	92 e0       	ldi	r25, 0x02	; 2
    63a2:	60 e1       	ldi	r22, 0x10	; 16
    63a4:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <Local_voidClrArray>

				switch(Global_u8PressedKey)
    63a8:	80 91 31 02 	lds	r24, 0x0231
    63ac:	28 2f       	mov	r18, r24
    63ae:	30 e0       	ldi	r19, 0x00	; 0
    63b0:	39 87       	std	Y+9, r19	; 0x09
    63b2:	28 87       	std	Y+8, r18	; 0x08
    63b4:	48 85       	ldd	r20, Y+8	; 0x08
    63b6:	59 85       	ldd	r21, Y+9	; 0x09
    63b8:	44 34       	cpi	r20, 0x44	; 68
    63ba:	51 05       	cpc	r21, r1
    63bc:	c9 f0       	breq	.+50     	; 0x63f0 <Local_voidNumberRepresentation+0x50e>
    63be:	88 85       	ldd	r24, Y+8	; 0x08
    63c0:	99 85       	ldd	r25, Y+9	; 0x09
    63c2:	86 34       	cpi	r24, 0x46	; 70
    63c4:	91 05       	cpc	r25, r1
    63c6:	a9 f1       	breq	.+106    	; 0x6432 <Local_voidNumberRepresentation+0x550>
    63c8:	28 85       	ldd	r18, Y+8	; 0x08
    63ca:	39 85       	ldd	r19, Y+9	; 0x09
    63cc:	23 34       	cpi	r18, 0x43	; 67
    63ce:	31 05       	cpc	r19, r1
    63d0:	09 f0       	breq	.+2      	; 0x63d4 <Local_voidNumberRepresentation+0x4f2>
    63d2:	e7 c0       	rjmp	.+462    	; 0x65a2 <Local_voidNumberRepresentation+0x6c0>
				{
				case 'C':
					LCD_enuDisplayString("DEC");
    63d4:	83 e6       	ldi	r24, 0x63	; 99
    63d6:	90 e0       	ldi	r25, 0x00	; 0
    63d8:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
					Set_Bit(Global_u16Flags, last_is_dec);
    63dc:	80 91 3d 02 	lds	r24, 0x023D
    63e0:	90 91 3e 02 	lds	r25, 0x023E
    63e4:	94 60       	ori	r25, 0x04	; 4
    63e6:	90 93 3e 02 	sts	0x023E, r25
    63ea:	80 93 3d 02 	sts	0x023D, r24
    63ee:	d9 c0       	rjmp	.+434    	; 0x65a2 <Local_voidNumberRepresentation+0x6c0>
					break;
				case 'D':
					LCD_enuDisplayString("HEX");
    63f0:	87 e6       	ldi	r24, 0x67	; 103
    63f2:	90 e0       	ldi	r25, 0x00	; 0
    63f4:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
					Dec2Hex((u16)Global_Af32Operands[0], Global_Au8NumberRepresentation);// Convert Decimal to hexa and assign it in global array
    63f8:	80 91 47 02 	lds	r24, 0x0247
    63fc:	90 91 48 02 	lds	r25, 0x0248
    6400:	a0 91 49 02 	lds	r26, 0x0249
    6404:	b0 91 4a 02 	lds	r27, 0x024A
    6408:	bc 01       	movw	r22, r24
    640a:	cd 01       	movw	r24, r26
    640c:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    6410:	dc 01       	movw	r26, r24
    6412:	cb 01       	movw	r24, r22
    6414:	22 e8       	ldi	r18, 0x82	; 130
    6416:	32 e0       	ldi	r19, 0x02	; 2
    6418:	b9 01       	movw	r22, r18
    641a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <Dec2Hex>
					Set_Bit(Global_u16Flags, last_is_hex);
    641e:	80 91 3d 02 	lds	r24, 0x023D
    6422:	90 91 3e 02 	lds	r25, 0x023E
    6426:	92 60       	ori	r25, 0x02	; 2
    6428:	90 93 3e 02 	sts	0x023E, r25
    642c:	80 93 3d 02 	sts	0x023D, r24
    6430:	b8 c0       	rjmp	.+368    	; 0x65a2 <Local_voidNumberRepresentation+0x6c0>
					break;
				case 'F':
					LCD_enuDisplayString("OCT");
    6432:	8f e6       	ldi	r24, 0x6F	; 111
    6434:	90 e0       	ldi	r25, 0x00	; 0
    6436:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
					Dec2Oct((u16)Global_Af32Operands[0], Global_Au8NumberRepresentation);// Convert Decimal to octal and assign it in global array
    643a:	80 91 47 02 	lds	r24, 0x0247
    643e:	90 91 48 02 	lds	r25, 0x0248
    6442:	a0 91 49 02 	lds	r26, 0x0249
    6446:	b0 91 4a 02 	lds	r27, 0x024A
    644a:	bc 01       	movw	r22, r24
    644c:	cd 01       	movw	r24, r26
    644e:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    6452:	dc 01       	movw	r26, r24
    6454:	cb 01       	movw	r24, r22
    6456:	22 e8       	ldi	r18, 0x82	; 130
    6458:	32 e0       	ldi	r19, 0x02	; 2
    645a:	b9 01       	movw	r22, r18
    645c:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <Dec2Oct>
					Set_Bit(Global_u16Flags, last_is_oct);
    6460:	80 91 3d 02 	lds	r24, 0x023D
    6464:	90 91 3e 02 	lds	r25, 0x023E
    6468:	90 61       	ori	r25, 0x10	; 16
    646a:	90 93 3e 02 	sts	0x023E, r25
    646e:	80 93 3d 02 	sts	0x023D, r24
    6472:	97 c0       	rjmp	.+302    	; 0x65a2 <Local_voidNumberRepresentation+0x6c0>
					break;
				}
			}
			else LCD_enuDisplayString("BIN");
    6474:	8b e6       	ldi	r24, 0x6B	; 107
    6476:	90 e0       	ldi	r25, 0x00	; 0
    6478:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
    647c:	92 c0       	rjmp	.+292    	; 0x65a2 <Local_voidNumberRepresentation+0x6c0>
		}
		else //  Current number_system representation is octal
		{
			if(Global_u8PressedKey != 'F')
    647e:	80 91 31 02 	lds	r24, 0x0231
    6482:	86 34       	cpi	r24, 0x46	; 70
    6484:	09 f4       	brne	.+2      	; 0x6488 <Local_voidNumberRepresentation+0x5a6>
    6486:	89 c0       	rjmp	.+274    	; 0x659a <Local_voidNumberRepresentation+0x6b8>
			{
				Clr_Bit(Global_u16Flags, last_is_oct);
    6488:	80 91 3d 02 	lds	r24, 0x023D
    648c:	90 91 3e 02 	lds	r25, 0x023E
    6490:	9f 7e       	andi	r25, 0xEF	; 239
    6492:	90 93 3e 02 	sts	0x023E, r25
    6496:	80 93 3d 02 	sts	0x023D, r24

				Global_Af32Operands[0] = Oct2Dec(Global_Au8NumberRepresentation);// Convert octal to Decimal and assign it in first element global operands array
    649a:	82 e8       	ldi	r24, 0x82	; 130
    649c:	92 e0       	ldi	r25, 0x02	; 2
    649e:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <Oct2Dec>
    64a2:	cc 01       	movw	r24, r24
    64a4:	a0 e0       	ldi	r26, 0x00	; 0
    64a6:	b0 e0       	ldi	r27, 0x00	; 0
    64a8:	bc 01       	movw	r22, r24
    64aa:	cd 01       	movw	r24, r26
    64ac:	0e 94 95 06 	call	0xd2a	; 0xd2a <__floatunsisf>
    64b0:	dc 01       	movw	r26, r24
    64b2:	cb 01       	movw	r24, r22
    64b4:	80 93 47 02 	sts	0x0247, r24
    64b8:	90 93 48 02 	sts	0x0248, r25
    64bc:	a0 93 49 02 	sts	0x0249, r26
    64c0:	b0 93 4a 02 	sts	0x024A, r27
				Local_voidClrArray(Global_Au8NumberRepresentation, NUM_OF_BITS); // Clear Array to use it again in converting process
    64c4:	82 e8       	ldi	r24, 0x82	; 130
    64c6:	92 e0       	ldi	r25, 0x02	; 2
    64c8:	60 e1       	ldi	r22, 0x10	; 16
    64ca:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <Local_voidClrArray>

				switch(Global_u8PressedKey)
    64ce:	80 91 31 02 	lds	r24, 0x0231
    64d2:	48 2f       	mov	r20, r24
    64d4:	50 e0       	ldi	r21, 0x00	; 0
    64d6:	5f 83       	std	Y+7, r21	; 0x07
    64d8:	4e 83       	std	Y+6, r20	; 0x06
    64da:	8e 81       	ldd	r24, Y+6	; 0x06
    64dc:	9f 81       	ldd	r25, Y+7	; 0x07
    64de:	84 34       	cpi	r24, 0x44	; 68
    64e0:	91 05       	cpc	r25, r1
    64e2:	c9 f0       	breq	.+50     	; 0x6516 <Local_voidNumberRepresentation+0x634>
    64e4:	2e 81       	ldd	r18, Y+6	; 0x06
    64e6:	3f 81       	ldd	r19, Y+7	; 0x07
    64e8:	25 34       	cpi	r18, 0x45	; 69
    64ea:	31 05       	cpc	r19, r1
    64ec:	a9 f1       	breq	.+106    	; 0x6558 <Local_voidNumberRepresentation+0x676>
    64ee:	4e 81       	ldd	r20, Y+6	; 0x06
    64f0:	5f 81       	ldd	r21, Y+7	; 0x07
    64f2:	43 34       	cpi	r20, 0x43	; 67
    64f4:	51 05       	cpc	r21, r1
    64f6:	09 f0       	breq	.+2      	; 0x64fa <Local_voidNumberRepresentation+0x618>
    64f8:	54 c0       	rjmp	.+168    	; 0x65a2 <Local_voidNumberRepresentation+0x6c0>
				{
				case 'C':
					LCD_enuDisplayString("DEC");
    64fa:	83 e6       	ldi	r24, 0x63	; 99
    64fc:	90 e0       	ldi	r25, 0x00	; 0
    64fe:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
					Set_Bit(Global_u16Flags, last_is_dec);
    6502:	80 91 3d 02 	lds	r24, 0x023D
    6506:	90 91 3e 02 	lds	r25, 0x023E
    650a:	94 60       	ori	r25, 0x04	; 4
    650c:	90 93 3e 02 	sts	0x023E, r25
    6510:	80 93 3d 02 	sts	0x023D, r24
    6514:	46 c0       	rjmp	.+140    	; 0x65a2 <Local_voidNumberRepresentation+0x6c0>
					break;
				case 'D':
					LCD_enuDisplayString("HEX");
    6516:	87 e6       	ldi	r24, 0x67	; 103
    6518:	90 e0       	ldi	r25, 0x00	; 0
    651a:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
					Dec2Hex((u16)Global_Af32Operands[0], Global_Au8NumberRepresentation);// Convert Decimal to hexa and assign it in global array
    651e:	80 91 47 02 	lds	r24, 0x0247
    6522:	90 91 48 02 	lds	r25, 0x0248
    6526:	a0 91 49 02 	lds	r26, 0x0249
    652a:	b0 91 4a 02 	lds	r27, 0x024A
    652e:	bc 01       	movw	r22, r24
    6530:	cd 01       	movw	r24, r26
    6532:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    6536:	dc 01       	movw	r26, r24
    6538:	cb 01       	movw	r24, r22
    653a:	22 e8       	ldi	r18, 0x82	; 130
    653c:	32 e0       	ldi	r19, 0x02	; 2
    653e:	b9 01       	movw	r22, r18
    6540:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <Dec2Hex>
					Set_Bit(Global_u16Flags, last_is_hex);
    6544:	80 91 3d 02 	lds	r24, 0x023D
    6548:	90 91 3e 02 	lds	r25, 0x023E
    654c:	92 60       	ori	r25, 0x02	; 2
    654e:	90 93 3e 02 	sts	0x023E, r25
    6552:	80 93 3d 02 	sts	0x023D, r24
    6556:	25 c0       	rjmp	.+74     	; 0x65a2 <Local_voidNumberRepresentation+0x6c0>
					break;
				case 'E':
					LCD_enuDisplayString("BIN");
    6558:	8b e6       	ldi	r24, 0x6B	; 107
    655a:	90 e0       	ldi	r25, 0x00	; 0
    655c:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
					Dec2Bin((u16)Global_Af32Operands[0], Global_Au8NumberRepresentation);// Convert Decimal to binary and assign it in global array
    6560:	80 91 47 02 	lds	r24, 0x0247
    6564:	90 91 48 02 	lds	r25, 0x0248
    6568:	a0 91 49 02 	lds	r26, 0x0249
    656c:	b0 91 4a 02 	lds	r27, 0x024A
    6570:	bc 01       	movw	r22, r24
    6572:	cd 01       	movw	r24, r26
    6574:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    6578:	dc 01       	movw	r26, r24
    657a:	cb 01       	movw	r24, r22
    657c:	22 e8       	ldi	r18, 0x82	; 130
    657e:	32 e0       	ldi	r19, 0x02	; 2
    6580:	b9 01       	movw	r22, r18
    6582:	0e 94 92 0d 	call	0x1b24	; 0x1b24 <Dec2Bin>
					Set_Bit(Global_u16Flags, last_is_bin);
    6586:	80 91 3d 02 	lds	r24, 0x023D
    658a:	90 91 3e 02 	lds	r25, 0x023E
    658e:	98 60       	ori	r25, 0x08	; 8
    6590:	90 93 3e 02 	sts	0x023E, r25
    6594:	80 93 3d 02 	sts	0x023D, r24
    6598:	04 c0       	rjmp	.+8      	; 0x65a2 <Local_voidNumberRepresentation+0x6c0>
					break;
				}
			}
			else LCD_enuDisplayString("OCT");
    659a:	8f e6       	ldi	r24, 0x6F	; 111
    659c:	90 e0       	ldi	r25, 0x00	; 0
    659e:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
		}

		LCD_enuGoto(2, 0);// Display Number in first block in 2nd line
    65a2:	82 e0       	ldi	r24, 0x02	; 2
    65a4:	90 e0       	ldi	r25, 0x00	; 0
    65a6:	60 e0       	ldi	r22, 0x00	; 0
    65a8:	70 e0       	ldi	r23, 0x00	; 0
    65aa:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_enuGoto>
		if(Global_u8PressedKey == 'C')
    65ae:	80 91 31 02 	lds	r24, 0x0231
    65b2:	83 34       	cpi	r24, 0x43	; 67
    65b4:	09 f0       	breq	.+2      	; 0x65b8 <Local_voidNumberRepresentation+0x6d6>
    65b6:	4f c0       	rjmp	.+158    	; 0x6656 <Local_voidNumberRepresentation+0x774>
		{
			u32 tmp = Global_Af32Operands[0];
    65b8:	80 91 47 02 	lds	r24, 0x0247
    65bc:	90 91 48 02 	lds	r25, 0x0248
    65c0:	a0 91 49 02 	lds	r26, 0x0249
    65c4:	b0 91 4a 02 	lds	r27, 0x024A
    65c8:	bc 01       	movw	r22, r24
    65ca:	cd 01       	movw	r24, r26
    65cc:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    65d0:	dc 01       	movw	r26, r24
    65d2:	cb 01       	movw	r24, r22
    65d4:	8a 83       	std	Y+2, r24	; 0x02
    65d6:	9b 83       	std	Y+3, r25	; 0x03
    65d8:	ac 83       	std	Y+4, r26	; 0x04
    65da:	bd 83       	std	Y+5, r27	; 0x05
			u8 cnt = 0;
    65dc:	19 82       	std	Y+1, r1	; 0x01
    65de:	18 c0       	rjmp	.+48     	; 0x6610 <Local_voidNumberRepresentation+0x72e>
			while(tmp) // calculate number of digits
			{
				tmp/=10;
    65e0:	8a 81       	ldd	r24, Y+2	; 0x02
    65e2:	9b 81       	ldd	r25, Y+3	; 0x03
    65e4:	ac 81       	ldd	r26, Y+4	; 0x04
    65e6:	bd 81       	ldd	r27, Y+5	; 0x05
    65e8:	2a e0       	ldi	r18, 0x0A	; 10
    65ea:	30 e0       	ldi	r19, 0x00	; 0
    65ec:	40 e0       	ldi	r20, 0x00	; 0
    65ee:	50 e0       	ldi	r21, 0x00	; 0
    65f0:	bc 01       	movw	r22, r24
    65f2:	cd 01       	movw	r24, r26
    65f4:	0e 94 86 3c 	call	0x790c	; 0x790c <__udivmodsi4>
    65f8:	da 01       	movw	r26, r20
    65fa:	c9 01       	movw	r24, r18
    65fc:	8a 83       	std	Y+2, r24	; 0x02
    65fe:	9b 83       	std	Y+3, r25	; 0x03
    6600:	ac 83       	std	Y+4, r26	; 0x04
    6602:	bd 83       	std	Y+5, r27	; 0x05
				cnt++;
    6604:	89 81       	ldd	r24, Y+1	; 0x01
    6606:	8f 5f       	subi	r24, 0xFF	; 255
    6608:	89 83       	std	Y+1, r24	; 0x01
				LCD_enuDisplayChar(' ');
    660a:	80 e2       	ldi	r24, 0x20	; 32
    660c:	0e 94 60 20 	call	0x40c0	; 0x40c0 <LCD_enuDisplayChar>
		LCD_enuGoto(2, 0);// Display Number in first block in 2nd line
		if(Global_u8PressedKey == 'C')
		{
			u32 tmp = Global_Af32Operands[0];
			u8 cnt = 0;
			while(tmp) // calculate number of digits
    6610:	8a 81       	ldd	r24, Y+2	; 0x02
    6612:	9b 81       	ldd	r25, Y+3	; 0x03
    6614:	ac 81       	ldd	r26, Y+4	; 0x04
    6616:	bd 81       	ldd	r27, Y+5	; 0x05
    6618:	00 97       	sbiw	r24, 0x00	; 0
    661a:	a1 05       	cpc	r26, r1
    661c:	b1 05       	cpc	r27, r1
    661e:	01 f7       	brne	.-64     	; 0x65e0 <Local_voidNumberRepresentation+0x6fe>
			{
				tmp/=10;
				cnt++;
				LCD_enuDisplayChar(' ');
			}
			LCD_enuGoto(2, 16 - cnt); // leave number of digits from blocks
    6620:	89 81       	ldd	r24, Y+1	; 0x01
    6622:	28 2f       	mov	r18, r24
    6624:	30 e0       	ldi	r19, 0x00	; 0
    6626:	80 e1       	ldi	r24, 0x10	; 16
    6628:	90 e0       	ldi	r25, 0x00	; 0
    662a:	ac 01       	movw	r20, r24
    662c:	42 1b       	sub	r20, r18
    662e:	53 0b       	sbc	r21, r19
    6630:	9a 01       	movw	r18, r20
    6632:	82 e0       	ldi	r24, 0x02	; 2
    6634:	90 e0       	ldi	r25, 0x00	; 0
    6636:	b9 01       	movw	r22, r18
    6638:	0e 94 07 21 	call	0x420e	; 0x420e <LCD_enuGoto>
			LCD_enuWriteNumber(Global_Af32Operands[0]);// Display Decimal Number
    663c:	80 91 47 02 	lds	r24, 0x0247
    6640:	90 91 48 02 	lds	r25, 0x0248
    6644:	a0 91 49 02 	lds	r26, 0x0249
    6648:	b0 91 4a 02 	lds	r27, 0x024A
    664c:	bc 01       	movw	r22, r24
    664e:	cd 01       	movw	r24, r26
    6650:	0e 94 30 21 	call	0x4260	; 0x4260 <LCD_enuWriteNumber>
    6654:	04 c0       	rjmp	.+8      	; 0x665e <Local_voidNumberRepresentation+0x77c>
		}
		else
		{
			LCD_enuDisplayString(Global_Au8NumberRepresentation);// Display (Hexa or Binary or Octal) Number
    6656:	82 e8       	ldi	r24, 0x82	; 130
    6658:	92 e0       	ldi	r25, 0x02	; 2
    665a:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
		}
	}
}
    665e:	2f 96       	adiw	r28, 0x0f	; 15
    6660:	0f b6       	in	r0, 0x3f	; 63
    6662:	f8 94       	cli
    6664:	de bf       	out	0x3e, r29	; 62
    6666:	0f be       	out	0x3f, r0	; 63
    6668:	cd bf       	out	0x3d, r28	; 61
    666a:	cf 91       	pop	r28
    666c:	df 91       	pop	r29
    666e:	08 95       	ret

00006670 <Local_voidCalculateFunctions>:


void Local_voidCalculateFunctions(void)
{
    6670:	cf 92       	push	r12
    6672:	df 92       	push	r13
    6674:	ef 92       	push	r14
    6676:	ff 92       	push	r15
    6678:	0f 93       	push	r16
    667a:	1f 93       	push	r17
    667c:	df 93       	push	r29
    667e:	cf 93       	push	r28
    6680:	00 d0       	rcall	.+0      	; 0x6682 <Local_voidCalculateFunctions+0x12>
    6682:	cd b7       	in	r28, 0x3d	; 61
    6684:	de b7       	in	r29, 0x3e	; 62

	Clr_Bit(Global_u16Flags, High_Pre);
    6686:	80 91 3d 02 	lds	r24, 0x023D
    668a:	90 91 3e 02 	lds	r25, 0x023E
    668e:	8f 7d       	andi	r24, 0xDF	; 223
    6690:	90 93 3e 02 	sts	0x023E, r25
    6694:	80 93 3d 02 	sts	0x023D, r24
	Global_s8Op_Iterator--;
    6698:	80 91 3f 02 	lds	r24, 0x023F
    669c:	81 50       	subi	r24, 0x01	; 1
    669e:	80 93 3f 02 	sts	0x023F, r24

	if(Get_Bit(Global_u16Flags, negative) && Global_u8Operators[Global_s8Op_Iterator] == 'H')
    66a2:	80 91 3d 02 	lds	r24, 0x023D
    66a6:	90 91 3e 02 	lds	r25, 0x023E
    66aa:	81 70       	andi	r24, 0x01	; 1
    66ac:	90 70       	andi	r25, 0x00	; 0
    66ae:	98 2f       	mov	r25, r24
    66b0:	81 e0       	ldi	r24, 0x01	; 1
    66b2:	89 27       	eor	r24, r25
    66b4:	88 23       	and	r24, r24
    66b6:	09 f5       	brne	.+66     	; 0x66fa <Local_voidCalculateFunctions+0x8a>
    66b8:	80 91 3f 02 	lds	r24, 0x023F
    66bc:	99 27       	eor	r25, r25
    66be:	87 fd       	sbrc	r24, 7
    66c0:	90 95       	com	r25
    66c2:	fc 01       	movw	r30, r24
    66c4:	e9 58       	subi	r30, 0x89	; 137
    66c6:	fd 4f       	sbci	r31, 0xFD	; 253
    66c8:	80 81       	ld	r24, Z
    66ca:	88 34       	cpi	r24, 0x48	; 72
    66cc:	b1 f4       	brne	.+44     	; 0x66fa <Local_voidCalculateFunctions+0x8a>
	{
		LCD_enuClearDisplay();
    66ce:	0e 94 79 20 	call	0x40f2	; 0x40f2 <LCD_enuClearDisplay>
		Set_Bit(Global_u16Flags, math_error);
    66d2:	80 91 3d 02 	lds	r24, 0x023D
    66d6:	90 91 3e 02 	lds	r25, 0x023E
    66da:	84 60       	ori	r24, 0x04	; 4
    66dc:	90 93 3e 02 	sts	0x023E, r25
    66e0:	80 93 3d 02 	sts	0x023D, r24
		if(Global_u8ShiftIter >= 16) LCD_enuSendCommand(0x18);
    66e4:	80 91 40 02 	lds	r24, 0x0240
    66e8:	80 31       	cpi	r24, 0x10	; 16
    66ea:	1c f0       	brlt	.+6      	; 0x66f2 <Local_voidCalculateFunctions+0x82>
    66ec:	88 e1       	ldi	r24, 0x18	; 24
    66ee:	0e 94 89 20 	call	0x4112	; 0x4112 <LCD_enuSendCommand>
		LCD_enuDisplayChar(')');
    66f2:	89 e2       	ldi	r24, 0x29	; 41
    66f4:	0e 94 60 20 	call	0x40c0	; 0x40c0 <LCD_enuDisplayChar>
    66f8:	d9 c4       	rjmp	.+2482   	; 0x70ac <Local_voidCalculateFunctions+0xa3c>
		return;
	}
	else
	{
		if(Global_u8Operators[Global_s8Op_Iterator] == 'L' || Global_u8Operators[Global_s8Op_Iterator] == 'M')
    66fa:	80 91 3f 02 	lds	r24, 0x023F
    66fe:	99 27       	eor	r25, r25
    6700:	87 fd       	sbrc	r24, 7
    6702:	90 95       	com	r25
    6704:	fc 01       	movw	r30, r24
    6706:	e9 58       	subi	r30, 0x89	; 137
    6708:	fd 4f       	sbci	r31, 0xFD	; 253
    670a:	80 81       	ld	r24, Z
    670c:	8c 34       	cpi	r24, 0x4C	; 76
    670e:	61 f0       	breq	.+24     	; 0x6728 <Local_voidCalculateFunctions+0xb8>
    6710:	80 91 3f 02 	lds	r24, 0x023F
    6714:	99 27       	eor	r25, r25
    6716:	87 fd       	sbrc	r24, 7
    6718:	90 95       	com	r25
    671a:	fc 01       	movw	r30, r24
    671c:	e9 58       	subi	r30, 0x89	; 137
    671e:	fd 4f       	sbci	r31, 0xFD	; 253
    6720:	80 81       	ld	r24, Z
    6722:	8d 34       	cpi	r24, 0x4D	; 77
    6724:	09 f0       	breq	.+2      	; 0x6728 <Local_voidCalculateFunctions+0xb8>
    6726:	51 c0       	rjmp	.+162    	; 0x67ca <Local_voidCalculateFunctions+0x15a>
		{
			if(Global_Af32Operands[Global_s8Num_Iterator] > 1 || Global_Af32Operands[Global_s8Num_Iterator] < -1)
    6728:	80 91 27 02 	lds	r24, 0x0227
    672c:	99 27       	eor	r25, r25
    672e:	87 fd       	sbrc	r24, 7
    6730:	90 95       	com	r25
    6732:	88 0f       	add	r24, r24
    6734:	99 1f       	adc	r25, r25
    6736:	88 0f       	add	r24, r24
    6738:	99 1f       	adc	r25, r25
    673a:	fc 01       	movw	r30, r24
    673c:	e9 5b       	subi	r30, 0xB9	; 185
    673e:	fd 4f       	sbci	r31, 0xFD	; 253
    6740:	80 81       	ld	r24, Z
    6742:	91 81       	ldd	r25, Z+1	; 0x01
    6744:	a2 81       	ldd	r26, Z+2	; 0x02
    6746:	b3 81       	ldd	r27, Z+3	; 0x03
    6748:	bc 01       	movw	r22, r24
    674a:	cd 01       	movw	r24, r26
    674c:	20 e0       	ldi	r18, 0x00	; 0
    674e:	30 e0       	ldi	r19, 0x00	; 0
    6750:	40 e8       	ldi	r20, 0x80	; 128
    6752:	5f e3       	ldi	r21, 0x3F	; 63
    6754:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    6758:	18 16       	cp	r1, r24
    675a:	d4 f0       	brlt	.+52     	; 0x6790 <Local_voidCalculateFunctions+0x120>
    675c:	80 91 27 02 	lds	r24, 0x0227
    6760:	99 27       	eor	r25, r25
    6762:	87 fd       	sbrc	r24, 7
    6764:	90 95       	com	r25
    6766:	88 0f       	add	r24, r24
    6768:	99 1f       	adc	r25, r25
    676a:	88 0f       	add	r24, r24
    676c:	99 1f       	adc	r25, r25
    676e:	fc 01       	movw	r30, r24
    6770:	e9 5b       	subi	r30, 0xB9	; 185
    6772:	fd 4f       	sbci	r31, 0xFD	; 253
    6774:	80 81       	ld	r24, Z
    6776:	91 81       	ldd	r25, Z+1	; 0x01
    6778:	a2 81       	ldd	r26, Z+2	; 0x02
    677a:	b3 81       	ldd	r27, Z+3	; 0x03
    677c:	bc 01       	movw	r22, r24
    677e:	cd 01       	movw	r24, r26
    6780:	20 e0       	ldi	r18, 0x00	; 0
    6782:	30 e0       	ldi	r19, 0x00	; 0
    6784:	40 e8       	ldi	r20, 0x80	; 128
    6786:	5f eb       	ldi	r21, 0xBF	; 191
    6788:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    678c:	88 23       	and	r24, r24
    678e:	ec f4       	brge	.+58     	; 0x67ca <Local_voidCalculateFunctions+0x15a>
			{
				Set_Bit(Global_u16Flags, math_error);
    6790:	80 91 3d 02 	lds	r24, 0x023D
    6794:	90 91 3e 02 	lds	r25, 0x023E
    6798:	84 60       	ori	r24, 0x04	; 4
    679a:	90 93 3e 02 	sts	0x023E, r25
    679e:	80 93 3d 02 	sts	0x023D, r24
				Global_Af32Operands[Global_s8Num_Iterator] = 0;
    67a2:	80 91 27 02 	lds	r24, 0x0227
    67a6:	99 27       	eor	r25, r25
    67a8:	87 fd       	sbrc	r24, 7
    67aa:	90 95       	com	r25
    67ac:	88 0f       	add	r24, r24
    67ae:	99 1f       	adc	r25, r25
    67b0:	88 0f       	add	r24, r24
    67b2:	99 1f       	adc	r25, r25
    67b4:	fc 01       	movw	r30, r24
    67b6:	e9 5b       	subi	r30, 0xB9	; 185
    67b8:	fd 4f       	sbci	r31, 0xFD	; 253
    67ba:	80 e0       	ldi	r24, 0x00	; 0
    67bc:	90 e0       	ldi	r25, 0x00	; 0
    67be:	a0 e0       	ldi	r26, 0x00	; 0
    67c0:	b0 e0       	ldi	r27, 0x00	; 0
    67c2:	80 83       	st	Z, r24
    67c4:	91 83       	std	Z+1, r25	; 0x01
    67c6:	a2 83       	std	Z+2, r26	; 0x02
    67c8:	b3 83       	std	Z+3, r27	; 0x03
			}
		}
		if(Global_u8Operators[Global_s8Op_Iterator] == 'K')
    67ca:	80 91 3f 02 	lds	r24, 0x023F
    67ce:	99 27       	eor	r25, r25
    67d0:	87 fd       	sbrc	r24, 7
    67d2:	90 95       	com	r25
    67d4:	fc 01       	movw	r30, r24
    67d6:	e9 58       	subi	r30, 0x89	; 137
    67d8:	fd 4f       	sbci	r31, 0xFD	; 253
    67da:	80 81       	ld	r24, Z
    67dc:	8b 34       	cpi	r24, 0x4B	; 75
    67de:	09 f0       	breq	.+2      	; 0x67e2 <Local_voidCalculateFunctions+0x172>
    67e0:	40 c1       	rjmp	.+640    	; 0x6a62 <Local_voidCalculateFunctions+0x3f2>
		{
			if(Local_f32Mode != 1)
    67e2:	80 91 2d 02 	lds	r24, 0x022D
    67e6:	90 91 2e 02 	lds	r25, 0x022E
    67ea:	a0 91 2f 02 	lds	r26, 0x022F
    67ee:	b0 91 30 02 	lds	r27, 0x0230
    67f2:	bc 01       	movw	r22, r24
    67f4:	cd 01       	movw	r24, r26
    67f6:	20 e0       	ldi	r18, 0x00	; 0
    67f8:	30 e0       	ldi	r19, 0x00	; 0
    67fa:	40 e8       	ldi	r20, 0x80	; 128
    67fc:	5f e3       	ldi	r21, 0x3F	; 63
    67fe:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__nesf2>
    6802:	88 23       	and	r24, r24
    6804:	71 f1       	breq	.+92     	; 0x6862 <Local_voidCalculateFunctions+0x1f2>
			{
				Global_Af32Operands[Global_s8Num_Iterator] *= 180/M_PI;
    6806:	80 91 27 02 	lds	r24, 0x0227
    680a:	08 2f       	mov	r16, r24
    680c:	11 27       	eor	r17, r17
    680e:	07 fd       	sbrc	r16, 7
    6810:	10 95       	com	r17
    6812:	80 91 27 02 	lds	r24, 0x0227
    6816:	99 27       	eor	r25, r25
    6818:	87 fd       	sbrc	r24, 7
    681a:	90 95       	com	r25
    681c:	88 0f       	add	r24, r24
    681e:	99 1f       	adc	r25, r25
    6820:	88 0f       	add	r24, r24
    6822:	99 1f       	adc	r25, r25
    6824:	fc 01       	movw	r30, r24
    6826:	e9 5b       	subi	r30, 0xB9	; 185
    6828:	fd 4f       	sbci	r31, 0xFD	; 253
    682a:	80 81       	ld	r24, Z
    682c:	91 81       	ldd	r25, Z+1	; 0x01
    682e:	a2 81       	ldd	r26, Z+2	; 0x02
    6830:	b3 81       	ldd	r27, Z+3	; 0x03
    6832:	bc 01       	movw	r22, r24
    6834:	cd 01       	movw	r24, r26
    6836:	20 ee       	ldi	r18, 0xE0	; 224
    6838:	3e e2       	ldi	r19, 0x2E	; 46
    683a:	45 e6       	ldi	r20, 0x65	; 101
    683c:	52 e4       	ldi	r21, 0x42	; 66
    683e:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    6842:	dc 01       	movw	r26, r24
    6844:	cb 01       	movw	r24, r22
    6846:	9c 01       	movw	r18, r24
    6848:	ad 01       	movw	r20, r26
    684a:	c8 01       	movw	r24, r16
    684c:	88 0f       	add	r24, r24
    684e:	99 1f       	adc	r25, r25
    6850:	88 0f       	add	r24, r24
    6852:	99 1f       	adc	r25, r25
    6854:	fc 01       	movw	r30, r24
    6856:	e9 5b       	subi	r30, 0xB9	; 185
    6858:	fd 4f       	sbci	r31, 0xFD	; 253
    685a:	20 83       	st	Z, r18
    685c:	31 83       	std	Z+1, r19	; 0x01
    685e:	42 83       	std	Z+2, r20	; 0x02
    6860:	53 83       	std	Z+3, r21	; 0x03
			}
			if((s32)Global_Af32Operands[Global_s8Num_Iterator]%360 == 90  || (s32)Global_Af32Operands[Global_s8Num_Iterator]%360 == -90
    6862:	80 91 27 02 	lds	r24, 0x0227
    6866:	99 27       	eor	r25, r25
    6868:	87 fd       	sbrc	r24, 7
    686a:	90 95       	com	r25
    686c:	88 0f       	add	r24, r24
    686e:	99 1f       	adc	r25, r25
    6870:	88 0f       	add	r24, r24
    6872:	99 1f       	adc	r25, r25
    6874:	fc 01       	movw	r30, r24
    6876:	e9 5b       	subi	r30, 0xB9	; 185
    6878:	fd 4f       	sbci	r31, 0xFD	; 253
    687a:	80 81       	ld	r24, Z
    687c:	91 81       	ldd	r25, Z+1	; 0x01
    687e:	a2 81       	ldd	r26, Z+2	; 0x02
    6880:	b3 81       	ldd	r27, Z+3	; 0x03
    6882:	bc 01       	movw	r22, r24
    6884:	cd 01       	movw	r24, r26
    6886:	0e 94 41 06 	call	0xc82	; 0xc82 <__fixsfsi>
    688a:	dc 01       	movw	r26, r24
    688c:	cb 01       	movw	r24, r22
    688e:	28 e6       	ldi	r18, 0x68	; 104
    6890:	31 e0       	ldi	r19, 0x01	; 1
    6892:	40 e0       	ldi	r20, 0x00	; 0
    6894:	50 e0       	ldi	r21, 0x00	; 0
    6896:	bc 01       	movw	r22, r24
    6898:	cd 01       	movw	r24, r26
    689a:	0e 94 a8 3c 	call	0x7950	; 0x7950 <__divmodsi4>
    689e:	dc 01       	movw	r26, r24
    68a0:	cb 01       	movw	r24, r22
    68a2:	8a 35       	cpi	r24, 0x5A	; 90
    68a4:	91 05       	cpc	r25, r1
    68a6:	a1 05       	cpc	r26, r1
    68a8:	b1 05       	cpc	r27, r1
    68aa:	09 f4       	brne	.+2      	; 0x68ae <Local_voidCalculateFunctions+0x23e>
    68ac:	79 c0       	rjmp	.+242    	; 0x69a0 <Local_voidCalculateFunctions+0x330>
    68ae:	80 91 27 02 	lds	r24, 0x0227
    68b2:	99 27       	eor	r25, r25
    68b4:	87 fd       	sbrc	r24, 7
    68b6:	90 95       	com	r25
    68b8:	88 0f       	add	r24, r24
    68ba:	99 1f       	adc	r25, r25
    68bc:	88 0f       	add	r24, r24
    68be:	99 1f       	adc	r25, r25
    68c0:	fc 01       	movw	r30, r24
    68c2:	e9 5b       	subi	r30, 0xB9	; 185
    68c4:	fd 4f       	sbci	r31, 0xFD	; 253
    68c6:	80 81       	ld	r24, Z
    68c8:	91 81       	ldd	r25, Z+1	; 0x01
    68ca:	a2 81       	ldd	r26, Z+2	; 0x02
    68cc:	b3 81       	ldd	r27, Z+3	; 0x03
    68ce:	bc 01       	movw	r22, r24
    68d0:	cd 01       	movw	r24, r26
    68d2:	0e 94 41 06 	call	0xc82	; 0xc82 <__fixsfsi>
    68d6:	dc 01       	movw	r26, r24
    68d8:	cb 01       	movw	r24, r22
    68da:	28 e6       	ldi	r18, 0x68	; 104
    68dc:	31 e0       	ldi	r19, 0x01	; 1
    68de:	40 e0       	ldi	r20, 0x00	; 0
    68e0:	50 e0       	ldi	r21, 0x00	; 0
    68e2:	bc 01       	movw	r22, r24
    68e4:	cd 01       	movw	r24, r26
    68e6:	0e 94 a8 3c 	call	0x7950	; 0x7950 <__divmodsi4>
    68ea:	dc 01       	movw	r26, r24
    68ec:	cb 01       	movw	r24, r22
    68ee:	86 3a       	cpi	r24, 0xA6	; 166
    68f0:	2f ef       	ldi	r18, 0xFF	; 255
    68f2:	92 07       	cpc	r25, r18
    68f4:	2f ef       	ldi	r18, 0xFF	; 255
    68f6:	a2 07       	cpc	r26, r18
    68f8:	2f ef       	ldi	r18, 0xFF	; 255
    68fa:	b2 07       	cpc	r27, r18
    68fc:	09 f4       	brne	.+2      	; 0x6900 <Local_voidCalculateFunctions+0x290>
    68fe:	50 c0       	rjmp	.+160    	; 0x69a0 <Local_voidCalculateFunctions+0x330>
    6900:	80 91 27 02 	lds	r24, 0x0227
    6904:	99 27       	eor	r25, r25
    6906:	87 fd       	sbrc	r24, 7
    6908:	90 95       	com	r25
    690a:	88 0f       	add	r24, r24
    690c:	99 1f       	adc	r25, r25
    690e:	88 0f       	add	r24, r24
    6910:	99 1f       	adc	r25, r25
    6912:	fc 01       	movw	r30, r24
    6914:	e9 5b       	subi	r30, 0xB9	; 185
    6916:	fd 4f       	sbci	r31, 0xFD	; 253
    6918:	80 81       	ld	r24, Z
    691a:	91 81       	ldd	r25, Z+1	; 0x01
    691c:	a2 81       	ldd	r26, Z+2	; 0x02
    691e:	b3 81       	ldd	r27, Z+3	; 0x03
    6920:	bc 01       	movw	r22, r24
    6922:	cd 01       	movw	r24, r26
    6924:	0e 94 41 06 	call	0xc82	; 0xc82 <__fixsfsi>
    6928:	dc 01       	movw	r26, r24
    692a:	cb 01       	movw	r24, r22
    692c:	28 e6       	ldi	r18, 0x68	; 104
    692e:	31 e0       	ldi	r19, 0x01	; 1
    6930:	40 e0       	ldi	r20, 0x00	; 0
    6932:	50 e0       	ldi	r21, 0x00	; 0
    6934:	bc 01       	movw	r22, r24
    6936:	cd 01       	movw	r24, r26
    6938:	0e 94 a8 3c 	call	0x7950	; 0x7950 <__divmodsi4>
    693c:	dc 01       	movw	r26, r24
    693e:	cb 01       	movw	r24, r22
    6940:	8e 30       	cpi	r24, 0x0E	; 14
    6942:	31 e0       	ldi	r19, 0x01	; 1
    6944:	93 07       	cpc	r25, r19
    6946:	30 e0       	ldi	r19, 0x00	; 0
    6948:	a3 07       	cpc	r26, r19
    694a:	30 e0       	ldi	r19, 0x00	; 0
    694c:	b3 07       	cpc	r27, r19
    694e:	41 f1       	breq	.+80     	; 0x69a0 <Local_voidCalculateFunctions+0x330>
    6950:	80 91 27 02 	lds	r24, 0x0227
    6954:	99 27       	eor	r25, r25
    6956:	87 fd       	sbrc	r24, 7
    6958:	90 95       	com	r25
    695a:	88 0f       	add	r24, r24
    695c:	99 1f       	adc	r25, r25
    695e:	88 0f       	add	r24, r24
    6960:	99 1f       	adc	r25, r25
    6962:	fc 01       	movw	r30, r24
    6964:	e9 5b       	subi	r30, 0xB9	; 185
    6966:	fd 4f       	sbci	r31, 0xFD	; 253
    6968:	80 81       	ld	r24, Z
    696a:	91 81       	ldd	r25, Z+1	; 0x01
    696c:	a2 81       	ldd	r26, Z+2	; 0x02
    696e:	b3 81       	ldd	r27, Z+3	; 0x03
    6970:	bc 01       	movw	r22, r24
    6972:	cd 01       	movw	r24, r26
    6974:	0e 94 41 06 	call	0xc82	; 0xc82 <__fixsfsi>
    6978:	dc 01       	movw	r26, r24
    697a:	cb 01       	movw	r24, r22
    697c:	28 e6       	ldi	r18, 0x68	; 104
    697e:	31 e0       	ldi	r19, 0x01	; 1
    6980:	40 e0       	ldi	r20, 0x00	; 0
    6982:	50 e0       	ldi	r21, 0x00	; 0
    6984:	bc 01       	movw	r22, r24
    6986:	cd 01       	movw	r24, r26
    6988:	0e 94 a8 3c 	call	0x7950	; 0x7950 <__divmodsi4>
    698c:	dc 01       	movw	r26, r24
    698e:	cb 01       	movw	r24, r22
    6990:	82 3f       	cpi	r24, 0xF2	; 242
    6992:	2e ef       	ldi	r18, 0xFE	; 254
    6994:	92 07       	cpc	r25, r18
    6996:	2f ef       	ldi	r18, 0xFF	; 255
    6998:	a2 07       	cpc	r26, r18
    699a:	2f ef       	ldi	r18, 0xFF	; 255
    699c:	b2 07       	cpc	r27, r18
    699e:	e9 f4       	brne	.+58     	; 0x69da <Local_voidCalculateFunctions+0x36a>
					|| (s32)Global_Af32Operands[Global_s8Num_Iterator]%360 == 270 || (s32)Global_Af32Operands[Global_s8Num_Iterator]%360 == -270)
			{
				Set_Bit(Global_u16Flags, math_error);
    69a0:	80 91 3d 02 	lds	r24, 0x023D
    69a4:	90 91 3e 02 	lds	r25, 0x023E
    69a8:	84 60       	ori	r24, 0x04	; 4
    69aa:	90 93 3e 02 	sts	0x023E, r25
    69ae:	80 93 3d 02 	sts	0x023D, r24
				Global_Af32Operands[Global_s8Num_Iterator] = 0;
    69b2:	80 91 27 02 	lds	r24, 0x0227
    69b6:	99 27       	eor	r25, r25
    69b8:	87 fd       	sbrc	r24, 7
    69ba:	90 95       	com	r25
    69bc:	88 0f       	add	r24, r24
    69be:	99 1f       	adc	r25, r25
    69c0:	88 0f       	add	r24, r24
    69c2:	99 1f       	adc	r25, r25
    69c4:	fc 01       	movw	r30, r24
    69c6:	e9 5b       	subi	r30, 0xB9	; 185
    69c8:	fd 4f       	sbci	r31, 0xFD	; 253
    69ca:	80 e0       	ldi	r24, 0x00	; 0
    69cc:	90 e0       	ldi	r25, 0x00	; 0
    69ce:	a0 e0       	ldi	r26, 0x00	; 0
    69d0:	b0 e0       	ldi	r27, 0x00	; 0
    69d2:	80 83       	st	Z, r24
    69d4:	91 83       	std	Z+1, r25	; 0x01
    69d6:	a2 83       	std	Z+2, r26	; 0x02
    69d8:	b3 83       	std	Z+3, r27	; 0x03
			}
			if(Local_f32Mode != 1)
    69da:	80 91 2d 02 	lds	r24, 0x022D
    69de:	90 91 2e 02 	lds	r25, 0x022E
    69e2:	a0 91 2f 02 	lds	r26, 0x022F
    69e6:	b0 91 30 02 	lds	r27, 0x0230
    69ea:	bc 01       	movw	r22, r24
    69ec:	cd 01       	movw	r24, r26
    69ee:	20 e0       	ldi	r18, 0x00	; 0
    69f0:	30 e0       	ldi	r19, 0x00	; 0
    69f2:	40 e8       	ldi	r20, 0x80	; 128
    69f4:	5f e3       	ldi	r21, 0x3F	; 63
    69f6:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <__nesf2>
    69fa:	88 23       	and	r24, r24
    69fc:	91 f1       	breq	.+100    	; 0x6a62 <Local_voidCalculateFunctions+0x3f2>
			{
				Global_Af32Operands[Global_s8Num_Iterator] *= Local_f32Mode;
    69fe:	80 91 27 02 	lds	r24, 0x0227
    6a02:	08 2f       	mov	r16, r24
    6a04:	11 27       	eor	r17, r17
    6a06:	07 fd       	sbrc	r16, 7
    6a08:	10 95       	com	r17
    6a0a:	80 91 27 02 	lds	r24, 0x0227
    6a0e:	99 27       	eor	r25, r25
    6a10:	87 fd       	sbrc	r24, 7
    6a12:	90 95       	com	r25
    6a14:	88 0f       	add	r24, r24
    6a16:	99 1f       	adc	r25, r25
    6a18:	88 0f       	add	r24, r24
    6a1a:	99 1f       	adc	r25, r25
    6a1c:	fc 01       	movw	r30, r24
    6a1e:	e9 5b       	subi	r30, 0xB9	; 185
    6a20:	fd 4f       	sbci	r31, 0xFD	; 253
    6a22:	80 81       	ld	r24, Z
    6a24:	91 81       	ldd	r25, Z+1	; 0x01
    6a26:	a2 81       	ldd	r26, Z+2	; 0x02
    6a28:	b3 81       	ldd	r27, Z+3	; 0x03
    6a2a:	20 91 2d 02 	lds	r18, 0x022D
    6a2e:	30 91 2e 02 	lds	r19, 0x022E
    6a32:	40 91 2f 02 	lds	r20, 0x022F
    6a36:	50 91 30 02 	lds	r21, 0x0230
    6a3a:	bc 01       	movw	r22, r24
    6a3c:	cd 01       	movw	r24, r26
    6a3e:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    6a42:	dc 01       	movw	r26, r24
    6a44:	cb 01       	movw	r24, r22
    6a46:	9c 01       	movw	r18, r24
    6a48:	ad 01       	movw	r20, r26
    6a4a:	c8 01       	movw	r24, r16
    6a4c:	88 0f       	add	r24, r24
    6a4e:	99 1f       	adc	r25, r25
    6a50:	88 0f       	add	r24, r24
    6a52:	99 1f       	adc	r25, r25
    6a54:	fc 01       	movw	r30, r24
    6a56:	e9 5b       	subi	r30, 0xB9	; 185
    6a58:	fd 4f       	sbci	r31, 0xFD	; 253
    6a5a:	20 83       	st	Z, r18
    6a5c:	31 83       	std	Z+1, r19	; 0x01
    6a5e:	42 83       	std	Z+2, r20	; 0x02
    6a60:	53 83       	std	Z+3, r21	; 0x03
			}
		}
		if(Global_u8Operators[Global_s8Op_Iterator] != 'G' &&  Global_u8Operators[Global_s8Op_Iterator] != 'R')
    6a62:	80 91 3f 02 	lds	r24, 0x023F
    6a66:	99 27       	eor	r25, r25
    6a68:	87 fd       	sbrc	r24, 7
    6a6a:	90 95       	com	r25
    6a6c:	fc 01       	movw	r30, r24
    6a6e:	e9 58       	subi	r30, 0x89	; 137
    6a70:	fd 4f       	sbci	r31, 0xFD	; 253
    6a72:	80 81       	ld	r24, Z
    6a74:	87 34       	cpi	r24, 0x47	; 71
    6a76:	d1 f0       	breq	.+52     	; 0x6aac <Local_voidCalculateFunctions+0x43c>
    6a78:	80 91 3f 02 	lds	r24, 0x023F
    6a7c:	99 27       	eor	r25, r25
    6a7e:	87 fd       	sbrc	r24, 7
    6a80:	90 95       	com	r25
    6a82:	fc 01       	movw	r30, r24
    6a84:	e9 58       	subi	r30, 0x89	; 137
    6a86:	fd 4f       	sbci	r31, 0xFD	; 253
    6a88:	80 81       	ld	r24, Z
    6a8a:	82 35       	cpi	r24, 0x52	; 82
    6a8c:	79 f0       	breq	.+30     	; 0x6aac <Local_voidCalculateFunctions+0x43c>
		{
			if(Global_u8ShiftIter >= 16) LCD_enuSendCommand(0x18);
    6a8e:	80 91 40 02 	lds	r24, 0x0240
    6a92:	80 31       	cpi	r24, 0x10	; 16
    6a94:	1c f0       	brlt	.+6      	; 0x6a9c <Local_voidCalculateFunctions+0x42c>
    6a96:	88 e1       	ldi	r24, 0x18	; 24
    6a98:	0e 94 89 20 	call	0x4112	; 0x4112 <LCD_enuSendCommand>
			Global_u8ShiftIter++;
    6a9c:	80 91 40 02 	lds	r24, 0x0240
    6aa0:	8f 5f       	subi	r24, 0xFF	; 255
    6aa2:	80 93 40 02 	sts	0x0240, r24
			LCD_enuDisplayChar(')');
    6aa6:	89 e2       	ldi	r24, 0x29	; 41
    6aa8:	0e 94 60 20 	call	0x40c0	; 0x40c0 <LCD_enuDisplayChar>
		}
		switch(Global_u8Operators[Global_s8Op_Iterator])
    6aac:	80 91 3f 02 	lds	r24, 0x023F
    6ab0:	99 27       	eor	r25, r25
    6ab2:	87 fd       	sbrc	r24, 7
    6ab4:	90 95       	com	r25
    6ab6:	fc 01       	movw	r30, r24
    6ab8:	e9 58       	subi	r30, 0x89	; 137
    6aba:	fd 4f       	sbci	r31, 0xFD	; 253
    6abc:	80 81       	ld	r24, Z
    6abe:	28 2f       	mov	r18, r24
    6ac0:	30 e0       	ldi	r19, 0x00	; 0
    6ac2:	3a 83       	std	Y+2, r19	; 0x02
    6ac4:	29 83       	std	Y+1, r18	; 0x01
    6ac6:	89 81       	ldd	r24, Y+1	; 0x01
    6ac8:	9a 81       	ldd	r25, Y+2	; 0x02
    6aca:	8c 34       	cpi	r24, 0x4C	; 76
    6acc:	91 05       	cpc	r25, r1
    6ace:	09 f4       	brne	.+2      	; 0x6ad2 <Local_voidCalculateFunctions+0x462>
    6ad0:	6a c1       	rjmp	.+724    	; 0x6da6 <Local_voidCalculateFunctions+0x736>
    6ad2:	29 81       	ldd	r18, Y+1	; 0x01
    6ad4:	3a 81       	ldd	r19, Y+2	; 0x02
    6ad6:	2d 34       	cpi	r18, 0x4D	; 77
    6ad8:	31 05       	cpc	r19, r1
    6ada:	2c f5       	brge	.+74     	; 0x6b26 <Local_voidCalculateFunctions+0x4b6>
    6adc:	89 81       	ldd	r24, Y+1	; 0x01
    6ade:	9a 81       	ldd	r25, Y+2	; 0x02
    6ae0:	89 34       	cpi	r24, 0x49	; 73
    6ae2:	91 05       	cpc	r25, r1
    6ae4:	09 f4       	brne	.+2      	; 0x6ae8 <Local_voidCalculateFunctions+0x478>
    6ae6:	4a c0       	rjmp	.+148    	; 0x6b7c <Local_voidCalculateFunctions+0x50c>
    6ae8:	29 81       	ldd	r18, Y+1	; 0x01
    6aea:	3a 81       	ldd	r19, Y+2	; 0x02
    6aec:	2a 34       	cpi	r18, 0x4A	; 74
    6aee:	31 05       	cpc	r19, r1
    6af0:	6c f4       	brge	.+26     	; 0x6b0c <Local_voidCalculateFunctions+0x49c>
    6af2:	89 81       	ldd	r24, Y+1	; 0x01
    6af4:	9a 81       	ldd	r25, Y+2	; 0x02
    6af6:	87 34       	cpi	r24, 0x47	; 71
    6af8:	91 05       	cpc	r25, r1
    6afa:	09 f4       	brne	.+2      	; 0x6afe <Local_voidCalculateFunctions+0x48e>
    6afc:	02 c1       	rjmp	.+516    	; 0x6d02 <Local_voidCalculateFunctions+0x692>
    6afe:	29 81       	ldd	r18, Y+1	; 0x01
    6b00:	3a 81       	ldd	r19, Y+2	; 0x02
    6b02:	28 34       	cpi	r18, 0x48	; 72
    6b04:	31 05       	cpc	r19, r1
    6b06:	09 f4       	brne	.+2      	; 0x6b0a <Local_voidCalculateFunctions+0x49a>
    6b08:	25 c1       	rjmp	.+586    	; 0x6d54 <Local_voidCalculateFunctions+0x6e4>
    6b0a:	d0 c2       	rjmp	.+1440   	; 0x70ac <Local_voidCalculateFunctions+0xa3c>
    6b0c:	89 81       	ldd	r24, Y+1	; 0x01
    6b0e:	9a 81       	ldd	r25, Y+2	; 0x02
    6b10:	8a 34       	cpi	r24, 0x4A	; 74
    6b12:	91 05       	cpc	r25, r1
    6b14:	09 f4       	brne	.+2      	; 0x6b18 <Local_voidCalculateFunctions+0x4a8>
    6b16:	73 c0       	rjmp	.+230    	; 0x6bfe <Local_voidCalculateFunctions+0x58e>
    6b18:	29 81       	ldd	r18, Y+1	; 0x01
    6b1a:	3a 81       	ldd	r19, Y+2	; 0x02
    6b1c:	2b 34       	cpi	r18, 0x4B	; 75
    6b1e:	31 05       	cpc	r19, r1
    6b20:	09 f4       	brne	.+2      	; 0x6b24 <Local_voidCalculateFunctions+0x4b4>
    6b22:	ae c0       	rjmp	.+348    	; 0x6c80 <Local_voidCalculateFunctions+0x610>
    6b24:	c3 c2       	rjmp	.+1414   	; 0x70ac <Local_voidCalculateFunctions+0xa3c>
    6b26:	89 81       	ldd	r24, Y+1	; 0x01
    6b28:	9a 81       	ldd	r25, Y+2	; 0x02
    6b2a:	8f 34       	cpi	r24, 0x4F	; 79
    6b2c:	91 05       	cpc	r25, r1
    6b2e:	09 f4       	brne	.+2      	; 0x6b32 <Local_voidCalculateFunctions+0x4c2>
    6b30:	e5 c1       	rjmp	.+970    	; 0x6efc <Local_voidCalculateFunctions+0x88c>
    6b32:	29 81       	ldd	r18, Y+1	; 0x01
    6b34:	3a 81       	ldd	r19, Y+2	; 0x02
    6b36:	20 35       	cpi	r18, 0x50	; 80
    6b38:	31 05       	cpc	r19, r1
    6b3a:	6c f4       	brge	.+26     	; 0x6b56 <Local_voidCalculateFunctions+0x4e6>
    6b3c:	89 81       	ldd	r24, Y+1	; 0x01
    6b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    6b40:	8d 34       	cpi	r24, 0x4D	; 77
    6b42:	91 05       	cpc	r25, r1
    6b44:	09 f4       	brne	.+2      	; 0x6b48 <Local_voidCalculateFunctions+0x4d8>
    6b46:	68 c1       	rjmp	.+720    	; 0x6e18 <Local_voidCalculateFunctions+0x7a8>
    6b48:	29 81       	ldd	r18, Y+1	; 0x01
    6b4a:	3a 81       	ldd	r19, Y+2	; 0x02
    6b4c:	2e 34       	cpi	r18, 0x4E	; 78
    6b4e:	31 05       	cpc	r19, r1
    6b50:	09 f4       	brne	.+2      	; 0x6b54 <Local_voidCalculateFunctions+0x4e4>
    6b52:	9b c1       	rjmp	.+822    	; 0x6e8a <Local_voidCalculateFunctions+0x81a>
    6b54:	ab c2       	rjmp	.+1366   	; 0x70ac <Local_voidCalculateFunctions+0xa3c>
    6b56:	89 81       	ldd	r24, Y+1	; 0x01
    6b58:	9a 81       	ldd	r25, Y+2	; 0x02
    6b5a:	81 35       	cpi	r24, 0x51	; 81
    6b5c:	91 05       	cpc	r25, r1
    6b5e:	09 f4       	brne	.+2      	; 0x6b62 <Local_voidCalculateFunctions+0x4f2>
    6b60:	1f c2       	rjmp	.+1086   	; 0x6fa0 <Local_voidCalculateFunctions+0x930>
    6b62:	29 81       	ldd	r18, Y+1	; 0x01
    6b64:	3a 81       	ldd	r19, Y+2	; 0x02
    6b66:	21 35       	cpi	r18, 0x51	; 81
    6b68:	31 05       	cpc	r19, r1
    6b6a:	0c f4       	brge	.+2      	; 0x6b6e <Local_voidCalculateFunctions+0x4fe>
    6b6c:	f0 c1       	rjmp	.+992    	; 0x6f4e <Local_voidCalculateFunctions+0x8de>
    6b6e:	89 81       	ldd	r24, Y+1	; 0x01
    6b70:	9a 81       	ldd	r25, Y+2	; 0x02
    6b72:	82 35       	cpi	r24, 0x52	; 82
    6b74:	91 05       	cpc	r25, r1
    6b76:	09 f4       	brne	.+2      	; 0x6b7a <Local_voidCalculateFunctions+0x50a>
    6b78:	3c c2       	rjmp	.+1144   	; 0x6ff2 <Local_voidCalculateFunctions+0x982>
    6b7a:	98 c2       	rjmp	.+1328   	; 0x70ac <Local_voidCalculateFunctions+0xa3c>
		{
		case 'I':
			Global_Af32Operands[Global_s8Num_Iterator] = _sin(Global_Af32Operands[Global_s8Num_Iterator] * ( (M_PI/180) /Local_f32Mode) );
    6b7c:	80 91 27 02 	lds	r24, 0x0227
    6b80:	c8 2e       	mov	r12, r24
    6b82:	dd 24       	eor	r13, r13
    6b84:	c7 fc       	sbrc	r12, 7
    6b86:	d0 94       	com	r13
    6b88:	80 91 27 02 	lds	r24, 0x0227
    6b8c:	99 27       	eor	r25, r25
    6b8e:	87 fd       	sbrc	r24, 7
    6b90:	90 95       	com	r25
    6b92:	88 0f       	add	r24, r24
    6b94:	99 1f       	adc	r25, r25
    6b96:	88 0f       	add	r24, r24
    6b98:	99 1f       	adc	r25, r25
    6b9a:	fc 01       	movw	r30, r24
    6b9c:	e9 5b       	subi	r30, 0xB9	; 185
    6b9e:	fd 4f       	sbci	r31, 0xFD	; 253
    6ba0:	e0 80       	ld	r14, Z
    6ba2:	f1 80       	ldd	r15, Z+1	; 0x01
    6ba4:	02 81       	ldd	r16, Z+2	; 0x02
    6ba6:	13 81       	ldd	r17, Z+3	; 0x03
    6ba8:	20 91 2d 02 	lds	r18, 0x022D
    6bac:	30 91 2e 02 	lds	r19, 0x022E
    6bb0:	40 91 2f 02 	lds	r20, 0x022F
    6bb4:	50 91 30 02 	lds	r21, 0x0230
    6bb8:	65 e3       	ldi	r22, 0x35	; 53
    6bba:	7a ef       	ldi	r23, 0xFA	; 250
    6bbc:	8e e8       	ldi	r24, 0x8E	; 142
    6bbe:	9c e3       	ldi	r25, 0x3C	; 60
    6bc0:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    6bc4:	dc 01       	movw	r26, r24
    6bc6:	cb 01       	movw	r24, r22
    6bc8:	9c 01       	movw	r18, r24
    6bca:	ad 01       	movw	r20, r26
    6bcc:	c8 01       	movw	r24, r16
    6bce:	b7 01       	movw	r22, r14
    6bd0:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    6bd4:	dc 01       	movw	r26, r24
    6bd6:	cb 01       	movw	r24, r22
    6bd8:	bc 01       	movw	r22, r24
    6bda:	cd 01       	movw	r24, r26
    6bdc:	0e 94 36 0b 	call	0x166c	; 0x166c <_sin>
    6be0:	9b 01       	movw	r18, r22
    6be2:	ac 01       	movw	r20, r24
    6be4:	c6 01       	movw	r24, r12
    6be6:	88 0f       	add	r24, r24
    6be8:	99 1f       	adc	r25, r25
    6bea:	88 0f       	add	r24, r24
    6bec:	99 1f       	adc	r25, r25
    6bee:	fc 01       	movw	r30, r24
    6bf0:	e9 5b       	subi	r30, 0xB9	; 185
    6bf2:	fd 4f       	sbci	r31, 0xFD	; 253
    6bf4:	20 83       	st	Z, r18
    6bf6:	31 83       	std	Z+1, r19	; 0x01
    6bf8:	42 83       	std	Z+2, r20	; 0x02
    6bfa:	53 83       	std	Z+3, r21	; 0x03
    6bfc:	57 c2       	rjmp	.+1198   	; 0x70ac <Local_voidCalculateFunctions+0xa3c>
			break;
		case 'J':
			Global_Af32Operands[Global_s8Num_Iterator] = _cos(Global_Af32Operands[Global_s8Num_Iterator] * ( (M_PI/180) /Local_f32Mode) );
    6bfe:	80 91 27 02 	lds	r24, 0x0227
    6c02:	c8 2e       	mov	r12, r24
    6c04:	dd 24       	eor	r13, r13
    6c06:	c7 fc       	sbrc	r12, 7
    6c08:	d0 94       	com	r13
    6c0a:	80 91 27 02 	lds	r24, 0x0227
    6c0e:	99 27       	eor	r25, r25
    6c10:	87 fd       	sbrc	r24, 7
    6c12:	90 95       	com	r25
    6c14:	88 0f       	add	r24, r24
    6c16:	99 1f       	adc	r25, r25
    6c18:	88 0f       	add	r24, r24
    6c1a:	99 1f       	adc	r25, r25
    6c1c:	fc 01       	movw	r30, r24
    6c1e:	e9 5b       	subi	r30, 0xB9	; 185
    6c20:	fd 4f       	sbci	r31, 0xFD	; 253
    6c22:	e0 80       	ld	r14, Z
    6c24:	f1 80       	ldd	r15, Z+1	; 0x01
    6c26:	02 81       	ldd	r16, Z+2	; 0x02
    6c28:	13 81       	ldd	r17, Z+3	; 0x03
    6c2a:	20 91 2d 02 	lds	r18, 0x022D
    6c2e:	30 91 2e 02 	lds	r19, 0x022E
    6c32:	40 91 2f 02 	lds	r20, 0x022F
    6c36:	50 91 30 02 	lds	r21, 0x0230
    6c3a:	65 e3       	ldi	r22, 0x35	; 53
    6c3c:	7a ef       	ldi	r23, 0xFA	; 250
    6c3e:	8e e8       	ldi	r24, 0x8E	; 142
    6c40:	9c e3       	ldi	r25, 0x3C	; 60
    6c42:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    6c46:	dc 01       	movw	r26, r24
    6c48:	cb 01       	movw	r24, r22
    6c4a:	9c 01       	movw	r18, r24
    6c4c:	ad 01       	movw	r20, r26
    6c4e:	c8 01       	movw	r24, r16
    6c50:	b7 01       	movw	r22, r14
    6c52:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    6c56:	dc 01       	movw	r26, r24
    6c58:	cb 01       	movw	r24, r22
    6c5a:	bc 01       	movw	r22, r24
    6c5c:	cd 01       	movw	r24, r26
    6c5e:	0e 94 9c 09 	call	0x1338	; 0x1338 <_cos>
    6c62:	9b 01       	movw	r18, r22
    6c64:	ac 01       	movw	r20, r24
    6c66:	c6 01       	movw	r24, r12
    6c68:	88 0f       	add	r24, r24
    6c6a:	99 1f       	adc	r25, r25
    6c6c:	88 0f       	add	r24, r24
    6c6e:	99 1f       	adc	r25, r25
    6c70:	fc 01       	movw	r30, r24
    6c72:	e9 5b       	subi	r30, 0xB9	; 185
    6c74:	fd 4f       	sbci	r31, 0xFD	; 253
    6c76:	20 83       	st	Z, r18
    6c78:	31 83       	std	Z+1, r19	; 0x01
    6c7a:	42 83       	std	Z+2, r20	; 0x02
    6c7c:	53 83       	std	Z+3, r21	; 0x03
    6c7e:	16 c2       	rjmp	.+1068   	; 0x70ac <Local_voidCalculateFunctions+0xa3c>
			break;
		case 'K':
			Global_Af32Operands[Global_s8Num_Iterator] = _tan(Global_Af32Operands[Global_s8Num_Iterator] * ( (M_PI/180) /Local_f32Mode));
    6c80:	80 91 27 02 	lds	r24, 0x0227
    6c84:	c8 2e       	mov	r12, r24
    6c86:	dd 24       	eor	r13, r13
    6c88:	c7 fc       	sbrc	r12, 7
    6c8a:	d0 94       	com	r13
    6c8c:	80 91 27 02 	lds	r24, 0x0227
    6c90:	99 27       	eor	r25, r25
    6c92:	87 fd       	sbrc	r24, 7
    6c94:	90 95       	com	r25
    6c96:	88 0f       	add	r24, r24
    6c98:	99 1f       	adc	r25, r25
    6c9a:	88 0f       	add	r24, r24
    6c9c:	99 1f       	adc	r25, r25
    6c9e:	fc 01       	movw	r30, r24
    6ca0:	e9 5b       	subi	r30, 0xB9	; 185
    6ca2:	fd 4f       	sbci	r31, 0xFD	; 253
    6ca4:	e0 80       	ld	r14, Z
    6ca6:	f1 80       	ldd	r15, Z+1	; 0x01
    6ca8:	02 81       	ldd	r16, Z+2	; 0x02
    6caa:	13 81       	ldd	r17, Z+3	; 0x03
    6cac:	20 91 2d 02 	lds	r18, 0x022D
    6cb0:	30 91 2e 02 	lds	r19, 0x022E
    6cb4:	40 91 2f 02 	lds	r20, 0x022F
    6cb8:	50 91 30 02 	lds	r21, 0x0230
    6cbc:	65 e3       	ldi	r22, 0x35	; 53
    6cbe:	7a ef       	ldi	r23, 0xFA	; 250
    6cc0:	8e e8       	ldi	r24, 0x8E	; 142
    6cc2:	9c e3       	ldi	r25, 0x3C	; 60
    6cc4:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    6cc8:	dc 01       	movw	r26, r24
    6cca:	cb 01       	movw	r24, r22
    6ccc:	9c 01       	movw	r18, r24
    6cce:	ad 01       	movw	r20, r26
    6cd0:	c8 01       	movw	r24, r16
    6cd2:	b7 01       	movw	r22, r14
    6cd4:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    6cd8:	dc 01       	movw	r26, r24
    6cda:	cb 01       	movw	r24, r22
    6cdc:	bc 01       	movw	r22, r24
    6cde:	cd 01       	movw	r24, r26
    6ce0:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <_tan>
    6ce4:	9b 01       	movw	r18, r22
    6ce6:	ac 01       	movw	r20, r24
    6ce8:	c6 01       	movw	r24, r12
    6cea:	88 0f       	add	r24, r24
    6cec:	99 1f       	adc	r25, r25
    6cee:	88 0f       	add	r24, r24
    6cf0:	99 1f       	adc	r25, r25
    6cf2:	fc 01       	movw	r30, r24
    6cf4:	e9 5b       	subi	r30, 0xB9	; 185
    6cf6:	fd 4f       	sbci	r31, 0xFD	; 253
    6cf8:	20 83       	st	Z, r18
    6cfa:	31 83       	std	Z+1, r19	; 0x01
    6cfc:	42 83       	std	Z+2, r20	; 0x02
    6cfe:	53 83       	std	Z+3, r21	; 0x03
    6d00:	d5 c1       	rjmp	.+938    	; 0x70ac <Local_voidCalculateFunctions+0xa3c>
			break;
		case 'G':
			Global_Af32Operands[Global_s8Num_Iterator] = expo(Global_Af32Operands[Global_s8Num_Iterator]);
    6d02:	80 91 27 02 	lds	r24, 0x0227
    6d06:	08 2f       	mov	r16, r24
    6d08:	11 27       	eor	r17, r17
    6d0a:	07 fd       	sbrc	r16, 7
    6d0c:	10 95       	com	r17
    6d0e:	80 91 27 02 	lds	r24, 0x0227
    6d12:	99 27       	eor	r25, r25
    6d14:	87 fd       	sbrc	r24, 7
    6d16:	90 95       	com	r25
    6d18:	88 0f       	add	r24, r24
    6d1a:	99 1f       	adc	r25, r25
    6d1c:	88 0f       	add	r24, r24
    6d1e:	99 1f       	adc	r25, r25
    6d20:	fc 01       	movw	r30, r24
    6d22:	e9 5b       	subi	r30, 0xB9	; 185
    6d24:	fd 4f       	sbci	r31, 0xFD	; 253
    6d26:	80 81       	ld	r24, Z
    6d28:	91 81       	ldd	r25, Z+1	; 0x01
    6d2a:	a2 81       	ldd	r26, Z+2	; 0x02
    6d2c:	b3 81       	ldd	r27, Z+3	; 0x03
    6d2e:	bc 01       	movw	r22, r24
    6d30:	cd 01       	movw	r24, r26
    6d32:	0e 94 91 0b 	call	0x1722	; 0x1722 <expo>
    6d36:	9b 01       	movw	r18, r22
    6d38:	ac 01       	movw	r20, r24
    6d3a:	c8 01       	movw	r24, r16
    6d3c:	88 0f       	add	r24, r24
    6d3e:	99 1f       	adc	r25, r25
    6d40:	88 0f       	add	r24, r24
    6d42:	99 1f       	adc	r25, r25
    6d44:	fc 01       	movw	r30, r24
    6d46:	e9 5b       	subi	r30, 0xB9	; 185
    6d48:	fd 4f       	sbci	r31, 0xFD	; 253
    6d4a:	20 83       	st	Z, r18
    6d4c:	31 83       	std	Z+1, r19	; 0x01
    6d4e:	42 83       	std	Z+2, r20	; 0x02
    6d50:	53 83       	std	Z+3, r21	; 0x03
    6d52:	ac c1       	rjmp	.+856    	; 0x70ac <Local_voidCalculateFunctions+0xa3c>
			break;
		case 'H':
			Global_Af32Operands[Global_s8Num_Iterator] = _sqrt(Global_Af32Operands[Global_s8Num_Iterator]);
    6d54:	80 91 27 02 	lds	r24, 0x0227
    6d58:	08 2f       	mov	r16, r24
    6d5a:	11 27       	eor	r17, r17
    6d5c:	07 fd       	sbrc	r16, 7
    6d5e:	10 95       	com	r17
    6d60:	80 91 27 02 	lds	r24, 0x0227
    6d64:	99 27       	eor	r25, r25
    6d66:	87 fd       	sbrc	r24, 7
    6d68:	90 95       	com	r25
    6d6a:	88 0f       	add	r24, r24
    6d6c:	99 1f       	adc	r25, r25
    6d6e:	88 0f       	add	r24, r24
    6d70:	99 1f       	adc	r25, r25
    6d72:	fc 01       	movw	r30, r24
    6d74:	e9 5b       	subi	r30, 0xB9	; 185
    6d76:	fd 4f       	sbci	r31, 0xFD	; 253
    6d78:	80 81       	ld	r24, Z
    6d7a:	91 81       	ldd	r25, Z+1	; 0x01
    6d7c:	a2 81       	ldd	r26, Z+2	; 0x02
    6d7e:	b3 81       	ldd	r27, Z+3	; 0x03
    6d80:	bc 01       	movw	r22, r24
    6d82:	cd 01       	movw	r24, r26
    6d84:	0e 94 77 0c 	call	0x18ee	; 0x18ee <_sqrt>
    6d88:	9b 01       	movw	r18, r22
    6d8a:	ac 01       	movw	r20, r24
    6d8c:	c8 01       	movw	r24, r16
    6d8e:	88 0f       	add	r24, r24
    6d90:	99 1f       	adc	r25, r25
    6d92:	88 0f       	add	r24, r24
    6d94:	99 1f       	adc	r25, r25
    6d96:	fc 01       	movw	r30, r24
    6d98:	e9 5b       	subi	r30, 0xB9	; 185
    6d9a:	fd 4f       	sbci	r31, 0xFD	; 253
    6d9c:	20 83       	st	Z, r18
    6d9e:	31 83       	std	Z+1, r19	; 0x01
    6da0:	42 83       	std	Z+2, r20	; 0x02
    6da2:	53 83       	std	Z+3, r21	; 0x03
    6da4:	83 c1       	rjmp	.+774    	; 0x70ac <Local_voidCalculateFunctions+0xa3c>
			break;
		case 'L':
			Global_Af32Operands[Global_s8Num_Iterator] = _asin(Global_Af32Operands[Global_s8Num_Iterator] ) * Local_f32Mode;
    6da6:	80 91 27 02 	lds	r24, 0x0227
    6daa:	08 2f       	mov	r16, r24
    6dac:	11 27       	eor	r17, r17
    6dae:	07 fd       	sbrc	r16, 7
    6db0:	10 95       	com	r17
    6db2:	80 91 27 02 	lds	r24, 0x0227
    6db6:	99 27       	eor	r25, r25
    6db8:	87 fd       	sbrc	r24, 7
    6dba:	90 95       	com	r25
    6dbc:	88 0f       	add	r24, r24
    6dbe:	99 1f       	adc	r25, r25
    6dc0:	88 0f       	add	r24, r24
    6dc2:	99 1f       	adc	r25, r25
    6dc4:	fc 01       	movw	r30, r24
    6dc6:	e9 5b       	subi	r30, 0xB9	; 185
    6dc8:	fd 4f       	sbci	r31, 0xFD	; 253
    6dca:	80 81       	ld	r24, Z
    6dcc:	91 81       	ldd	r25, Z+1	; 0x01
    6dce:	a2 81       	ldd	r26, Z+2	; 0x02
    6dd0:	b3 81       	ldd	r27, Z+3	; 0x03
    6dd2:	bc 01       	movw	r22, r24
    6dd4:	cd 01       	movw	r24, r26
    6dd6:	0e 94 54 12 	call	0x24a8	; 0x24a8 <_asin>
    6dda:	dc 01       	movw	r26, r24
    6ddc:	cb 01       	movw	r24, r22
    6dde:	20 91 2d 02 	lds	r18, 0x022D
    6de2:	30 91 2e 02 	lds	r19, 0x022E
    6de6:	40 91 2f 02 	lds	r20, 0x022F
    6dea:	50 91 30 02 	lds	r21, 0x0230
    6dee:	bc 01       	movw	r22, r24
    6df0:	cd 01       	movw	r24, r26
    6df2:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    6df6:	dc 01       	movw	r26, r24
    6df8:	cb 01       	movw	r24, r22
    6dfa:	9c 01       	movw	r18, r24
    6dfc:	ad 01       	movw	r20, r26
    6dfe:	c8 01       	movw	r24, r16
    6e00:	88 0f       	add	r24, r24
    6e02:	99 1f       	adc	r25, r25
    6e04:	88 0f       	add	r24, r24
    6e06:	99 1f       	adc	r25, r25
    6e08:	fc 01       	movw	r30, r24
    6e0a:	e9 5b       	subi	r30, 0xB9	; 185
    6e0c:	fd 4f       	sbci	r31, 0xFD	; 253
    6e0e:	20 83       	st	Z, r18
    6e10:	31 83       	std	Z+1, r19	; 0x01
    6e12:	42 83       	std	Z+2, r20	; 0x02
    6e14:	53 83       	std	Z+3, r21	; 0x03
    6e16:	4a c1       	rjmp	.+660    	; 0x70ac <Local_voidCalculateFunctions+0xa3c>
			break;
		case 'M':
			Global_Af32Operands[Global_s8Num_Iterator] = _acos(Global_Af32Operands[Global_s8Num_Iterator] ) * Local_f32Mode;
    6e18:	80 91 27 02 	lds	r24, 0x0227
    6e1c:	08 2f       	mov	r16, r24
    6e1e:	11 27       	eor	r17, r17
    6e20:	07 fd       	sbrc	r16, 7
    6e22:	10 95       	com	r17
    6e24:	80 91 27 02 	lds	r24, 0x0227
    6e28:	99 27       	eor	r25, r25
    6e2a:	87 fd       	sbrc	r24, 7
    6e2c:	90 95       	com	r25
    6e2e:	88 0f       	add	r24, r24
    6e30:	99 1f       	adc	r25, r25
    6e32:	88 0f       	add	r24, r24
    6e34:	99 1f       	adc	r25, r25
    6e36:	fc 01       	movw	r30, r24
    6e38:	e9 5b       	subi	r30, 0xB9	; 185
    6e3a:	fd 4f       	sbci	r31, 0xFD	; 253
    6e3c:	80 81       	ld	r24, Z
    6e3e:	91 81       	ldd	r25, Z+1	; 0x01
    6e40:	a2 81       	ldd	r26, Z+2	; 0x02
    6e42:	b3 81       	ldd	r27, Z+3	; 0x03
    6e44:	bc 01       	movw	r22, r24
    6e46:	cd 01       	movw	r24, r26
    6e48:	0e 94 91 12 	call	0x2522	; 0x2522 <_acos>
    6e4c:	dc 01       	movw	r26, r24
    6e4e:	cb 01       	movw	r24, r22
    6e50:	20 91 2d 02 	lds	r18, 0x022D
    6e54:	30 91 2e 02 	lds	r19, 0x022E
    6e58:	40 91 2f 02 	lds	r20, 0x022F
    6e5c:	50 91 30 02 	lds	r21, 0x0230
    6e60:	bc 01       	movw	r22, r24
    6e62:	cd 01       	movw	r24, r26
    6e64:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    6e68:	dc 01       	movw	r26, r24
    6e6a:	cb 01       	movw	r24, r22
    6e6c:	9c 01       	movw	r18, r24
    6e6e:	ad 01       	movw	r20, r26
    6e70:	c8 01       	movw	r24, r16
    6e72:	88 0f       	add	r24, r24
    6e74:	99 1f       	adc	r25, r25
    6e76:	88 0f       	add	r24, r24
    6e78:	99 1f       	adc	r25, r25
    6e7a:	fc 01       	movw	r30, r24
    6e7c:	e9 5b       	subi	r30, 0xB9	; 185
    6e7e:	fd 4f       	sbci	r31, 0xFD	; 253
    6e80:	20 83       	st	Z, r18
    6e82:	31 83       	std	Z+1, r19	; 0x01
    6e84:	42 83       	std	Z+2, r20	; 0x02
    6e86:	53 83       	std	Z+3, r21	; 0x03
    6e88:	11 c1       	rjmp	.+546    	; 0x70ac <Local_voidCalculateFunctions+0xa3c>
			break;
		case 'N':
			Global_Af32Operands[Global_s8Num_Iterator] = _atan(Global_Af32Operands[Global_s8Num_Iterator] ) * Local_f32Mode;
    6e8a:	80 91 27 02 	lds	r24, 0x0227
    6e8e:	08 2f       	mov	r16, r24
    6e90:	11 27       	eor	r17, r17
    6e92:	07 fd       	sbrc	r16, 7
    6e94:	10 95       	com	r17
    6e96:	80 91 27 02 	lds	r24, 0x0227
    6e9a:	99 27       	eor	r25, r25
    6e9c:	87 fd       	sbrc	r24, 7
    6e9e:	90 95       	com	r25
    6ea0:	88 0f       	add	r24, r24
    6ea2:	99 1f       	adc	r25, r25
    6ea4:	88 0f       	add	r24, r24
    6ea6:	99 1f       	adc	r25, r25
    6ea8:	fc 01       	movw	r30, r24
    6eaa:	e9 5b       	subi	r30, 0xB9	; 185
    6eac:	fd 4f       	sbci	r31, 0xFD	; 253
    6eae:	80 81       	ld	r24, Z
    6eb0:	91 81       	ldd	r25, Z+1	; 0x01
    6eb2:	a2 81       	ldd	r26, Z+2	; 0x02
    6eb4:	b3 81       	ldd	r27, Z+3	; 0x03
    6eb6:	bc 01       	movw	r22, r24
    6eb8:	cd 01       	movw	r24, r26
    6eba:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <_atan>
    6ebe:	dc 01       	movw	r26, r24
    6ec0:	cb 01       	movw	r24, r22
    6ec2:	20 91 2d 02 	lds	r18, 0x022D
    6ec6:	30 91 2e 02 	lds	r19, 0x022E
    6eca:	40 91 2f 02 	lds	r20, 0x022F
    6ece:	50 91 30 02 	lds	r21, 0x0230
    6ed2:	bc 01       	movw	r22, r24
    6ed4:	cd 01       	movw	r24, r26
    6ed6:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    6eda:	dc 01       	movw	r26, r24
    6edc:	cb 01       	movw	r24, r22
    6ede:	9c 01       	movw	r18, r24
    6ee0:	ad 01       	movw	r20, r26
    6ee2:	c8 01       	movw	r24, r16
    6ee4:	88 0f       	add	r24, r24
    6ee6:	99 1f       	adc	r25, r25
    6ee8:	88 0f       	add	r24, r24
    6eea:	99 1f       	adc	r25, r25
    6eec:	fc 01       	movw	r30, r24
    6eee:	e9 5b       	subi	r30, 0xB9	; 185
    6ef0:	fd 4f       	sbci	r31, 0xFD	; 253
    6ef2:	20 83       	st	Z, r18
    6ef4:	31 83       	std	Z+1, r19	; 0x01
    6ef6:	42 83       	std	Z+2, r20	; 0x02
    6ef8:	53 83       	std	Z+3, r21	; 0x03
    6efa:	d8 c0       	rjmp	.+432    	; 0x70ac <Local_voidCalculateFunctions+0xa3c>
			break;
		case 'O':
			Global_Af32Operands[Global_s8Num_Iterator] = _sinh(Global_Af32Operands[Global_s8Num_Iterator]);
    6efc:	80 91 27 02 	lds	r24, 0x0227
    6f00:	08 2f       	mov	r16, r24
    6f02:	11 27       	eor	r17, r17
    6f04:	07 fd       	sbrc	r16, 7
    6f06:	10 95       	com	r17
    6f08:	80 91 27 02 	lds	r24, 0x0227
    6f0c:	99 27       	eor	r25, r25
    6f0e:	87 fd       	sbrc	r24, 7
    6f10:	90 95       	com	r25
    6f12:	88 0f       	add	r24, r24
    6f14:	99 1f       	adc	r25, r25
    6f16:	88 0f       	add	r24, r24
    6f18:	99 1f       	adc	r25, r25
    6f1a:	fc 01       	movw	r30, r24
    6f1c:	e9 5b       	subi	r30, 0xB9	; 185
    6f1e:	fd 4f       	sbci	r31, 0xFD	; 253
    6f20:	80 81       	ld	r24, Z
    6f22:	91 81       	ldd	r25, Z+1	; 0x01
    6f24:	a2 81       	ldd	r26, Z+2	; 0x02
    6f26:	b3 81       	ldd	r27, Z+3	; 0x03
    6f28:	bc 01       	movw	r22, r24
    6f2a:	cd 01       	movw	r24, r26
    6f2c:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <_sinh>
    6f30:	9b 01       	movw	r18, r22
    6f32:	ac 01       	movw	r20, r24
    6f34:	c8 01       	movw	r24, r16
    6f36:	88 0f       	add	r24, r24
    6f38:	99 1f       	adc	r25, r25
    6f3a:	88 0f       	add	r24, r24
    6f3c:	99 1f       	adc	r25, r25
    6f3e:	fc 01       	movw	r30, r24
    6f40:	e9 5b       	subi	r30, 0xB9	; 185
    6f42:	fd 4f       	sbci	r31, 0xFD	; 253
    6f44:	20 83       	st	Z, r18
    6f46:	31 83       	std	Z+1, r19	; 0x01
    6f48:	42 83       	std	Z+2, r20	; 0x02
    6f4a:	53 83       	std	Z+3, r21	; 0x03
    6f4c:	af c0       	rjmp	.+350    	; 0x70ac <Local_voidCalculateFunctions+0xa3c>
			break;
		case 'P':
			Global_Af32Operands[Global_s8Num_Iterator] = _cosh(Global_Af32Operands[Global_s8Num_Iterator]);
    6f4e:	80 91 27 02 	lds	r24, 0x0227
    6f52:	08 2f       	mov	r16, r24
    6f54:	11 27       	eor	r17, r17
    6f56:	07 fd       	sbrc	r16, 7
    6f58:	10 95       	com	r17
    6f5a:	80 91 27 02 	lds	r24, 0x0227
    6f5e:	99 27       	eor	r25, r25
    6f60:	87 fd       	sbrc	r24, 7
    6f62:	90 95       	com	r25
    6f64:	88 0f       	add	r24, r24
    6f66:	99 1f       	adc	r25, r25
    6f68:	88 0f       	add	r24, r24
    6f6a:	99 1f       	adc	r25, r25
    6f6c:	fc 01       	movw	r30, r24
    6f6e:	e9 5b       	subi	r30, 0xB9	; 185
    6f70:	fd 4f       	sbci	r31, 0xFD	; 253
    6f72:	80 81       	ld	r24, Z
    6f74:	91 81       	ldd	r25, Z+1	; 0x01
    6f76:	a2 81       	ldd	r26, Z+2	; 0x02
    6f78:	b3 81       	ldd	r27, Z+3	; 0x03
    6f7a:	bc 01       	movw	r22, r24
    6f7c:	cd 01       	movw	r24, r26
    6f7e:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <_cosh>
    6f82:	9b 01       	movw	r18, r22
    6f84:	ac 01       	movw	r20, r24
    6f86:	c8 01       	movw	r24, r16
    6f88:	88 0f       	add	r24, r24
    6f8a:	99 1f       	adc	r25, r25
    6f8c:	88 0f       	add	r24, r24
    6f8e:	99 1f       	adc	r25, r25
    6f90:	fc 01       	movw	r30, r24
    6f92:	e9 5b       	subi	r30, 0xB9	; 185
    6f94:	fd 4f       	sbci	r31, 0xFD	; 253
    6f96:	20 83       	st	Z, r18
    6f98:	31 83       	std	Z+1, r19	; 0x01
    6f9a:	42 83       	std	Z+2, r20	; 0x02
    6f9c:	53 83       	std	Z+3, r21	; 0x03
    6f9e:	86 c0       	rjmp	.+268    	; 0x70ac <Local_voidCalculateFunctions+0xa3c>
			break;
		case 'Q':
			Global_Af32Operands[Global_s8Num_Iterator] = _tanh(Global_Af32Operands[Global_s8Num_Iterator]);
    6fa0:	80 91 27 02 	lds	r24, 0x0227
    6fa4:	08 2f       	mov	r16, r24
    6fa6:	11 27       	eor	r17, r17
    6fa8:	07 fd       	sbrc	r16, 7
    6faa:	10 95       	com	r17
    6fac:	80 91 27 02 	lds	r24, 0x0227
    6fb0:	99 27       	eor	r25, r25
    6fb2:	87 fd       	sbrc	r24, 7
    6fb4:	90 95       	com	r25
    6fb6:	88 0f       	add	r24, r24
    6fb8:	99 1f       	adc	r25, r25
    6fba:	88 0f       	add	r24, r24
    6fbc:	99 1f       	adc	r25, r25
    6fbe:	fc 01       	movw	r30, r24
    6fc0:	e9 5b       	subi	r30, 0xB9	; 185
    6fc2:	fd 4f       	sbci	r31, 0xFD	; 253
    6fc4:	80 81       	ld	r24, Z
    6fc6:	91 81       	ldd	r25, Z+1	; 0x01
    6fc8:	a2 81       	ldd	r26, Z+2	; 0x02
    6fca:	b3 81       	ldd	r27, Z+3	; 0x03
    6fcc:	bc 01       	movw	r22, r24
    6fce:	cd 01       	movw	r24, r26
    6fd0:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <_tanh>
    6fd4:	9b 01       	movw	r18, r22
    6fd6:	ac 01       	movw	r20, r24
    6fd8:	c8 01       	movw	r24, r16
    6fda:	88 0f       	add	r24, r24
    6fdc:	99 1f       	adc	r25, r25
    6fde:	88 0f       	add	r24, r24
    6fe0:	99 1f       	adc	r25, r25
    6fe2:	fc 01       	movw	r30, r24
    6fe4:	e9 5b       	subi	r30, 0xB9	; 185
    6fe6:	fd 4f       	sbci	r31, 0xFD	; 253
    6fe8:	20 83       	st	Z, r18
    6fea:	31 83       	std	Z+1, r19	; 0x01
    6fec:	42 83       	std	Z+2, r20	; 0x02
    6fee:	53 83       	std	Z+3, r21	; 0x03
    6ff0:	5d c0       	rjmp	.+186    	; 0x70ac <Local_voidCalculateFunctions+0xa3c>
			break;
		case 'R':
			Global_Af32Operands[Global_s8Num_Iterator - 1] = _pow(Global_Af32Operands[Global_s8Num_Iterator - 1], (s8)Global_Af32Operands[Global_s8Num_Iterator]);
    6ff2:	80 91 27 02 	lds	r24, 0x0227
    6ff6:	99 27       	eor	r25, r25
    6ff8:	87 fd       	sbrc	r24, 7
    6ffa:	90 95       	com	r25
    6ffc:	6c 01       	movw	r12, r24
    6ffe:	08 94       	sec
    7000:	c1 08       	sbc	r12, r1
    7002:	d1 08       	sbc	r13, r1
    7004:	80 91 27 02 	lds	r24, 0x0227
    7008:	99 27       	eor	r25, r25
    700a:	87 fd       	sbrc	r24, 7
    700c:	90 95       	com	r25
    700e:	01 97       	sbiw	r24, 0x01	; 1
    7010:	88 0f       	add	r24, r24
    7012:	99 1f       	adc	r25, r25
    7014:	88 0f       	add	r24, r24
    7016:	99 1f       	adc	r25, r25
    7018:	fc 01       	movw	r30, r24
    701a:	e9 5b       	subi	r30, 0xB9	; 185
    701c:	fd 4f       	sbci	r31, 0xFD	; 253
    701e:	e0 80       	ld	r14, Z
    7020:	f1 80       	ldd	r15, Z+1	; 0x01
    7022:	02 81       	ldd	r16, Z+2	; 0x02
    7024:	13 81       	ldd	r17, Z+3	; 0x03
    7026:	80 91 27 02 	lds	r24, 0x0227
    702a:	99 27       	eor	r25, r25
    702c:	87 fd       	sbrc	r24, 7
    702e:	90 95       	com	r25
    7030:	88 0f       	add	r24, r24
    7032:	99 1f       	adc	r25, r25
    7034:	88 0f       	add	r24, r24
    7036:	99 1f       	adc	r25, r25
    7038:	fc 01       	movw	r30, r24
    703a:	e9 5b       	subi	r30, 0xB9	; 185
    703c:	fd 4f       	sbci	r31, 0xFD	; 253
    703e:	80 81       	ld	r24, Z
    7040:	91 81       	ldd	r25, Z+1	; 0x01
    7042:	a2 81       	ldd	r26, Z+2	; 0x02
    7044:	b3 81       	ldd	r27, Z+3	; 0x03
    7046:	bc 01       	movw	r22, r24
    7048:	cd 01       	movw	r24, r26
    704a:	0e 94 41 06 	call	0xc82	; 0xc82 <__fixsfsi>
    704e:	dc 01       	movw	r26, r24
    7050:	cb 01       	movw	r24, r22
    7052:	28 2f       	mov	r18, r24
    7054:	c8 01       	movw	r24, r16
    7056:	b7 01       	movw	r22, r14
    7058:	42 2f       	mov	r20, r18
    705a:	0e 94 03 09 	call	0x1206	; 0x1206 <_pow>
    705e:	9b 01       	movw	r18, r22
    7060:	ac 01       	movw	r20, r24
    7062:	c6 01       	movw	r24, r12
    7064:	88 0f       	add	r24, r24
    7066:	99 1f       	adc	r25, r25
    7068:	88 0f       	add	r24, r24
    706a:	99 1f       	adc	r25, r25
    706c:	fc 01       	movw	r30, r24
    706e:	e9 5b       	subi	r30, 0xB9	; 185
    7070:	fd 4f       	sbci	r31, 0xFD	; 253
    7072:	20 83       	st	Z, r18
    7074:	31 83       	std	Z+1, r19	; 0x01
    7076:	42 83       	std	Z+2, r20	; 0x02
    7078:	53 83       	std	Z+3, r21	; 0x03
			Global_Af32Operands[Global_s8Num_Iterator] = 0;
    707a:	80 91 27 02 	lds	r24, 0x0227
    707e:	99 27       	eor	r25, r25
    7080:	87 fd       	sbrc	r24, 7
    7082:	90 95       	com	r25
    7084:	88 0f       	add	r24, r24
    7086:	99 1f       	adc	r25, r25
    7088:	88 0f       	add	r24, r24
    708a:	99 1f       	adc	r25, r25
    708c:	fc 01       	movw	r30, r24
    708e:	e9 5b       	subi	r30, 0xB9	; 185
    7090:	fd 4f       	sbci	r31, 0xFD	; 253
    7092:	80 e0       	ldi	r24, 0x00	; 0
    7094:	90 e0       	ldi	r25, 0x00	; 0
    7096:	a0 e0       	ldi	r26, 0x00	; 0
    7098:	b0 e0       	ldi	r27, 0x00	; 0
    709a:	80 83       	st	Z, r24
    709c:	91 83       	std	Z+1, r25	; 0x01
    709e:	a2 83       	std	Z+2, r26	; 0x02
    70a0:	b3 83       	std	Z+3, r27	; 0x03
			Global_s8Num_Iterator--;
    70a2:	80 91 27 02 	lds	r24, 0x0227
    70a6:	81 50       	subi	r24, 0x01	; 1
    70a8:	80 93 27 02 	sts	0x0227, r24
			break;
		}
	}

}
    70ac:	0f 90       	pop	r0
    70ae:	0f 90       	pop	r0
    70b0:	cf 91       	pop	r28
    70b2:	df 91       	pop	r29
    70b4:	1f 91       	pop	r17
    70b6:	0f 91       	pop	r16
    70b8:	ff 90       	pop	r15
    70ba:	ef 90       	pop	r14
    70bc:	df 90       	pop	r13
    70be:	cf 90       	pop	r12
    70c0:	08 95       	ret

000070c2 <Local_voidDisplayFunction>:

void Local_voidDisplayFunction(void)
{
    70c2:	df 93       	push	r29
    70c4:	cf 93       	push	r28
    70c6:	00 d0       	rcall	.+0      	; 0x70c8 <Local_voidDisplayFunction+0x6>
    70c8:	cd b7       	in	r28, 0x3d	; 61
    70ca:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(Global_u16Flags, High_Pre);
    70cc:	80 91 3d 02 	lds	r24, 0x023D
    70d0:	90 91 3e 02 	lds	r25, 0x023E
    70d4:	80 62       	ori	r24, 0x20	; 32
    70d6:	90 93 3e 02 	sts	0x023E, r25
    70da:	80 93 3d 02 	sts	0x023D, r24
	switch(Global_u8PressedKey)
    70de:	80 91 31 02 	lds	r24, 0x0231
    70e2:	28 2f       	mov	r18, r24
    70e4:	30 e0       	ldi	r19, 0x00	; 0
    70e6:	3a 83       	std	Y+2, r19	; 0x02
    70e8:	29 83       	std	Y+1, r18	; 0x01
    70ea:	89 81       	ldd	r24, Y+1	; 0x01
    70ec:	9a 81       	ldd	r25, Y+2	; 0x02
    70ee:	8c 34       	cpi	r24, 0x4C	; 76
    70f0:	91 05       	cpc	r25, r1
    70f2:	09 f4       	brne	.+2      	; 0x70f6 <Local_voidDisplayFunction+0x34>
    70f4:	68 c0       	rjmp	.+208    	; 0x71c6 <Local_voidDisplayFunction+0x104>
    70f6:	29 81       	ldd	r18, Y+1	; 0x01
    70f8:	3a 81       	ldd	r19, Y+2	; 0x02
    70fa:	2d 34       	cpi	r18, 0x4D	; 77
    70fc:	31 05       	cpc	r19, r1
    70fe:	1c f5       	brge	.+70     	; 0x7146 <Local_voidDisplayFunction+0x84>
    7100:	89 81       	ldd	r24, Y+1	; 0x01
    7102:	9a 81       	ldd	r25, Y+2	; 0x02
    7104:	89 34       	cpi	r24, 0x49	; 73
    7106:	91 05       	cpc	r25, r1
    7108:	09 f4       	brne	.+2      	; 0x710c <Local_voidDisplayFunction+0x4a>
    710a:	44 c0       	rjmp	.+136    	; 0x7194 <Local_voidDisplayFunction+0xd2>
    710c:	29 81       	ldd	r18, Y+1	; 0x01
    710e:	3a 81       	ldd	r19, Y+2	; 0x02
    7110:	2a 34       	cpi	r18, 0x4A	; 74
    7112:	31 05       	cpc	r19, r1
    7114:	6c f4       	brge	.+26     	; 0x7130 <Local_voidDisplayFunction+0x6e>
    7116:	89 81       	ldd	r24, Y+1	; 0x01
    7118:	9a 81       	ldd	r25, Y+2	; 0x02
    711a:	87 34       	cpi	r24, 0x47	; 71
    711c:	91 05       	cpc	r25, r1
    711e:	09 f4       	brne	.+2      	; 0x7122 <Local_voidDisplayFunction+0x60>
    7120:	48 c0       	rjmp	.+144    	; 0x71b2 <Local_voidDisplayFunction+0xf0>
    7122:	29 81       	ldd	r18, Y+1	; 0x01
    7124:	3a 81       	ldd	r19, Y+2	; 0x02
    7126:	28 34       	cpi	r18, 0x48	; 72
    7128:	31 05       	cpc	r19, r1
    712a:	09 f4       	brne	.+2      	; 0x712e <Local_voidDisplayFunction+0x6c>
    712c:	47 c0       	rjmp	.+142    	; 0x71bc <Local_voidDisplayFunction+0xfa>
    712e:	6c c0       	rjmp	.+216    	; 0x7208 <Local_voidDisplayFunction+0x146>
    7130:	89 81       	ldd	r24, Y+1	; 0x01
    7132:	9a 81       	ldd	r25, Y+2	; 0x02
    7134:	8a 34       	cpi	r24, 0x4A	; 74
    7136:	91 05       	cpc	r25, r1
    7138:	91 f1       	breq	.+100    	; 0x719e <Local_voidDisplayFunction+0xdc>
    713a:	29 81       	ldd	r18, Y+1	; 0x01
    713c:	3a 81       	ldd	r19, Y+2	; 0x02
    713e:	2b 34       	cpi	r18, 0x4B	; 75
    7140:	31 05       	cpc	r19, r1
    7142:	91 f1       	breq	.+100    	; 0x71a8 <Local_voidDisplayFunction+0xe6>
    7144:	61 c0       	rjmp	.+194    	; 0x7208 <Local_voidDisplayFunction+0x146>
    7146:	89 81       	ldd	r24, Y+1	; 0x01
    7148:	9a 81       	ldd	r25, Y+2	; 0x02
    714a:	8f 34       	cpi	r24, 0x4F	; 79
    714c:	91 05       	cpc	r25, r1
    714e:	09 f4       	brne	.+2      	; 0x7152 <Local_voidDisplayFunction+0x90>
    7150:	49 c0       	rjmp	.+146    	; 0x71e4 <Local_voidDisplayFunction+0x122>
    7152:	29 81       	ldd	r18, Y+1	; 0x01
    7154:	3a 81       	ldd	r19, Y+2	; 0x02
    7156:	20 35       	cpi	r18, 0x50	; 80
    7158:	31 05       	cpc	r19, r1
    715a:	5c f4       	brge	.+22     	; 0x7172 <Local_voidDisplayFunction+0xb0>
    715c:	89 81       	ldd	r24, Y+1	; 0x01
    715e:	9a 81       	ldd	r25, Y+2	; 0x02
    7160:	8d 34       	cpi	r24, 0x4D	; 77
    7162:	91 05       	cpc	r25, r1
    7164:	a9 f1       	breq	.+106    	; 0x71d0 <Local_voidDisplayFunction+0x10e>
    7166:	29 81       	ldd	r18, Y+1	; 0x01
    7168:	3a 81       	ldd	r19, Y+2	; 0x02
    716a:	2e 34       	cpi	r18, 0x4E	; 78
    716c:	31 05       	cpc	r19, r1
    716e:	a9 f1       	breq	.+106    	; 0x71da <Local_voidDisplayFunction+0x118>
    7170:	4b c0       	rjmp	.+150    	; 0x7208 <Local_voidDisplayFunction+0x146>
    7172:	89 81       	ldd	r24, Y+1	; 0x01
    7174:	9a 81       	ldd	r25, Y+2	; 0x02
    7176:	81 35       	cpi	r24, 0x51	; 81
    7178:	91 05       	cpc	r25, r1
    717a:	09 f4       	brne	.+2      	; 0x717e <Local_voidDisplayFunction+0xbc>
    717c:	3d c0       	rjmp	.+122    	; 0x71f8 <Local_voidDisplayFunction+0x136>
    717e:	29 81       	ldd	r18, Y+1	; 0x01
    7180:	3a 81       	ldd	r19, Y+2	; 0x02
    7182:	21 35       	cpi	r18, 0x51	; 81
    7184:	31 05       	cpc	r19, r1
    7186:	9c f1       	brlt	.+102    	; 0x71ee <Local_voidDisplayFunction+0x12c>
    7188:	89 81       	ldd	r24, Y+1	; 0x01
    718a:	9a 81       	ldd	r25, Y+2	; 0x02
    718c:	82 35       	cpi	r24, 0x52	; 82
    718e:	91 05       	cpc	r25, r1
    7190:	c1 f1       	breq	.+112    	; 0x7202 <Local_voidDisplayFunction+0x140>
    7192:	3a c0       	rjmp	.+116    	; 0x7208 <Local_voidDisplayFunction+0x146>
	{
	case 'I':
		LCD_enuDisplayString("sin(");
    7194:	83 e7       	ldi	r24, 0x73	; 115
    7196:	90 e0       	ldi	r25, 0x00	; 0
    7198:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
    719c:	35 c0       	rjmp	.+106    	; 0x7208 <Local_voidDisplayFunction+0x146>
		break;
	case 'J':
		LCD_enuDisplayString("cos(");
    719e:	88 e7       	ldi	r24, 0x78	; 120
    71a0:	90 e0       	ldi	r25, 0x00	; 0
    71a2:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
    71a6:	30 c0       	rjmp	.+96     	; 0x7208 <Local_voidDisplayFunction+0x146>
		break;
	case 'K':
		LCD_enuDisplayString("tan(");
    71a8:	8d e7       	ldi	r24, 0x7D	; 125
    71aa:	90 e0       	ldi	r25, 0x00	; 0
    71ac:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
    71b0:	2b c0       	rjmp	.+86     	; 0x7208 <Local_voidDisplayFunction+0x146>
		break;
	case 'G':
		LCD_enuDisplayString("e^");
    71b2:	82 e8       	ldi	r24, 0x82	; 130
    71b4:	90 e0       	ldi	r25, 0x00	; 0
    71b6:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
    71ba:	26 c0       	rjmp	.+76     	; 0x7208 <Local_voidDisplayFunction+0x146>
		break;
	case 'H':
		LCD_enuDisplayString("sqrt(");
    71bc:	85 e8       	ldi	r24, 0x85	; 133
    71be:	90 e0       	ldi	r25, 0x00	; 0
    71c0:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
    71c4:	21 c0       	rjmp	.+66     	; 0x7208 <Local_voidDisplayFunction+0x146>
		break;
	case 'L':
		LCD_enuDisplayString("asin(");
    71c6:	8b e8       	ldi	r24, 0x8B	; 139
    71c8:	90 e0       	ldi	r25, 0x00	; 0
    71ca:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
    71ce:	1c c0       	rjmp	.+56     	; 0x7208 <Local_voidDisplayFunction+0x146>
		break;
	case 'M':
		LCD_enuDisplayString("acos(");
    71d0:	81 e9       	ldi	r24, 0x91	; 145
    71d2:	90 e0       	ldi	r25, 0x00	; 0
    71d4:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
    71d8:	17 c0       	rjmp	.+46     	; 0x7208 <Local_voidDisplayFunction+0x146>
		break;
	case 'N':
		LCD_enuDisplayString("atan(");
    71da:	87 e9       	ldi	r24, 0x97	; 151
    71dc:	90 e0       	ldi	r25, 0x00	; 0
    71de:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
    71e2:	12 c0       	rjmp	.+36     	; 0x7208 <Local_voidDisplayFunction+0x146>
		break;
	case 'O':
		LCD_enuDisplayString("sinh(");
    71e4:	8d e9       	ldi	r24, 0x9D	; 157
    71e6:	90 e0       	ldi	r25, 0x00	; 0
    71e8:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
    71ec:	0d c0       	rjmp	.+26     	; 0x7208 <Local_voidDisplayFunction+0x146>
		break;
	case 'P':
		LCD_enuDisplayString("cosh(");
    71ee:	83 ea       	ldi	r24, 0xA3	; 163
    71f0:	90 e0       	ldi	r25, 0x00	; 0
    71f2:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
    71f6:	08 c0       	rjmp	.+16     	; 0x7208 <Local_voidDisplayFunction+0x146>
		break;
	case 'Q':
		LCD_enuDisplayString("tanh(");
    71f8:	89 ea       	ldi	r24, 0xA9	; 169
    71fa:	90 e0       	ldi	r25, 0x00	; 0
    71fc:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
    7200:	03 c0       	rjmp	.+6      	; 0x7208 <Local_voidDisplayFunction+0x146>
		break;
	case 'R':
		LCD_enuDisplayChar('^');
    7202:	8e e5       	ldi	r24, 0x5E	; 94
    7204:	0e 94 60 20 	call	0x40c0	; 0x40c0 <LCD_enuDisplayChar>
		break;
	}
}
    7208:	0f 90       	pop	r0
    720a:	0f 90       	pop	r0
    720c:	cf 91       	pop	r28
    720e:	df 91       	pop	r29
    7210:	08 95       	ret

00007212 <Local_voidGetOperand>:

void Local_voidGetOperand(void)
{
    7212:	cf 92       	push	r12
    7214:	df 92       	push	r13
    7216:	ef 92       	push	r14
    7218:	ff 92       	push	r15
    721a:	0f 93       	push	r16
    721c:	1f 93       	push	r17
    721e:	df 93       	push	r29
    7220:	cf 93       	push	r28
    7222:	cd b7       	in	r28, 0x3d	; 61
    7224:	de b7       	in	r29, 0x3e	; 62
	LCD_enuDisplayChar(Global_u8PressedKey);
    7226:	80 91 31 02 	lds	r24, 0x0231
    722a:	0e 94 60 20 	call	0x40c0	; 0x40c0 <LCD_enuDisplayChar>

	if(!Get_Bit(Global_u16Flags, last_is_num)) Global_s8Num_Iterator++;
    722e:	80 91 3d 02 	lds	r24, 0x023D
    7232:	90 91 3e 02 	lds	r25, 0x023E
    7236:	88 70       	andi	r24, 0x08	; 8
    7238:	90 70       	andi	r25, 0x00	; 0
    723a:	00 97       	sbiw	r24, 0x00	; 0
    723c:	29 f4       	brne	.+10     	; 0x7248 <Local_voidGetOperand+0x36>
    723e:	80 91 27 02 	lds	r24, 0x0227
    7242:	8f 5f       	subi	r24, 0xFF	; 255
    7244:	80 93 27 02 	sts	0x0227, r24

	Set_Bit(Global_u16Flags, last_is_num);
    7248:	80 91 3d 02 	lds	r24, 0x023D
    724c:	90 91 3e 02 	lds	r25, 0x023E
    7250:	88 60       	ori	r24, 0x08	; 8
    7252:	90 93 3e 02 	sts	0x023E, r25
    7256:	80 93 3d 02 	sts	0x023D, r24
	Clr_Bit(Global_u16Flags, last_is_op);
    725a:	80 91 3d 02 	lds	r24, 0x023D
    725e:	90 91 3e 02 	lds	r25, 0x023E
    7262:	8f 7e       	andi	r24, 0xEF	; 239
    7264:	90 93 3e 02 	sts	0x023E, r25
    7268:	80 93 3d 02 	sts	0x023D, r24

	if(!Get_Bit(Global_u16Flags, dot)) Global_Af32Operands[Global_s8Num_Iterator] *= 10;
    726c:	80 91 3d 02 	lds	r24, 0x023D
    7270:	90 91 3e 02 	lds	r25, 0x023E
    7274:	82 70       	andi	r24, 0x02	; 2
    7276:	90 70       	andi	r25, 0x00	; 0
    7278:	00 97       	sbiw	r24, 0x00	; 0
    727a:	71 f5       	brne	.+92     	; 0x72d8 <Local_voidGetOperand+0xc6>
    727c:	80 91 27 02 	lds	r24, 0x0227
    7280:	08 2f       	mov	r16, r24
    7282:	11 27       	eor	r17, r17
    7284:	07 fd       	sbrc	r16, 7
    7286:	10 95       	com	r17
    7288:	80 91 27 02 	lds	r24, 0x0227
    728c:	99 27       	eor	r25, r25
    728e:	87 fd       	sbrc	r24, 7
    7290:	90 95       	com	r25
    7292:	88 0f       	add	r24, r24
    7294:	99 1f       	adc	r25, r25
    7296:	88 0f       	add	r24, r24
    7298:	99 1f       	adc	r25, r25
    729a:	fc 01       	movw	r30, r24
    729c:	e9 5b       	subi	r30, 0xB9	; 185
    729e:	fd 4f       	sbci	r31, 0xFD	; 253
    72a0:	80 81       	ld	r24, Z
    72a2:	91 81       	ldd	r25, Z+1	; 0x01
    72a4:	a2 81       	ldd	r26, Z+2	; 0x02
    72a6:	b3 81       	ldd	r27, Z+3	; 0x03
    72a8:	bc 01       	movw	r22, r24
    72aa:	cd 01       	movw	r24, r26
    72ac:	20 e0       	ldi	r18, 0x00	; 0
    72ae:	30 e0       	ldi	r19, 0x00	; 0
    72b0:	40 e2       	ldi	r20, 0x20	; 32
    72b2:	51 e4       	ldi	r21, 0x41	; 65
    72b4:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    72b8:	dc 01       	movw	r26, r24
    72ba:	cb 01       	movw	r24, r22
    72bc:	9c 01       	movw	r18, r24
    72be:	ad 01       	movw	r20, r26
    72c0:	c8 01       	movw	r24, r16
    72c2:	88 0f       	add	r24, r24
    72c4:	99 1f       	adc	r25, r25
    72c6:	88 0f       	add	r24, r24
    72c8:	99 1f       	adc	r25, r25
    72ca:	fc 01       	movw	r30, r24
    72cc:	e9 5b       	subi	r30, 0xB9	; 185
    72ce:	fd 4f       	sbci	r31, 0xFD	; 253
    72d0:	20 83       	st	Z, r18
    72d2:	31 83       	std	Z+1, r19	; 0x01
    72d4:	42 83       	std	Z+2, r20	; 0x02
    72d6:	53 83       	std	Z+3, r21	; 0x03

	if(Get_Bit(Global_u16Flags, negative) && Get_Bit(Global_u16Flags, dot))
    72d8:	80 91 3d 02 	lds	r24, 0x023D
    72dc:	90 91 3e 02 	lds	r25, 0x023E
    72e0:	81 70       	andi	r24, 0x01	; 1
    72e2:	90 70       	andi	r25, 0x00	; 0
    72e4:	98 2f       	mov	r25, r24
    72e6:	81 e0       	ldi	r24, 0x01	; 1
    72e8:	89 27       	eor	r24, r25
    72ea:	88 23       	and	r24, r24
    72ec:	09 f0       	breq	.+2      	; 0x72f0 <Local_voidGetOperand+0xde>
    72ee:	6d c0       	rjmp	.+218    	; 0x73ca <Local_voidGetOperand+0x1b8>
    72f0:	80 91 3d 02 	lds	r24, 0x023D
    72f4:	90 91 3e 02 	lds	r25, 0x023E
    72f8:	82 70       	andi	r24, 0x02	; 2
    72fa:	90 70       	andi	r25, 0x00	; 0
    72fc:	00 97       	sbiw	r24, 0x00	; 0
    72fe:	09 f4       	brne	.+2      	; 0x7302 <Local_voidGetOperand+0xf0>
    7300:	64 c0       	rjmp	.+200    	; 0x73ca <Local_voidGetOperand+0x1b8>
	{
		Global_Af32Operands[Global_s8Num_Iterator] -= (Global_u8PressedKey - '0')/Local_u8DotCalc;
    7302:	80 91 27 02 	lds	r24, 0x0227
    7306:	c8 2e       	mov	r12, r24
    7308:	dd 24       	eor	r13, r13
    730a:	c7 fc       	sbrc	r12, 7
    730c:	d0 94       	com	r13
    730e:	80 91 27 02 	lds	r24, 0x0227
    7312:	99 27       	eor	r25, r25
    7314:	87 fd       	sbrc	r24, 7
    7316:	90 95       	com	r25
    7318:	88 0f       	add	r24, r24
    731a:	99 1f       	adc	r25, r25
    731c:	88 0f       	add	r24, r24
    731e:	99 1f       	adc	r25, r25
    7320:	fc 01       	movw	r30, r24
    7322:	e9 5b       	subi	r30, 0xB9	; 185
    7324:	fd 4f       	sbci	r31, 0xFD	; 253
    7326:	e0 80       	ld	r14, Z
    7328:	f1 80       	ldd	r15, Z+1	; 0x01
    732a:	02 81       	ldd	r16, Z+2	; 0x02
    732c:	13 81       	ldd	r17, Z+3	; 0x03
    732e:	80 91 31 02 	lds	r24, 0x0231
    7332:	88 2f       	mov	r24, r24
    7334:	90 e0       	ldi	r25, 0x00	; 0
    7336:	c0 97       	sbiw	r24, 0x30	; 48
    7338:	aa 27       	eor	r26, r26
    733a:	97 fd       	sbrc	r25, 7
    733c:	a0 95       	com	r26
    733e:	ba 2f       	mov	r27, r26
    7340:	bc 01       	movw	r22, r24
    7342:	cd 01       	movw	r24, r26
    7344:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatsisf>
    7348:	dc 01       	movw	r26, r24
    734a:	cb 01       	movw	r24, r22
    734c:	20 91 29 02 	lds	r18, 0x0229
    7350:	30 91 2a 02 	lds	r19, 0x022A
    7354:	40 91 2b 02 	lds	r20, 0x022B
    7358:	50 91 2c 02 	lds	r21, 0x022C
    735c:	bc 01       	movw	r22, r24
    735e:	cd 01       	movw	r24, r26
    7360:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    7364:	dc 01       	movw	r26, r24
    7366:	cb 01       	movw	r24, r22
    7368:	9c 01       	movw	r18, r24
    736a:	ad 01       	movw	r20, r26
    736c:	c8 01       	movw	r24, r16
    736e:	b7 01       	movw	r22, r14
    7370:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    7374:	dc 01       	movw	r26, r24
    7376:	cb 01       	movw	r24, r22
    7378:	9c 01       	movw	r18, r24
    737a:	ad 01       	movw	r20, r26
    737c:	c6 01       	movw	r24, r12
    737e:	88 0f       	add	r24, r24
    7380:	99 1f       	adc	r25, r25
    7382:	88 0f       	add	r24, r24
    7384:	99 1f       	adc	r25, r25
    7386:	fc 01       	movw	r30, r24
    7388:	e9 5b       	subi	r30, 0xB9	; 185
    738a:	fd 4f       	sbci	r31, 0xFD	; 253
    738c:	20 83       	st	Z, r18
    738e:	31 83       	std	Z+1, r19	; 0x01
    7390:	42 83       	std	Z+2, r20	; 0x02
    7392:	53 83       	std	Z+3, r21	; 0x03
		Local_u8DotCalc *= 10;
    7394:	80 91 29 02 	lds	r24, 0x0229
    7398:	90 91 2a 02 	lds	r25, 0x022A
    739c:	a0 91 2b 02 	lds	r26, 0x022B
    73a0:	b0 91 2c 02 	lds	r27, 0x022C
    73a4:	bc 01       	movw	r22, r24
    73a6:	cd 01       	movw	r24, r26
    73a8:	20 e0       	ldi	r18, 0x00	; 0
    73aa:	30 e0       	ldi	r19, 0x00	; 0
    73ac:	40 e2       	ldi	r20, 0x20	; 32
    73ae:	51 e4       	ldi	r21, 0x41	; 65
    73b0:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    73b4:	dc 01       	movw	r26, r24
    73b6:	cb 01       	movw	r24, r22
    73b8:	80 93 29 02 	sts	0x0229, r24
    73bc:	90 93 2a 02 	sts	0x022A, r25
    73c0:	a0 93 2b 02 	sts	0x022B, r26
    73c4:	b0 93 2c 02 	sts	0x022C, r27
    73c8:	e8 c0       	rjmp	.+464    	; 0x759a <Local_voidGetOperand+0x388>
	}
	else if(Get_Bit(Global_u16Flags, negative))
    73ca:	80 91 3d 02 	lds	r24, 0x023D
    73ce:	90 91 3e 02 	lds	r25, 0x023E
    73d2:	81 70       	andi	r24, 0x01	; 1
    73d4:	90 70       	andi	r25, 0x00	; 0
    73d6:	88 23       	and	r24, r24
    73d8:	d1 f1       	breq	.+116    	; 0x744e <Local_voidGetOperand+0x23c>
	{
		Global_Af32Operands[Global_s8Num_Iterator] -= (Global_u8PressedKey - '0');
    73da:	80 91 27 02 	lds	r24, 0x0227
    73de:	c8 2e       	mov	r12, r24
    73e0:	dd 24       	eor	r13, r13
    73e2:	c7 fc       	sbrc	r12, 7
    73e4:	d0 94       	com	r13
    73e6:	80 91 27 02 	lds	r24, 0x0227
    73ea:	99 27       	eor	r25, r25
    73ec:	87 fd       	sbrc	r24, 7
    73ee:	90 95       	com	r25
    73f0:	88 0f       	add	r24, r24
    73f2:	99 1f       	adc	r25, r25
    73f4:	88 0f       	add	r24, r24
    73f6:	99 1f       	adc	r25, r25
    73f8:	fc 01       	movw	r30, r24
    73fa:	e9 5b       	subi	r30, 0xB9	; 185
    73fc:	fd 4f       	sbci	r31, 0xFD	; 253
    73fe:	e0 80       	ld	r14, Z
    7400:	f1 80       	ldd	r15, Z+1	; 0x01
    7402:	02 81       	ldd	r16, Z+2	; 0x02
    7404:	13 81       	ldd	r17, Z+3	; 0x03
    7406:	80 91 31 02 	lds	r24, 0x0231
    740a:	88 2f       	mov	r24, r24
    740c:	90 e0       	ldi	r25, 0x00	; 0
    740e:	c0 97       	sbiw	r24, 0x30	; 48
    7410:	aa 27       	eor	r26, r26
    7412:	97 fd       	sbrc	r25, 7
    7414:	a0 95       	com	r26
    7416:	ba 2f       	mov	r27, r26
    7418:	bc 01       	movw	r22, r24
    741a:	cd 01       	movw	r24, r26
    741c:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatsisf>
    7420:	9b 01       	movw	r18, r22
    7422:	ac 01       	movw	r20, r24
    7424:	c8 01       	movw	r24, r16
    7426:	b7 01       	movw	r22, r14
    7428:	0e 94 bf 02 	call	0x57e	; 0x57e <__subsf3>
    742c:	dc 01       	movw	r26, r24
    742e:	cb 01       	movw	r24, r22
    7430:	9c 01       	movw	r18, r24
    7432:	ad 01       	movw	r20, r26
    7434:	c6 01       	movw	r24, r12
    7436:	88 0f       	add	r24, r24
    7438:	99 1f       	adc	r25, r25
    743a:	88 0f       	add	r24, r24
    743c:	99 1f       	adc	r25, r25
    743e:	fc 01       	movw	r30, r24
    7440:	e9 5b       	subi	r30, 0xB9	; 185
    7442:	fd 4f       	sbci	r31, 0xFD	; 253
    7444:	20 83       	st	Z, r18
    7446:	31 83       	std	Z+1, r19	; 0x01
    7448:	42 83       	std	Z+2, r20	; 0x02
    744a:	53 83       	std	Z+3, r21	; 0x03
    744c:	a6 c0       	rjmp	.+332    	; 0x759a <Local_voidGetOperand+0x388>
	}
	else if(Get_Bit(Global_u16Flags, dot))
    744e:	80 91 3d 02 	lds	r24, 0x023D
    7452:	90 91 3e 02 	lds	r25, 0x023E
    7456:	82 70       	andi	r24, 0x02	; 2
    7458:	90 70       	andi	r25, 0x00	; 0
    745a:	00 97       	sbiw	r24, 0x00	; 0
    745c:	09 f4       	brne	.+2      	; 0x7460 <Local_voidGetOperand+0x24e>
    745e:	64 c0       	rjmp	.+200    	; 0x7528 <Local_voidGetOperand+0x316>
	{
		Global_Af32Operands[Global_s8Num_Iterator] += (Global_u8PressedKey - '0')/Local_u8DotCalc;
    7460:	80 91 27 02 	lds	r24, 0x0227
    7464:	c8 2e       	mov	r12, r24
    7466:	dd 24       	eor	r13, r13
    7468:	c7 fc       	sbrc	r12, 7
    746a:	d0 94       	com	r13
    746c:	80 91 27 02 	lds	r24, 0x0227
    7470:	99 27       	eor	r25, r25
    7472:	87 fd       	sbrc	r24, 7
    7474:	90 95       	com	r25
    7476:	88 0f       	add	r24, r24
    7478:	99 1f       	adc	r25, r25
    747a:	88 0f       	add	r24, r24
    747c:	99 1f       	adc	r25, r25
    747e:	fc 01       	movw	r30, r24
    7480:	e9 5b       	subi	r30, 0xB9	; 185
    7482:	fd 4f       	sbci	r31, 0xFD	; 253
    7484:	e0 80       	ld	r14, Z
    7486:	f1 80       	ldd	r15, Z+1	; 0x01
    7488:	02 81       	ldd	r16, Z+2	; 0x02
    748a:	13 81       	ldd	r17, Z+3	; 0x03
    748c:	80 91 31 02 	lds	r24, 0x0231
    7490:	88 2f       	mov	r24, r24
    7492:	90 e0       	ldi	r25, 0x00	; 0
    7494:	c0 97       	sbiw	r24, 0x30	; 48
    7496:	aa 27       	eor	r26, r26
    7498:	97 fd       	sbrc	r25, 7
    749a:	a0 95       	com	r26
    749c:	ba 2f       	mov	r27, r26
    749e:	bc 01       	movw	r22, r24
    74a0:	cd 01       	movw	r24, r26
    74a2:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatsisf>
    74a6:	dc 01       	movw	r26, r24
    74a8:	cb 01       	movw	r24, r22
    74aa:	20 91 29 02 	lds	r18, 0x0229
    74ae:	30 91 2a 02 	lds	r19, 0x022A
    74b2:	40 91 2b 02 	lds	r20, 0x022B
    74b6:	50 91 2c 02 	lds	r21, 0x022C
    74ba:	bc 01       	movw	r22, r24
    74bc:	cd 01       	movw	r24, r26
    74be:	0e 94 17 04 	call	0x82e	; 0x82e <__divsf3>
    74c2:	dc 01       	movw	r26, r24
    74c4:	cb 01       	movw	r24, r22
    74c6:	9c 01       	movw	r18, r24
    74c8:	ad 01       	movw	r20, r26
    74ca:	c8 01       	movw	r24, r16
    74cc:	b7 01       	movw	r22, r14
    74ce:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    74d2:	dc 01       	movw	r26, r24
    74d4:	cb 01       	movw	r24, r22
    74d6:	9c 01       	movw	r18, r24
    74d8:	ad 01       	movw	r20, r26
    74da:	c6 01       	movw	r24, r12
    74dc:	88 0f       	add	r24, r24
    74de:	99 1f       	adc	r25, r25
    74e0:	88 0f       	add	r24, r24
    74e2:	99 1f       	adc	r25, r25
    74e4:	fc 01       	movw	r30, r24
    74e6:	e9 5b       	subi	r30, 0xB9	; 185
    74e8:	fd 4f       	sbci	r31, 0xFD	; 253
    74ea:	20 83       	st	Z, r18
    74ec:	31 83       	std	Z+1, r19	; 0x01
    74ee:	42 83       	std	Z+2, r20	; 0x02
    74f0:	53 83       	std	Z+3, r21	; 0x03
		Local_u8DotCalc *= 10;
    74f2:	80 91 29 02 	lds	r24, 0x0229
    74f6:	90 91 2a 02 	lds	r25, 0x022A
    74fa:	a0 91 2b 02 	lds	r26, 0x022B
    74fe:	b0 91 2c 02 	lds	r27, 0x022C
    7502:	bc 01       	movw	r22, r24
    7504:	cd 01       	movw	r24, r26
    7506:	20 e0       	ldi	r18, 0x00	; 0
    7508:	30 e0       	ldi	r19, 0x00	; 0
    750a:	40 e2       	ldi	r20, 0x20	; 32
    750c:	51 e4       	ldi	r21, 0x41	; 65
    750e:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    7512:	dc 01       	movw	r26, r24
    7514:	cb 01       	movw	r24, r22
    7516:	80 93 29 02 	sts	0x0229, r24
    751a:	90 93 2a 02 	sts	0x022A, r25
    751e:	a0 93 2b 02 	sts	0x022B, r26
    7522:	b0 93 2c 02 	sts	0x022C, r27
    7526:	39 c0       	rjmp	.+114    	; 0x759a <Local_voidGetOperand+0x388>
	}
	else
	{
		Global_Af32Operands[Global_s8Num_Iterator] += (Global_u8PressedKey - '0');
    7528:	80 91 27 02 	lds	r24, 0x0227
    752c:	c8 2e       	mov	r12, r24
    752e:	dd 24       	eor	r13, r13
    7530:	c7 fc       	sbrc	r12, 7
    7532:	d0 94       	com	r13
    7534:	80 91 27 02 	lds	r24, 0x0227
    7538:	99 27       	eor	r25, r25
    753a:	87 fd       	sbrc	r24, 7
    753c:	90 95       	com	r25
    753e:	88 0f       	add	r24, r24
    7540:	99 1f       	adc	r25, r25
    7542:	88 0f       	add	r24, r24
    7544:	99 1f       	adc	r25, r25
    7546:	fc 01       	movw	r30, r24
    7548:	e9 5b       	subi	r30, 0xB9	; 185
    754a:	fd 4f       	sbci	r31, 0xFD	; 253
    754c:	e0 80       	ld	r14, Z
    754e:	f1 80       	ldd	r15, Z+1	; 0x01
    7550:	02 81       	ldd	r16, Z+2	; 0x02
    7552:	13 81       	ldd	r17, Z+3	; 0x03
    7554:	80 91 31 02 	lds	r24, 0x0231
    7558:	88 2f       	mov	r24, r24
    755a:	90 e0       	ldi	r25, 0x00	; 0
    755c:	c0 97       	sbiw	r24, 0x30	; 48
    755e:	aa 27       	eor	r26, r26
    7560:	97 fd       	sbrc	r25, 7
    7562:	a0 95       	com	r26
    7564:	ba 2f       	mov	r27, r26
    7566:	bc 01       	movw	r22, r24
    7568:	cd 01       	movw	r24, r26
    756a:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <__floatsisf>
    756e:	9b 01       	movw	r18, r22
    7570:	ac 01       	movw	r20, r24
    7572:	c8 01       	movw	r24, r16
    7574:	b7 01       	movw	r22, r14
    7576:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <__addsf3>
    757a:	dc 01       	movw	r26, r24
    757c:	cb 01       	movw	r24, r22
    757e:	9c 01       	movw	r18, r24
    7580:	ad 01       	movw	r20, r26
    7582:	c6 01       	movw	r24, r12
    7584:	88 0f       	add	r24, r24
    7586:	99 1f       	adc	r25, r25
    7588:	88 0f       	add	r24, r24
    758a:	99 1f       	adc	r25, r25
    758c:	fc 01       	movw	r30, r24
    758e:	e9 5b       	subi	r30, 0xB9	; 185
    7590:	fd 4f       	sbci	r31, 0xFD	; 253
    7592:	20 83       	st	Z, r18
    7594:	31 83       	std	Z+1, r19	; 0x01
    7596:	42 83       	std	Z+2, r20	; 0x02
    7598:	53 83       	std	Z+3, r21	; 0x03
	}
}
    759a:	cf 91       	pop	r28
    759c:	df 91       	pop	r29
    759e:	1f 91       	pop	r17
    75a0:	0f 91       	pop	r16
    75a2:	ff 90       	pop	r15
    75a4:	ef 90       	pop	r14
    75a6:	df 90       	pop	r13
    75a8:	cf 90       	pop	r12
    75aa:	08 95       	ret

000075ac <Local_voidClrArray>:

void Local_voidClrArray(u8 * Copy_Pu8Array, u8 Copy_u8Length)
{
    75ac:	df 93       	push	r29
    75ae:	cf 93       	push	r28
    75b0:	00 d0       	rcall	.+0      	; 0x75b2 <Local_voidClrArray+0x6>
    75b2:	0f 92       	push	r0
    75b4:	cd b7       	in	r28, 0x3d	; 61
    75b6:	de b7       	in	r29, 0x3e	; 62
    75b8:	9a 83       	std	Y+2, r25	; 0x02
    75ba:	89 83       	std	Y+1, r24	; 0x01
    75bc:	6b 83       	std	Y+3, r22	; 0x03
    75be:	0c c0       	rjmp	.+24     	; 0x75d8 <Local_voidClrArray+0x2c>
	while(Copy_u8Length)
	{
		*Copy_Pu8Array++ = '0';
    75c0:	e9 81       	ldd	r30, Y+1	; 0x01
    75c2:	fa 81       	ldd	r31, Y+2	; 0x02
    75c4:	80 e3       	ldi	r24, 0x30	; 48
    75c6:	80 83       	st	Z, r24
    75c8:	89 81       	ldd	r24, Y+1	; 0x01
    75ca:	9a 81       	ldd	r25, Y+2	; 0x02
    75cc:	01 96       	adiw	r24, 0x01	; 1
    75ce:	9a 83       	std	Y+2, r25	; 0x02
    75d0:	89 83       	std	Y+1, r24	; 0x01
		Copy_u8Length--;
    75d2:	8b 81       	ldd	r24, Y+3	; 0x03
    75d4:	81 50       	subi	r24, 0x01	; 1
    75d6:	8b 83       	std	Y+3, r24	; 0x03
	}
}

void Local_voidClrArray(u8 * Copy_Pu8Array, u8 Copy_u8Length)
{
	while(Copy_u8Length)
    75d8:	8b 81       	ldd	r24, Y+3	; 0x03
    75da:	88 23       	and	r24, r24
    75dc:	89 f7       	brne	.-30     	; 0x75c0 <Local_voidClrArray+0x14>
	{
		*Copy_Pu8Array++ = '0';
		Copy_u8Length--;
	}
}
    75de:	0f 90       	pop	r0
    75e0:	0f 90       	pop	r0
    75e2:	0f 90       	pop	r0
    75e4:	cf 91       	pop	r28
    75e6:	df 91       	pop	r29
    75e8:	08 95       	ret

000075ea <Local_voidMathError>:

void Local_voidMathError(void)
{
    75ea:	df 93       	push	r29
    75ec:	cf 93       	push	r28
    75ee:	cd b7       	in	r28, 0x3d	; 61
    75f0:	de b7       	in	r29, 0x3e	; 62
    75f2:	2e 97       	sbiw	r28, 0x0e	; 14
    75f4:	0f b6       	in	r0, 0x3f	; 63
    75f6:	f8 94       	cli
    75f8:	de bf       	out	0x3e, r29	; 62
    75fa:	0f be       	out	0x3f, r0	; 63
    75fc:	cd bf       	out	0x3d, r28	; 61
	LCD_enuClearDisplay();
    75fe:	0e 94 79 20 	call	0x40f2	; 0x40f2 <LCD_enuClearDisplay>
	LCD_enuDisplayString("Math ERROR");
    7602:	8f ea       	ldi	r24, 0xAF	; 175
    7604:	90 e0       	ldi	r25, 0x00	; 0
    7606:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
    760a:	80 e0       	ldi	r24, 0x00	; 0
    760c:	90 e0       	ldi	r25, 0x00	; 0
    760e:	aa e7       	ldi	r26, 0x7A	; 122
    7610:	b4 e4       	ldi	r27, 0x44	; 68
    7612:	8b 87       	std	Y+11, r24	; 0x0b
    7614:	9c 87       	std	Y+12, r25	; 0x0c
    7616:	ad 87       	std	Y+13, r26	; 0x0d
    7618:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    761a:	6b 85       	ldd	r22, Y+11	; 0x0b
    761c:	7c 85       	ldd	r23, Y+12	; 0x0c
    761e:	8d 85       	ldd	r24, Y+13	; 0x0d
    7620:	9e 85       	ldd	r25, Y+14	; 0x0e
    7622:	20 e0       	ldi	r18, 0x00	; 0
    7624:	30 e0       	ldi	r19, 0x00	; 0
    7626:	4a e7       	ldi	r20, 0x7A	; 122
    7628:	53 e4       	ldi	r21, 0x43	; 67
    762a:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    762e:	dc 01       	movw	r26, r24
    7630:	cb 01       	movw	r24, r22
    7632:	8f 83       	std	Y+7, r24	; 0x07
    7634:	98 87       	std	Y+8, r25	; 0x08
    7636:	a9 87       	std	Y+9, r26	; 0x09
    7638:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    763a:	6f 81       	ldd	r22, Y+7	; 0x07
    763c:	78 85       	ldd	r23, Y+8	; 0x08
    763e:	89 85       	ldd	r24, Y+9	; 0x09
    7640:	9a 85       	ldd	r25, Y+10	; 0x0a
    7642:	20 e0       	ldi	r18, 0x00	; 0
    7644:	30 e0       	ldi	r19, 0x00	; 0
    7646:	40 e8       	ldi	r20, 0x80	; 128
    7648:	5f e3       	ldi	r21, 0x3F	; 63
    764a:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    764e:	88 23       	and	r24, r24
    7650:	2c f4       	brge	.+10     	; 0x765c <Local_voidMathError+0x72>
		__ticks = 1;
    7652:	81 e0       	ldi	r24, 0x01	; 1
    7654:	90 e0       	ldi	r25, 0x00	; 0
    7656:	9e 83       	std	Y+6, r25	; 0x06
    7658:	8d 83       	std	Y+5, r24	; 0x05
    765a:	3f c0       	rjmp	.+126    	; 0x76da <Local_voidMathError+0xf0>
	else if (__tmp > 65535)
    765c:	6f 81       	ldd	r22, Y+7	; 0x07
    765e:	78 85       	ldd	r23, Y+8	; 0x08
    7660:	89 85       	ldd	r24, Y+9	; 0x09
    7662:	9a 85       	ldd	r25, Y+10	; 0x0a
    7664:	20 e0       	ldi	r18, 0x00	; 0
    7666:	3f ef       	ldi	r19, 0xFF	; 255
    7668:	4f e7       	ldi	r20, 0x7F	; 127
    766a:	57 e4       	ldi	r21, 0x47	; 71
    766c:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    7670:	18 16       	cp	r1, r24
    7672:	4c f5       	brge	.+82     	; 0x76c6 <Local_voidMathError+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7674:	6b 85       	ldd	r22, Y+11	; 0x0b
    7676:	7c 85       	ldd	r23, Y+12	; 0x0c
    7678:	8d 85       	ldd	r24, Y+13	; 0x0d
    767a:	9e 85       	ldd	r25, Y+14	; 0x0e
    767c:	20 e0       	ldi	r18, 0x00	; 0
    767e:	30 e0       	ldi	r19, 0x00	; 0
    7680:	40 e2       	ldi	r20, 0x20	; 32
    7682:	51 e4       	ldi	r21, 0x41	; 65
    7684:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    7688:	dc 01       	movw	r26, r24
    768a:	cb 01       	movw	r24, r22
    768c:	bc 01       	movw	r22, r24
    768e:	cd 01       	movw	r24, r26
    7690:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    7694:	dc 01       	movw	r26, r24
    7696:	cb 01       	movw	r24, r22
    7698:	9e 83       	std	Y+6, r25	; 0x06
    769a:	8d 83       	std	Y+5, r24	; 0x05
    769c:	0f c0       	rjmp	.+30     	; 0x76bc <Local_voidMathError+0xd2>
    769e:	89 e1       	ldi	r24, 0x19	; 25
    76a0:	90 e0       	ldi	r25, 0x00	; 0
    76a2:	9c 83       	std	Y+4, r25	; 0x04
    76a4:	8b 83       	std	Y+3, r24	; 0x03
    76a6:	8b 81       	ldd	r24, Y+3	; 0x03
    76a8:	9c 81       	ldd	r25, Y+4	; 0x04
    76aa:	01 97       	sbiw	r24, 0x01	; 1
    76ac:	f1 f7       	brne	.-4      	; 0x76aa <Local_voidMathError+0xc0>
    76ae:	9c 83       	std	Y+4, r25	; 0x04
    76b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    76b2:	8d 81       	ldd	r24, Y+5	; 0x05
    76b4:	9e 81       	ldd	r25, Y+6	; 0x06
    76b6:	01 97       	sbiw	r24, 0x01	; 1
    76b8:	9e 83       	std	Y+6, r25	; 0x06
    76ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    76bc:	8d 81       	ldd	r24, Y+5	; 0x05
    76be:	9e 81       	ldd	r25, Y+6	; 0x06
    76c0:	00 97       	sbiw	r24, 0x00	; 0
    76c2:	69 f7       	brne	.-38     	; 0x769e <Local_voidMathError+0xb4>
    76c4:	14 c0       	rjmp	.+40     	; 0x76ee <Local_voidMathError+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    76c6:	6f 81       	ldd	r22, Y+7	; 0x07
    76c8:	78 85       	ldd	r23, Y+8	; 0x08
    76ca:	89 85       	ldd	r24, Y+9	; 0x09
    76cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    76ce:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    76d2:	dc 01       	movw	r26, r24
    76d4:	cb 01       	movw	r24, r22
    76d6:	9e 83       	std	Y+6, r25	; 0x06
    76d8:	8d 83       	std	Y+5, r24	; 0x05
    76da:	8d 81       	ldd	r24, Y+5	; 0x05
    76dc:	9e 81       	ldd	r25, Y+6	; 0x06
    76de:	9a 83       	std	Y+2, r25	; 0x02
    76e0:	89 83       	std	Y+1, r24	; 0x01
    76e2:	89 81       	ldd	r24, Y+1	; 0x01
    76e4:	9a 81       	ldd	r25, Y+2	; 0x02
    76e6:	01 97       	sbiw	r24, 0x01	; 1
    76e8:	f1 f7       	brne	.-4      	; 0x76e6 <Local_voidMathError+0xfc>
    76ea:	9a 83       	std	Y+2, r25	; 0x02
    76ec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	Local_ClearDiplayedText();
    76ee:	0e 94 9b 2b 	call	0x5736	; 0x5736 <Local_ClearDiplayedText>
	Clr_Bit(Global_u16Flags, math_error);
    76f2:	80 91 3d 02 	lds	r24, 0x023D
    76f6:	90 91 3e 02 	lds	r25, 0x023E
    76fa:	8b 7f       	andi	r24, 0xFB	; 251
    76fc:	90 93 3e 02 	sts	0x023E, r25
    7700:	80 93 3d 02 	sts	0x023D, r24
}
    7704:	2e 96       	adiw	r28, 0x0e	; 14
    7706:	0f b6       	in	r0, 0x3f	; 63
    7708:	f8 94       	cli
    770a:	de bf       	out	0x3e, r29	; 62
    770c:	0f be       	out	0x3f, r0	; 63
    770e:	cd bf       	out	0x3d, r28	; 61
    7710:	cf 91       	pop	r28
    7712:	df 91       	pop	r29
    7714:	08 95       	ret

00007716 <Local_voidSyntaxError>:

void Local_voidSyntaxError(void)
{
    7716:	df 93       	push	r29
    7718:	cf 93       	push	r28
    771a:	cd b7       	in	r28, 0x3d	; 61
    771c:	de b7       	in	r29, 0x3e	; 62
    771e:	2e 97       	sbiw	r28, 0x0e	; 14
    7720:	0f b6       	in	r0, 0x3f	; 63
    7722:	f8 94       	cli
    7724:	de bf       	out	0x3e, r29	; 62
    7726:	0f be       	out	0x3f, r0	; 63
    7728:	cd bf       	out	0x3d, r28	; 61
	LCD_enuClearDisplay();
    772a:	0e 94 79 20 	call	0x40f2	; 0x40f2 <LCD_enuClearDisplay>
	LCD_enuDisplayString("Syntax ERROR");
    772e:	8a eb       	ldi	r24, 0xBA	; 186
    7730:	90 e0       	ldi	r25, 0x00	; 0
    7732:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
    7736:	80 e0       	ldi	r24, 0x00	; 0
    7738:	90 e0       	ldi	r25, 0x00	; 0
    773a:	aa e7       	ldi	r26, 0x7A	; 122
    773c:	b4 e4       	ldi	r27, 0x44	; 68
    773e:	8b 87       	std	Y+11, r24	; 0x0b
    7740:	9c 87       	std	Y+12, r25	; 0x0c
    7742:	ad 87       	std	Y+13, r26	; 0x0d
    7744:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7746:	6b 85       	ldd	r22, Y+11	; 0x0b
    7748:	7c 85       	ldd	r23, Y+12	; 0x0c
    774a:	8d 85       	ldd	r24, Y+13	; 0x0d
    774c:	9e 85       	ldd	r25, Y+14	; 0x0e
    774e:	20 e0       	ldi	r18, 0x00	; 0
    7750:	30 e0       	ldi	r19, 0x00	; 0
    7752:	4a e7       	ldi	r20, 0x7A	; 122
    7754:	53 e4       	ldi	r21, 0x43	; 67
    7756:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    775a:	dc 01       	movw	r26, r24
    775c:	cb 01       	movw	r24, r22
    775e:	8f 83       	std	Y+7, r24	; 0x07
    7760:	98 87       	std	Y+8, r25	; 0x08
    7762:	a9 87       	std	Y+9, r26	; 0x09
    7764:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    7766:	6f 81       	ldd	r22, Y+7	; 0x07
    7768:	78 85       	ldd	r23, Y+8	; 0x08
    776a:	89 85       	ldd	r24, Y+9	; 0x09
    776c:	9a 85       	ldd	r25, Y+10	; 0x0a
    776e:	20 e0       	ldi	r18, 0x00	; 0
    7770:	30 e0       	ldi	r19, 0x00	; 0
    7772:	40 e8       	ldi	r20, 0x80	; 128
    7774:	5f e3       	ldi	r21, 0x3F	; 63
    7776:	0e 94 83 05 	call	0xb06	; 0xb06 <__ltsf2>
    777a:	88 23       	and	r24, r24
    777c:	2c f4       	brge	.+10     	; 0x7788 <Local_voidSyntaxError+0x72>
		__ticks = 1;
    777e:	81 e0       	ldi	r24, 0x01	; 1
    7780:	90 e0       	ldi	r25, 0x00	; 0
    7782:	9e 83       	std	Y+6, r25	; 0x06
    7784:	8d 83       	std	Y+5, r24	; 0x05
    7786:	3f c0       	rjmp	.+126    	; 0x7806 <Local_voidSyntaxError+0xf0>
	else if (__tmp > 65535)
    7788:	6f 81       	ldd	r22, Y+7	; 0x07
    778a:	78 85       	ldd	r23, Y+8	; 0x08
    778c:	89 85       	ldd	r24, Y+9	; 0x09
    778e:	9a 85       	ldd	r25, Y+10	; 0x0a
    7790:	20 e0       	ldi	r18, 0x00	; 0
    7792:	3f ef       	ldi	r19, 0xFF	; 255
    7794:	4f e7       	ldi	r20, 0x7F	; 127
    7796:	57 e4       	ldi	r21, 0x47	; 71
    7798:	0e 94 23 05 	call	0xa46	; 0xa46 <__gtsf2>
    779c:	18 16       	cp	r1, r24
    779e:	4c f5       	brge	.+82     	; 0x77f2 <Local_voidSyntaxError+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    77a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    77a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    77a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    77a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    77a8:	20 e0       	ldi	r18, 0x00	; 0
    77aa:	30 e0       	ldi	r19, 0x00	; 0
    77ac:	40 e2       	ldi	r20, 0x20	; 32
    77ae:	51 e4       	ldi	r21, 0x41	; 65
    77b0:	0e 94 1d 03 	call	0x63a	; 0x63a <__mulsf3>
    77b4:	dc 01       	movw	r26, r24
    77b6:	cb 01       	movw	r24, r22
    77b8:	bc 01       	movw	r22, r24
    77ba:	cd 01       	movw	r24, r26
    77bc:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    77c0:	dc 01       	movw	r26, r24
    77c2:	cb 01       	movw	r24, r22
    77c4:	9e 83       	std	Y+6, r25	; 0x06
    77c6:	8d 83       	std	Y+5, r24	; 0x05
    77c8:	0f c0       	rjmp	.+30     	; 0x77e8 <Local_voidSyntaxError+0xd2>
    77ca:	89 e1       	ldi	r24, 0x19	; 25
    77cc:	90 e0       	ldi	r25, 0x00	; 0
    77ce:	9c 83       	std	Y+4, r25	; 0x04
    77d0:	8b 83       	std	Y+3, r24	; 0x03
    77d2:	8b 81       	ldd	r24, Y+3	; 0x03
    77d4:	9c 81       	ldd	r25, Y+4	; 0x04
    77d6:	01 97       	sbiw	r24, 0x01	; 1
    77d8:	f1 f7       	brne	.-4      	; 0x77d6 <Local_voidSyntaxError+0xc0>
    77da:	9c 83       	std	Y+4, r25	; 0x04
    77dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    77de:	8d 81       	ldd	r24, Y+5	; 0x05
    77e0:	9e 81       	ldd	r25, Y+6	; 0x06
    77e2:	01 97       	sbiw	r24, 0x01	; 1
    77e4:	9e 83       	std	Y+6, r25	; 0x06
    77e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    77e8:	8d 81       	ldd	r24, Y+5	; 0x05
    77ea:	9e 81       	ldd	r25, Y+6	; 0x06
    77ec:	00 97       	sbiw	r24, 0x00	; 0
    77ee:	69 f7       	brne	.-38     	; 0x77ca <Local_voidSyntaxError+0xb4>
    77f0:	14 c0       	rjmp	.+40     	; 0x781a <Local_voidSyntaxError+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    77f2:	6f 81       	ldd	r22, Y+7	; 0x07
    77f4:	78 85       	ldd	r23, Y+8	; 0x08
    77f6:	89 85       	ldd	r24, Y+9	; 0x09
    77f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    77fa:	0e 94 47 01 	call	0x28e	; 0x28e <__fixunssfsi>
    77fe:	dc 01       	movw	r26, r24
    7800:	cb 01       	movw	r24, r22
    7802:	9e 83       	std	Y+6, r25	; 0x06
    7804:	8d 83       	std	Y+5, r24	; 0x05
    7806:	8d 81       	ldd	r24, Y+5	; 0x05
    7808:	9e 81       	ldd	r25, Y+6	; 0x06
    780a:	9a 83       	std	Y+2, r25	; 0x02
    780c:	89 83       	std	Y+1, r24	; 0x01
    780e:	89 81       	ldd	r24, Y+1	; 0x01
    7810:	9a 81       	ldd	r25, Y+2	; 0x02
    7812:	01 97       	sbiw	r24, 0x01	; 1
    7814:	f1 f7       	brne	.-4      	; 0x7812 <Local_voidSyntaxError+0xfc>
    7816:	9a 83       	std	Y+2, r25	; 0x02
    7818:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	Local_ClearDiplayedText();
    781a:	0e 94 9b 2b 	call	0x5736	; 0x5736 <Local_ClearDiplayedText>
	Local_voidClrArray(Global_Au8NumberRepresentation, NUM_OF_BITS);
    781e:	82 e8       	ldi	r24, 0x82	; 130
    7820:	92 e0       	ldi	r25, 0x02	; 2
    7822:	60 e1       	ldi	r22, 0x10	; 16
    7824:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <Local_voidClrArray>
	Clr_Bit(Global_u16Flags, number_repres);
    7828:	80 91 3d 02 	lds	r24, 0x023D
    782c:	90 91 3e 02 	lds	r25, 0x023E
    7830:	8f 77       	andi	r24, 0x7F	; 127
    7832:	90 93 3e 02 	sts	0x023E, r25
    7836:	80 93 3d 02 	sts	0x023D, r24
	Clr_Bit(Global_u16Flags, syntax_error);
    783a:	80 91 3d 02 	lds	r24, 0x023D
    783e:	90 91 3e 02 	lds	r25, 0x023E
    7842:	9f 7d       	andi	r25, 0xDF	; 223
    7844:	90 93 3e 02 	sts	0x023E, r25
    7848:	80 93 3d 02 	sts	0x023D, r24
}
    784c:	2e 96       	adiw	r28, 0x0e	; 14
    784e:	0f b6       	in	r0, 0x3f	; 63
    7850:	f8 94       	cli
    7852:	de bf       	out	0x3e, r29	; 62
    7854:	0f be       	out	0x3f, r0	; 63
    7856:	cd bf       	out	0x3d, r28	; 61
    7858:	cf 91       	pop	r28
    785a:	df 91       	pop	r29
    785c:	08 95       	ret

0000785e <Local_SetAnswer>:

void Local_SetAnswer(void)
{
    785e:	df 93       	push	r29
    7860:	cf 93       	push	r28
    7862:	cd b7       	in	r28, 0x3d	; 61
    7864:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(Global_u16Flags, ans);
    7866:	80 91 3d 02 	lds	r24, 0x023D
    786a:	90 91 3e 02 	lds	r25, 0x023E
    786e:	80 64       	ori	r24, 0x40	; 64
    7870:	90 93 3e 02 	sts	0x023E, r25
    7874:	80 93 3d 02 	sts	0x023D, r24
	LCD_enuDisplayString("ANS");
    7878:	87 ec       	ldi	r24, 0xC7	; 199
    787a:	90 e0       	ldi	r25, 0x00	; 0
    787c:	0e 94 1f 20 	call	0x403e	; 0x403e <LCD_enuDisplayString>
	Global_s8Num_Iterator++;
    7880:	80 91 27 02 	lds	r24, 0x0227
    7884:	8f 5f       	subi	r24, 0xFF	; 255
    7886:	80 93 27 02 	sts	0x0227, r24
	Global_Af32Operands[Global_s8Num_Iterator] = Local_f32ANS;
    788a:	80 91 27 02 	lds	r24, 0x0227
    788e:	99 27       	eor	r25, r25
    7890:	87 fd       	sbrc	r24, 7
    7892:	90 95       	com	r25
    7894:	20 91 43 02 	lds	r18, 0x0243
    7898:	30 91 44 02 	lds	r19, 0x0244
    789c:	40 91 45 02 	lds	r20, 0x0245
    78a0:	50 91 46 02 	lds	r21, 0x0246
    78a4:	88 0f       	add	r24, r24
    78a6:	99 1f       	adc	r25, r25
    78a8:	88 0f       	add	r24, r24
    78aa:	99 1f       	adc	r25, r25
    78ac:	fc 01       	movw	r30, r24
    78ae:	e9 5b       	subi	r30, 0xB9	; 185
    78b0:	fd 4f       	sbci	r31, 0xFD	; 253
    78b2:	20 83       	st	Z, r18
    78b4:	31 83       	std	Z+1, r19	; 0x01
    78b6:	42 83       	std	Z+2, r20	; 0x02
    78b8:	53 83       	std	Z+3, r21	; 0x03
	Clr_Bit(Global_u16Flags, ans);
    78ba:	80 91 3d 02 	lds	r24, 0x023D
    78be:	90 91 3e 02 	lds	r25, 0x023E
    78c2:	8f 7b       	andi	r24, 0xBF	; 191
    78c4:	90 93 3e 02 	sts	0x023E, r25
    78c8:	80 93 3d 02 	sts	0x023D, r24
	Set_Bit(Global_u16Flags, last_is_num);
    78cc:	80 91 3d 02 	lds	r24, 0x023D
    78d0:	90 91 3e 02 	lds	r25, 0x023E
    78d4:	88 60       	ori	r24, 0x08	; 8
    78d6:	90 93 3e 02 	sts	0x023E, r25
    78da:	80 93 3d 02 	sts	0x023D, r24
	Clr_Bit(Global_u16Flags, last_is_op);
    78de:	80 91 3d 02 	lds	r24, 0x023D
    78e2:	90 91 3e 02 	lds	r25, 0x023E
    78e6:	8f 7e       	andi	r24, 0xEF	; 239
    78e8:	90 93 3e 02 	sts	0x023E, r25
    78ec:	80 93 3d 02 	sts	0x023D, r24
}
    78f0:	cf 91       	pop	r28
    78f2:	df 91       	pop	r29
    78f4:	08 95       	ret

000078f6 <main>:
#include <math.h>

//#include "calculator/calculator.h"

int main(void)
{
    78f6:	df 93       	push	r29
    78f8:	cf 93       	push	r28
    78fa:	cd b7       	in	r28, 0x3d	; 61
    78fc:	de b7       	in	r29, 0x3e	; 62
	Local_voidCalCulator();
    78fe:	0e 94 f8 28 	call	0x51f0	; 0x51f0 <Local_voidCalCulator>
	return 0;
    7902:	80 e0       	ldi	r24, 0x00	; 0
    7904:	90 e0       	ldi	r25, 0x00	; 0
}
    7906:	cf 91       	pop	r28
    7908:	df 91       	pop	r29
    790a:	08 95       	ret

0000790c <__udivmodsi4>:
    790c:	a1 e2       	ldi	r26, 0x21	; 33
    790e:	1a 2e       	mov	r1, r26
    7910:	aa 1b       	sub	r26, r26
    7912:	bb 1b       	sub	r27, r27
    7914:	fd 01       	movw	r30, r26
    7916:	0d c0       	rjmp	.+26     	; 0x7932 <__udivmodsi4_ep>

00007918 <__udivmodsi4_loop>:
    7918:	aa 1f       	adc	r26, r26
    791a:	bb 1f       	adc	r27, r27
    791c:	ee 1f       	adc	r30, r30
    791e:	ff 1f       	adc	r31, r31
    7920:	a2 17       	cp	r26, r18
    7922:	b3 07       	cpc	r27, r19
    7924:	e4 07       	cpc	r30, r20
    7926:	f5 07       	cpc	r31, r21
    7928:	20 f0       	brcs	.+8      	; 0x7932 <__udivmodsi4_ep>
    792a:	a2 1b       	sub	r26, r18
    792c:	b3 0b       	sbc	r27, r19
    792e:	e4 0b       	sbc	r30, r20
    7930:	f5 0b       	sbc	r31, r21

00007932 <__udivmodsi4_ep>:
    7932:	66 1f       	adc	r22, r22
    7934:	77 1f       	adc	r23, r23
    7936:	88 1f       	adc	r24, r24
    7938:	99 1f       	adc	r25, r25
    793a:	1a 94       	dec	r1
    793c:	69 f7       	brne	.-38     	; 0x7918 <__udivmodsi4_loop>
    793e:	60 95       	com	r22
    7940:	70 95       	com	r23
    7942:	80 95       	com	r24
    7944:	90 95       	com	r25
    7946:	9b 01       	movw	r18, r22
    7948:	ac 01       	movw	r20, r24
    794a:	bd 01       	movw	r22, r26
    794c:	cf 01       	movw	r24, r30
    794e:	08 95       	ret

00007950 <__divmodsi4>:
    7950:	97 fb       	bst	r25, 7
    7952:	09 2e       	mov	r0, r25
    7954:	05 26       	eor	r0, r21
    7956:	0e d0       	rcall	.+28     	; 0x7974 <__divmodsi4_neg1>
    7958:	57 fd       	sbrc	r21, 7
    795a:	04 d0       	rcall	.+8      	; 0x7964 <__divmodsi4_neg2>
    795c:	d7 df       	rcall	.-82     	; 0x790c <__udivmodsi4>
    795e:	0a d0       	rcall	.+20     	; 0x7974 <__divmodsi4_neg1>
    7960:	00 1c       	adc	r0, r0
    7962:	38 f4       	brcc	.+14     	; 0x7972 <__divmodsi4_exit>

00007964 <__divmodsi4_neg2>:
    7964:	50 95       	com	r21
    7966:	40 95       	com	r20
    7968:	30 95       	com	r19
    796a:	21 95       	neg	r18
    796c:	3f 4f       	sbci	r19, 0xFF	; 255
    796e:	4f 4f       	sbci	r20, 0xFF	; 255
    7970:	5f 4f       	sbci	r21, 0xFF	; 255

00007972 <__divmodsi4_exit>:
    7972:	08 95       	ret

00007974 <__divmodsi4_neg1>:
    7974:	f6 f7       	brtc	.-4      	; 0x7972 <__divmodsi4_exit>
    7976:	90 95       	com	r25
    7978:	80 95       	com	r24
    797a:	70 95       	com	r23
    797c:	61 95       	neg	r22
    797e:	7f 4f       	sbci	r23, 0xFF	; 255
    7980:	8f 4f       	sbci	r24, 0xFF	; 255
    7982:	9f 4f       	sbci	r25, 0xFF	; 255
    7984:	08 95       	ret

00007986 <__prologue_saves__>:
    7986:	2f 92       	push	r2
    7988:	3f 92       	push	r3
    798a:	4f 92       	push	r4
    798c:	5f 92       	push	r5
    798e:	6f 92       	push	r6
    7990:	7f 92       	push	r7
    7992:	8f 92       	push	r8
    7994:	9f 92       	push	r9
    7996:	af 92       	push	r10
    7998:	bf 92       	push	r11
    799a:	cf 92       	push	r12
    799c:	df 92       	push	r13
    799e:	ef 92       	push	r14
    79a0:	ff 92       	push	r15
    79a2:	0f 93       	push	r16
    79a4:	1f 93       	push	r17
    79a6:	cf 93       	push	r28
    79a8:	df 93       	push	r29
    79aa:	cd b7       	in	r28, 0x3d	; 61
    79ac:	de b7       	in	r29, 0x3e	; 62
    79ae:	ca 1b       	sub	r28, r26
    79b0:	db 0b       	sbc	r29, r27
    79b2:	0f b6       	in	r0, 0x3f	; 63
    79b4:	f8 94       	cli
    79b6:	de bf       	out	0x3e, r29	; 62
    79b8:	0f be       	out	0x3f, r0	; 63
    79ba:	cd bf       	out	0x3d, r28	; 61
    79bc:	09 94       	ijmp

000079be <__epilogue_restores__>:
    79be:	2a 88       	ldd	r2, Y+18	; 0x12
    79c0:	39 88       	ldd	r3, Y+17	; 0x11
    79c2:	48 88       	ldd	r4, Y+16	; 0x10
    79c4:	5f 84       	ldd	r5, Y+15	; 0x0f
    79c6:	6e 84       	ldd	r6, Y+14	; 0x0e
    79c8:	7d 84       	ldd	r7, Y+13	; 0x0d
    79ca:	8c 84       	ldd	r8, Y+12	; 0x0c
    79cc:	9b 84       	ldd	r9, Y+11	; 0x0b
    79ce:	aa 84       	ldd	r10, Y+10	; 0x0a
    79d0:	b9 84       	ldd	r11, Y+9	; 0x09
    79d2:	c8 84       	ldd	r12, Y+8	; 0x08
    79d4:	df 80       	ldd	r13, Y+7	; 0x07
    79d6:	ee 80       	ldd	r14, Y+6	; 0x06
    79d8:	fd 80       	ldd	r15, Y+5	; 0x05
    79da:	0c 81       	ldd	r16, Y+4	; 0x04
    79dc:	1b 81       	ldd	r17, Y+3	; 0x03
    79de:	aa 81       	ldd	r26, Y+2	; 0x02
    79e0:	b9 81       	ldd	r27, Y+1	; 0x01
    79e2:	ce 0f       	add	r28, r30
    79e4:	d1 1d       	adc	r29, r1
    79e6:	0f b6       	in	r0, 0x3f	; 63
    79e8:	f8 94       	cli
    79ea:	de bf       	out	0x3e, r29	; 62
    79ec:	0f be       	out	0x3f, r0	; 63
    79ee:	cd bf       	out	0x3d, r28	; 61
    79f0:	ed 01       	movw	r28, r26
    79f2:	08 95       	ret

000079f4 <strlen>:
    79f4:	fc 01       	movw	r30, r24
    79f6:	01 90       	ld	r0, Z+
    79f8:	00 20       	and	r0, r0
    79fa:	e9 f7       	brne	.-6      	; 0x79f6 <strlen+0x2>
    79fc:	80 95       	com	r24
    79fe:	90 95       	com	r25
    7a00:	8e 0f       	add	r24, r30
    7a02:	9f 1f       	adc	r25, r31
    7a04:	08 95       	ret

00007a06 <fma>:
    7a06:	20 d0       	rcall	.+64     	; 0x7a48 <__mulsf3x>
    7a08:	97 01       	movw	r18, r14
    7a0a:	a8 01       	movw	r20, r16
    7a0c:	aa 27       	eor	r26, r26
    7a0e:	c2 d0       	rcall	.+388    	; 0x7b94 <__addsf3x>
    7a10:	00 c0       	rjmp	.+0      	; 0x7a12 <__fp_round>

00007a12 <__fp_round>:
    7a12:	09 2e       	mov	r0, r25
    7a14:	03 94       	inc	r0
    7a16:	00 0c       	add	r0, r0
    7a18:	11 f4       	brne	.+4      	; 0x7a1e <__fp_round+0xc>
    7a1a:	88 23       	and	r24, r24
    7a1c:	52 f0       	brmi	.+20     	; 0x7a32 <__fp_round+0x20>
    7a1e:	bb 0f       	add	r27, r27
    7a20:	40 f4       	brcc	.+16     	; 0x7a32 <__fp_round+0x20>
    7a22:	bf 2b       	or	r27, r31
    7a24:	11 f4       	brne	.+4      	; 0x7a2a <__fp_round+0x18>
    7a26:	60 ff       	sbrs	r22, 0
    7a28:	04 c0       	rjmp	.+8      	; 0x7a32 <__fp_round+0x20>
    7a2a:	6f 5f       	subi	r22, 0xFF	; 255
    7a2c:	7f 4f       	sbci	r23, 0xFF	; 255
    7a2e:	8f 4f       	sbci	r24, 0xFF	; 255
    7a30:	9f 4f       	sbci	r25, 0xFF	; 255
    7a32:	08 95       	ret
    7a34:	20 d1       	rcall	.+576    	; 0x7c76 <__fp_pscA>
    7a36:	28 f0       	brcs	.+10     	; 0x7a42 <__fp_round+0x30>
    7a38:	25 d1       	rcall	.+586    	; 0x7c84 <__fp_pscB>
    7a3a:	18 f0       	brcs	.+6      	; 0x7a42 <__fp_round+0x30>
    7a3c:	95 23       	and	r25, r21
    7a3e:	09 f0       	breq	.+2      	; 0x7a42 <__fp_round+0x30>
    7a40:	fc c0       	rjmp	.+504    	; 0x7c3a <__fp_inf>
    7a42:	0f c1       	rjmp	.+542    	; 0x7c62 <__fp_nan>
    7a44:	11 24       	eor	r1, r1
    7a46:	48 c1       	rjmp	.+656    	; 0x7cd8 <__fp_szero>

00007a48 <__mulsf3x>:
    7a48:	24 d1       	rcall	.+584    	; 0x7c92 <__fp_split3>
    7a4a:	a0 f3       	brcs	.-24     	; 0x7a34 <__fp_round+0x22>

00007a4c <__mulsf3_pse>:
    7a4c:	95 9f       	mul	r25, r21
    7a4e:	d1 f3       	breq	.-12     	; 0x7a44 <__fp_round+0x32>
    7a50:	95 0f       	add	r25, r21
    7a52:	50 e0       	ldi	r21, 0x00	; 0
    7a54:	55 1f       	adc	r21, r21
    7a56:	62 9f       	mul	r22, r18
    7a58:	f0 01       	movw	r30, r0
    7a5a:	72 9f       	mul	r23, r18
    7a5c:	bb 27       	eor	r27, r27
    7a5e:	f0 0d       	add	r31, r0
    7a60:	b1 1d       	adc	r27, r1
    7a62:	63 9f       	mul	r22, r19
    7a64:	aa 27       	eor	r26, r26
    7a66:	f0 0d       	add	r31, r0
    7a68:	b1 1d       	adc	r27, r1
    7a6a:	aa 1f       	adc	r26, r26
    7a6c:	64 9f       	mul	r22, r20
    7a6e:	66 27       	eor	r22, r22
    7a70:	b0 0d       	add	r27, r0
    7a72:	a1 1d       	adc	r26, r1
    7a74:	66 1f       	adc	r22, r22
    7a76:	82 9f       	mul	r24, r18
    7a78:	22 27       	eor	r18, r18
    7a7a:	b0 0d       	add	r27, r0
    7a7c:	a1 1d       	adc	r26, r1
    7a7e:	62 1f       	adc	r22, r18
    7a80:	73 9f       	mul	r23, r19
    7a82:	b0 0d       	add	r27, r0
    7a84:	a1 1d       	adc	r26, r1
    7a86:	62 1f       	adc	r22, r18
    7a88:	83 9f       	mul	r24, r19
    7a8a:	a0 0d       	add	r26, r0
    7a8c:	61 1d       	adc	r22, r1
    7a8e:	22 1f       	adc	r18, r18
    7a90:	74 9f       	mul	r23, r20
    7a92:	33 27       	eor	r19, r19
    7a94:	a0 0d       	add	r26, r0
    7a96:	61 1d       	adc	r22, r1
    7a98:	23 1f       	adc	r18, r19
    7a9a:	84 9f       	mul	r24, r20
    7a9c:	60 0d       	add	r22, r0
    7a9e:	21 1d       	adc	r18, r1
    7aa0:	82 2f       	mov	r24, r18
    7aa2:	76 2f       	mov	r23, r22
    7aa4:	6a 2f       	mov	r22, r26
    7aa6:	11 24       	eor	r1, r1
    7aa8:	9f 57       	subi	r25, 0x7F	; 127
    7aaa:	50 40       	sbci	r21, 0x00	; 0
    7aac:	8a f0       	brmi	.+34     	; 0x7ad0 <__mulsf3_pse+0x84>
    7aae:	e1 f0       	breq	.+56     	; 0x7ae8 <__mulsf3_pse+0x9c>
    7ab0:	88 23       	and	r24, r24
    7ab2:	4a f0       	brmi	.+18     	; 0x7ac6 <__mulsf3_pse+0x7a>
    7ab4:	ee 0f       	add	r30, r30
    7ab6:	ff 1f       	adc	r31, r31
    7ab8:	bb 1f       	adc	r27, r27
    7aba:	66 1f       	adc	r22, r22
    7abc:	77 1f       	adc	r23, r23
    7abe:	88 1f       	adc	r24, r24
    7ac0:	91 50       	subi	r25, 0x01	; 1
    7ac2:	50 40       	sbci	r21, 0x00	; 0
    7ac4:	a9 f7       	brne	.-22     	; 0x7ab0 <__mulsf3_pse+0x64>
    7ac6:	9e 3f       	cpi	r25, 0xFE	; 254
    7ac8:	51 05       	cpc	r21, r1
    7aca:	70 f0       	brcs	.+28     	; 0x7ae8 <__mulsf3_pse+0x9c>
    7acc:	b6 c0       	rjmp	.+364    	; 0x7c3a <__fp_inf>
    7ace:	04 c1       	rjmp	.+520    	; 0x7cd8 <__fp_szero>
    7ad0:	5f 3f       	cpi	r21, 0xFF	; 255
    7ad2:	ec f3       	brlt	.-6      	; 0x7ace <__mulsf3_pse+0x82>
    7ad4:	98 3e       	cpi	r25, 0xE8	; 232
    7ad6:	dc f3       	brlt	.-10     	; 0x7ace <__mulsf3_pse+0x82>
    7ad8:	86 95       	lsr	r24
    7ada:	77 95       	ror	r23
    7adc:	67 95       	ror	r22
    7ade:	b7 95       	ror	r27
    7ae0:	f7 95       	ror	r31
    7ae2:	e7 95       	ror	r30
    7ae4:	9f 5f       	subi	r25, 0xFF	; 255
    7ae6:	c1 f7       	brne	.-16     	; 0x7ad8 <__mulsf3_pse+0x8c>
    7ae8:	fe 2b       	or	r31, r30
    7aea:	88 0f       	add	r24, r24
    7aec:	91 1d       	adc	r25, r1
    7aee:	96 95       	lsr	r25
    7af0:	87 95       	ror	r24
    7af2:	97 f9       	bld	r25, 7
    7af4:	08 95       	ret
    7af6:	11 f4       	brne	.+4      	; 0x7afc <__mulsf3_pse+0xb0>
    7af8:	0e f4       	brtc	.+2      	; 0x7afc <__mulsf3_pse+0xb0>
    7afa:	b3 c0       	rjmp	.+358    	; 0x7c62 <__fp_nan>
    7afc:	a4 c0       	rjmp	.+328    	; 0x7c46 <__fp_mpack>

00007afe <sqrt>:
    7afe:	d1 d0       	rcall	.+418    	; 0x7ca2 <__fp_splitA>
    7b00:	d0 f3       	brcs	.-12     	; 0x7af6 <__mulsf3_pse+0xaa>
    7b02:	99 23       	and	r25, r25
    7b04:	d9 f3       	breq	.-10     	; 0x7afc <__mulsf3_pse+0xb0>
    7b06:	ce f3       	brts	.-14     	; 0x7afa <__mulsf3_pse+0xae>
    7b08:	9f 57       	subi	r25, 0x7F	; 127
    7b0a:	55 0b       	sbc	r21, r21
    7b0c:	87 ff       	sbrs	r24, 7
    7b0e:	ac d0       	rcall	.+344    	; 0x7c68 <__fp_norm2>
    7b10:	00 24       	eor	r0, r0
    7b12:	a0 e6       	ldi	r26, 0x60	; 96
    7b14:	40 ea       	ldi	r20, 0xA0	; 160
    7b16:	90 01       	movw	r18, r0
    7b18:	80 58       	subi	r24, 0x80	; 128
    7b1a:	56 95       	lsr	r21
    7b1c:	97 95       	ror	r25
    7b1e:	28 f4       	brcc	.+10     	; 0x7b2a <sqrt+0x2c>
    7b20:	80 5c       	subi	r24, 0xC0	; 192
    7b22:	66 0f       	add	r22, r22
    7b24:	77 1f       	adc	r23, r23
    7b26:	88 1f       	adc	r24, r24
    7b28:	20 f0       	brcs	.+8      	; 0x7b32 <sqrt+0x34>
    7b2a:	26 17       	cp	r18, r22
    7b2c:	37 07       	cpc	r19, r23
    7b2e:	48 07       	cpc	r20, r24
    7b30:	30 f4       	brcc	.+12     	; 0x7b3e <sqrt+0x40>
    7b32:	62 1b       	sub	r22, r18
    7b34:	73 0b       	sbc	r23, r19
    7b36:	84 0b       	sbc	r24, r20
    7b38:	20 29       	or	r18, r0
    7b3a:	31 29       	or	r19, r1
    7b3c:	4a 2b       	or	r20, r26
    7b3e:	a6 95       	lsr	r26
    7b40:	17 94       	ror	r1
    7b42:	07 94       	ror	r0
    7b44:	20 25       	eor	r18, r0
    7b46:	31 25       	eor	r19, r1
    7b48:	4a 27       	eor	r20, r26
    7b4a:	58 f7       	brcc	.-42     	; 0x7b22 <sqrt+0x24>
    7b4c:	66 0f       	add	r22, r22
    7b4e:	77 1f       	adc	r23, r23
    7b50:	88 1f       	adc	r24, r24
    7b52:	20 f0       	brcs	.+8      	; 0x7b5c <sqrt+0x5e>
    7b54:	26 17       	cp	r18, r22
    7b56:	37 07       	cpc	r19, r23
    7b58:	48 07       	cpc	r20, r24
    7b5a:	30 f4       	brcc	.+12     	; 0x7b68 <sqrt+0x6a>
    7b5c:	62 0b       	sbc	r22, r18
    7b5e:	73 0b       	sbc	r23, r19
    7b60:	84 0b       	sbc	r24, r20
    7b62:	20 0d       	add	r18, r0
    7b64:	31 1d       	adc	r19, r1
    7b66:	41 1d       	adc	r20, r1
    7b68:	a0 95       	com	r26
    7b6a:	81 f7       	brne	.-32     	; 0x7b4c <sqrt+0x4e>
    7b6c:	b9 01       	movw	r22, r18
    7b6e:	84 2f       	mov	r24, r20
    7b70:	91 58       	subi	r25, 0x81	; 129
    7b72:	88 0f       	add	r24, r24
    7b74:	96 95       	lsr	r25
    7b76:	87 95       	ror	r24
    7b78:	08 95       	ret
    7b7a:	7d d0       	rcall	.+250    	; 0x7c76 <__fp_pscA>
    7b7c:	30 f0       	brcs	.+12     	; 0x7b8a <sqrt+0x8c>
    7b7e:	82 d0       	rcall	.+260    	; 0x7c84 <__fp_pscB>
    7b80:	20 f0       	brcs	.+8      	; 0x7b8a <sqrt+0x8c>
    7b82:	31 f4       	brne	.+12     	; 0x7b90 <sqrt+0x92>
    7b84:	9f 3f       	cpi	r25, 0xFF	; 255
    7b86:	11 f4       	brne	.+4      	; 0x7b8c <sqrt+0x8e>
    7b88:	1e f4       	brtc	.+6      	; 0x7b90 <sqrt+0x92>
    7b8a:	6b c0       	rjmp	.+214    	; 0x7c62 <__fp_nan>
    7b8c:	0e f4       	brtc	.+2      	; 0x7b90 <sqrt+0x92>
    7b8e:	e0 95       	com	r30
    7b90:	e7 fb       	bst	r30, 7
    7b92:	53 c0       	rjmp	.+166    	; 0x7c3a <__fp_inf>

00007b94 <__addsf3x>:
    7b94:	e9 2f       	mov	r30, r25
    7b96:	7d d0       	rcall	.+250    	; 0x7c92 <__fp_split3>
    7b98:	80 f3       	brcs	.-32     	; 0x7b7a <sqrt+0x7c>
    7b9a:	ba 17       	cp	r27, r26
    7b9c:	62 07       	cpc	r22, r18
    7b9e:	73 07       	cpc	r23, r19
    7ba0:	84 07       	cpc	r24, r20
    7ba2:	95 07       	cpc	r25, r21
    7ba4:	18 f0       	brcs	.+6      	; 0x7bac <__addsf3x+0x18>
    7ba6:	71 f4       	brne	.+28     	; 0x7bc4 <__addsf3x+0x30>
    7ba8:	9e f5       	brtc	.+102    	; 0x7c10 <__addsf3x+0x7c>
    7baa:	95 c0       	rjmp	.+298    	; 0x7cd6 <__fp_zero>
    7bac:	0e f4       	brtc	.+2      	; 0x7bb0 <__addsf3x+0x1c>
    7bae:	e0 95       	com	r30
    7bb0:	0b 2e       	mov	r0, r27
    7bb2:	ba 2f       	mov	r27, r26
    7bb4:	a0 2d       	mov	r26, r0
    7bb6:	0b 01       	movw	r0, r22
    7bb8:	b9 01       	movw	r22, r18
    7bba:	90 01       	movw	r18, r0
    7bbc:	0c 01       	movw	r0, r24
    7bbe:	ca 01       	movw	r24, r20
    7bc0:	a0 01       	movw	r20, r0
    7bc2:	11 24       	eor	r1, r1
    7bc4:	ff 27       	eor	r31, r31
    7bc6:	59 1b       	sub	r21, r25
    7bc8:	99 f0       	breq	.+38     	; 0x7bf0 <__addsf3x+0x5c>
    7bca:	59 3f       	cpi	r21, 0xF9	; 249
    7bcc:	50 f4       	brcc	.+20     	; 0x7be2 <__addsf3x+0x4e>
    7bce:	50 3e       	cpi	r21, 0xE0	; 224
    7bd0:	68 f1       	brcs	.+90     	; 0x7c2c <__addsf3x+0x98>
    7bd2:	1a 16       	cp	r1, r26
    7bd4:	f0 40       	sbci	r31, 0x00	; 0
    7bd6:	a2 2f       	mov	r26, r18
    7bd8:	23 2f       	mov	r18, r19
    7bda:	34 2f       	mov	r19, r20
    7bdc:	44 27       	eor	r20, r20
    7bde:	58 5f       	subi	r21, 0xF8	; 248
    7be0:	f3 cf       	rjmp	.-26     	; 0x7bc8 <__addsf3x+0x34>
    7be2:	46 95       	lsr	r20
    7be4:	37 95       	ror	r19
    7be6:	27 95       	ror	r18
    7be8:	a7 95       	ror	r26
    7bea:	f0 40       	sbci	r31, 0x00	; 0
    7bec:	53 95       	inc	r21
    7bee:	c9 f7       	brne	.-14     	; 0x7be2 <__addsf3x+0x4e>
    7bf0:	7e f4       	brtc	.+30     	; 0x7c10 <__addsf3x+0x7c>
    7bf2:	1f 16       	cp	r1, r31
    7bf4:	ba 0b       	sbc	r27, r26
    7bf6:	62 0b       	sbc	r22, r18
    7bf8:	73 0b       	sbc	r23, r19
    7bfa:	84 0b       	sbc	r24, r20
    7bfc:	ba f0       	brmi	.+46     	; 0x7c2c <__addsf3x+0x98>
    7bfe:	91 50       	subi	r25, 0x01	; 1
    7c00:	a1 f0       	breq	.+40     	; 0x7c2a <__addsf3x+0x96>
    7c02:	ff 0f       	add	r31, r31
    7c04:	bb 1f       	adc	r27, r27
    7c06:	66 1f       	adc	r22, r22
    7c08:	77 1f       	adc	r23, r23
    7c0a:	88 1f       	adc	r24, r24
    7c0c:	c2 f7       	brpl	.-16     	; 0x7bfe <__addsf3x+0x6a>
    7c0e:	0e c0       	rjmp	.+28     	; 0x7c2c <__addsf3x+0x98>
    7c10:	ba 0f       	add	r27, r26
    7c12:	62 1f       	adc	r22, r18
    7c14:	73 1f       	adc	r23, r19
    7c16:	84 1f       	adc	r24, r20
    7c18:	48 f4       	brcc	.+18     	; 0x7c2c <__addsf3x+0x98>
    7c1a:	87 95       	ror	r24
    7c1c:	77 95       	ror	r23
    7c1e:	67 95       	ror	r22
    7c20:	b7 95       	ror	r27
    7c22:	f7 95       	ror	r31
    7c24:	9e 3f       	cpi	r25, 0xFE	; 254
    7c26:	08 f0       	brcs	.+2      	; 0x7c2a <__addsf3x+0x96>
    7c28:	b3 cf       	rjmp	.-154    	; 0x7b90 <sqrt+0x92>
    7c2a:	93 95       	inc	r25
    7c2c:	88 0f       	add	r24, r24
    7c2e:	08 f0       	brcs	.+2      	; 0x7c32 <__addsf3x+0x9e>
    7c30:	99 27       	eor	r25, r25
    7c32:	ee 0f       	add	r30, r30
    7c34:	97 95       	ror	r25
    7c36:	87 95       	ror	r24
    7c38:	08 95       	ret

00007c3a <__fp_inf>:
    7c3a:	97 f9       	bld	r25, 7
    7c3c:	9f 67       	ori	r25, 0x7F	; 127
    7c3e:	80 e8       	ldi	r24, 0x80	; 128
    7c40:	70 e0       	ldi	r23, 0x00	; 0
    7c42:	60 e0       	ldi	r22, 0x00	; 0
    7c44:	08 95       	ret

00007c46 <__fp_mpack>:
    7c46:	9f 3f       	cpi	r25, 0xFF	; 255
    7c48:	31 f0       	breq	.+12     	; 0x7c56 <__fp_mpack_finite+0xc>

00007c4a <__fp_mpack_finite>:
    7c4a:	91 50       	subi	r25, 0x01	; 1
    7c4c:	20 f4       	brcc	.+8      	; 0x7c56 <__fp_mpack_finite+0xc>
    7c4e:	87 95       	ror	r24
    7c50:	77 95       	ror	r23
    7c52:	67 95       	ror	r22
    7c54:	b7 95       	ror	r27
    7c56:	88 0f       	add	r24, r24
    7c58:	91 1d       	adc	r25, r1
    7c5a:	96 95       	lsr	r25
    7c5c:	87 95       	ror	r24
    7c5e:	97 f9       	bld	r25, 7
    7c60:	08 95       	ret

00007c62 <__fp_nan>:
    7c62:	9f ef       	ldi	r25, 0xFF	; 255
    7c64:	80 ec       	ldi	r24, 0xC0	; 192
    7c66:	08 95       	ret

00007c68 <__fp_norm2>:
    7c68:	91 50       	subi	r25, 0x01	; 1
    7c6a:	50 40       	sbci	r21, 0x00	; 0
    7c6c:	66 0f       	add	r22, r22
    7c6e:	77 1f       	adc	r23, r23
    7c70:	88 1f       	adc	r24, r24
    7c72:	d2 f7       	brpl	.-12     	; 0x7c68 <__fp_norm2>
    7c74:	08 95       	ret

00007c76 <__fp_pscA>:
    7c76:	00 24       	eor	r0, r0
    7c78:	0a 94       	dec	r0
    7c7a:	16 16       	cp	r1, r22
    7c7c:	17 06       	cpc	r1, r23
    7c7e:	18 06       	cpc	r1, r24
    7c80:	09 06       	cpc	r0, r25
    7c82:	08 95       	ret

00007c84 <__fp_pscB>:
    7c84:	00 24       	eor	r0, r0
    7c86:	0a 94       	dec	r0
    7c88:	12 16       	cp	r1, r18
    7c8a:	13 06       	cpc	r1, r19
    7c8c:	14 06       	cpc	r1, r20
    7c8e:	05 06       	cpc	r0, r21
    7c90:	08 95       	ret

00007c92 <__fp_split3>:
    7c92:	57 fd       	sbrc	r21, 7
    7c94:	90 58       	subi	r25, 0x80	; 128
    7c96:	44 0f       	add	r20, r20
    7c98:	55 1f       	adc	r21, r21
    7c9a:	59 f0       	breq	.+22     	; 0x7cb2 <__fp_splitA+0x10>
    7c9c:	5f 3f       	cpi	r21, 0xFF	; 255
    7c9e:	71 f0       	breq	.+28     	; 0x7cbc <__fp_splitA+0x1a>
    7ca0:	47 95       	ror	r20

00007ca2 <__fp_splitA>:
    7ca2:	88 0f       	add	r24, r24
    7ca4:	97 fb       	bst	r25, 7
    7ca6:	99 1f       	adc	r25, r25
    7ca8:	61 f0       	breq	.+24     	; 0x7cc2 <__fp_splitA+0x20>
    7caa:	9f 3f       	cpi	r25, 0xFF	; 255
    7cac:	79 f0       	breq	.+30     	; 0x7ccc <__fp_splitA+0x2a>
    7cae:	87 95       	ror	r24
    7cb0:	08 95       	ret
    7cb2:	12 16       	cp	r1, r18
    7cb4:	13 06       	cpc	r1, r19
    7cb6:	14 06       	cpc	r1, r20
    7cb8:	55 1f       	adc	r21, r21
    7cba:	f2 cf       	rjmp	.-28     	; 0x7ca0 <__fp_split3+0xe>
    7cbc:	46 95       	lsr	r20
    7cbe:	f1 df       	rcall	.-30     	; 0x7ca2 <__fp_splitA>
    7cc0:	08 c0       	rjmp	.+16     	; 0x7cd2 <__fp_splitA+0x30>
    7cc2:	16 16       	cp	r1, r22
    7cc4:	17 06       	cpc	r1, r23
    7cc6:	18 06       	cpc	r1, r24
    7cc8:	99 1f       	adc	r25, r25
    7cca:	f1 cf       	rjmp	.-30     	; 0x7cae <__fp_splitA+0xc>
    7ccc:	86 95       	lsr	r24
    7cce:	71 05       	cpc	r23, r1
    7cd0:	61 05       	cpc	r22, r1
    7cd2:	08 94       	sec
    7cd4:	08 95       	ret

00007cd6 <__fp_zero>:
    7cd6:	e8 94       	clt

00007cd8 <__fp_szero>:
    7cd8:	bb 27       	eor	r27, r27
    7cda:	66 27       	eor	r22, r22
    7cdc:	77 27       	eor	r23, r23
    7cde:	cb 01       	movw	r24, r22
    7ce0:	97 f9       	bld	r25, 7
    7ce2:	08 95       	ret

00007ce4 <_exit>:
    7ce4:	f8 94       	cli

00007ce6 <__stop_program>:
    7ce6:	ff cf       	rjmp	.-2      	; 0x7ce6 <__stop_program>
